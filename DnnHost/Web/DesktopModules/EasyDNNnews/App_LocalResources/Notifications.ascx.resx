<?xml version="1.0" encoding="utf-8"?>
<root>
	<!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
	<xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
		<xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
		<xsd:element name="root" msdata:IsDataSet="true">
			<xsd:complexType>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="metadata">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" />
							</xsd:sequence>
							<xsd:attribute name="name" use="required" type="xsd:string" />
							<xsd:attribute name="type" type="xsd:string" />
							<xsd:attribute name="mimetype" type="xsd:string" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="assembly">
						<xsd:complexType>
							<xsd:attribute name="alias" type="xsd:string" />
							<xsd:attribute name="name" type="xsd:string" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="data">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
								<xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
							<xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
							<xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
							<xsd:attribute ref="xml:space" />
						</xsd:complexType>
					</xsd:element>
					<xsd:element name="resheader">
						<xsd:complexType>
							<xsd:sequence>
								<xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
							</xsd:sequence>
							<xsd:attribute name="name" type="xsd:string" use="required" />
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:complexType>
		</xsd:element>
	</xsd:schema>
	<resheader name="resmimetype">
		<value>text/microsoft-resx</value>
	</resheader>
	<resheader name="version">
		<value>2.0</value>
	</resheader>
	<resheader name="reader">
		<value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<resheader name="writer">
		<value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
	</resheader>
	<data name="btnClose.Text" xml:space="preserve">
    <value>Close</value>
  </data>
	<data name="btnSave.Text" xml:space="preserve">
    <value>Save settings</value>
  </data>
	<data name="Edit article notification.HeaderText" xml:space="preserve">
    <value>Edit article notification</value>
  </data>
	<data name="lblArticleApproveConfirmation.HelpText" xml:space="preserve">
    <value>Send notification to author of article when article is approved or denied</value>
  </data>
	<data name="lblArticleApproveConfirmation.Text" xml:space="preserve">
    <value>Send notification to author of article when article is approved or denied</value>
  </data>
	<data name="lblCommentApproveConfirmation.HelpText" xml:space="preserve">
    <value>Send notification to author of comment when comment is approved or denied</value>
  </data>
	<data name="lblCommentApproveConfirmation.Text" xml:space="preserve">
    <value>Send notification to author of comment when comment is approved or denied</value>
  </data>
	<data name="lblUsernameToAdd.Text" xml:space="preserve">
    <value>Add user by username:</value>
  </data>
	<data name="lbUsernameAdd.Text" xml:space="preserve">
    <value>Add</value>
  </data>
	<data name="lbUserNotificationsRemove.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
	<data name="New article notification.HeaderText" xml:space="preserve">
    <value>New article notification</value>
  </data>
	<data name="New comment notification.HeaderText" xml:space="preserve">
    <value>New comment notification</value>
  </data>
	<data name="New event notification.HeaderText" xml:space="preserve">
    <value>New event notification</value>
  </data>
	<data name="NotificationsTitle.Text" xml:space="preserve">
    <value>System notifications</value>
  </data>
	<data name="Request for approve article.HeaderText" xml:space="preserve">
    <value>Request for article approval</value>
  </data>
	<data name="Request for approve comment.HeaderText" xml:space="preserve">
    <value>Request for comment approval</value>
  </data>
	<data name="Roles.HeaderText" xml:space="preserve">
    <value>Roles</value>
  </data>
	<data name="SettingsSaved.Text" xml:space="preserve">
    <value>Settings saved.</value>
  </data>
	<data name="Thatuserdoesnotexist.Text" xml:space="preserve">
    <value>User does not exist.</value>
  </data>
	<data name="Useralreadyaddedtolist.Text" xml:space="preserve">
    <value>User already added to list.</value>
  </data>
	<data name="Users.HeaderText" xml:space="preserve">
    <value>Users</value>
  </data>
	<data name="ControlTitle_notifications.Text" xml:space="preserve">
    <value>Notifications</value>
  </data>
	<data name="lblcbArticleAuthorCommentApproveConfirm.Text" xml:space="preserve">
    <value>Send notification to author of article when comment is posted to their article.</value>
  </data>
	<data name="lblcbArticleAuthorCommentApproveConfirm.Help" xml:space="preserve">
    <value>Send notification to author of article when comment is posted to their article.</value>
  </data>
	<data name="lblSendEventRegistrationInfoToArticleAuthor.Text" xml:space="preserve">
    <value>Send notification to author of article when someone registers to event.</value>
  </data>
	<data name="lblSendEventRegistrationInfoToArticleAuthor.Help" xml:space="preserve">
    <value>Send notification to author of article when someone registers to event.</value>
  </data>
	<data name="btnSaveClose.Text" xml:space="preserve">
    <value>Save &amp; Close</value>
  </data>
	<data name="Emptyusername.Text" xml:space="preserve">
    <value>Empty username.</value>
  </data>
	<data name="Event registration.HeaderText" xml:space="preserve">
    <value>Event registration</value>
  </data>
	<data name="editArticleNotification.Text" xml:space="preserve">
    <value>Edit article notification</value>
  </data>
	<data name="EmailContentRequired.Text" xml:space="preserve">
    <value>E-mail content required.</value>
  </data>
	<data name="emailNotificationTemplates.Text" xml:space="preserve">
    <value>Email notification templates</value>
  </data>
	<data name="emailSettings.Text" xml:space="preserve">
    <value>Email settings</value>
  </data>
	<data name="EmailSetttings.Text" xml:space="preserve">
    <value>Email setttings</value>
  </data>
	<data name="EmailSubjectRequired.Text" xml:space="preserve">
    <value>E-mail subject required.</value>
  </data>
	<data name="eventLinks.Text" xml:space="preserve">
    <value>Email links</value>
  </data>
	<data name="lblDefaultWhereToOpenContent.Help" xml:space="preserve">
    <value>Choose a module instance where the links from email will be opened.</value>
  </data>
	<data name="lblDefaultWhereToOpenContent.Text" xml:space="preserve">
    <value>Module instance where links will be opened:</value>
  </data>
	<data name="lblEditArticleNotificationEmailTemplateContent.Help" xml:space="preserve">
    <value>Email content.</value>
  </data>
	<data name="lblEditArticleNotificationEmailTemplateContent.Text" xml:space="preserve">
    <value>Email content:</value>
  </data>
	<data name="lblEditArticleNotificationEmailTemplateTheme.Help" xml:space="preserve">
    <value>Predefined email template.</value>
  </data>
	<data name="lblEditArticleNotificationEmailTemplateTheme.Text" xml:space="preserve">
    <value>Predefined email template:</value>
  </data>
	<data name="lblEditArticleNotificationMailSubject.Help" xml:space="preserve">
    <value>Subject.</value>
  </data>
	<data name="lblEditArticleNotificationMailSubject.Text" xml:space="preserve">
    <value>Subject:</value>
  </data>
	<data name="lblNewArticleNotificationEmailTemplateContent.Help" xml:space="preserve">
    <value>Email content.</value>
  </data>
	<data name="lblNewArticleNotificationEmailTemplateContent.Text" xml:space="preserve">
    <value>Email content:</value>
  </data>
	<data name="lblNewArticleNotificationEmailTemplateTheme.Help" xml:space="preserve">
    <value>Predefined email template.</value>
  </data>
	<data name="lblNewArticleNotificationEmailTemplateTheme.Text" xml:space="preserve">
    <value>Predefined email template:</value>
  </data>
	<data name="lblNewArticleNotificationMailSubject.Help" xml:space="preserve">
    <value>Subject.</value>
  </data>
	<data name="lblNewArticleNotificationMailSubject.Text" xml:space="preserve">
    <value>Subject:</value>
  </data>
	<data name="lblNewCommentNotificationEmailTemplateContent.Help" xml:space="preserve">
    <value>Email content.</value>
  </data>
	<data name="lblNewCommentNotificationEmailTemplateContent.Text" xml:space="preserve">
    <value>Email content:</value>
  </data>
	<data name="lblNewCommentNotificationEmailTemplateTheme.Help" xml:space="preserve">
    <value>Predefined email template.</value>
  </data>
	<data name="lblNewCommentNotificationEmailTemplateTheme.Text" xml:space="preserve">
    <value>Predefined email template:</value>
  </data>
	<data name="lblNewCommentNotificationMailSubject.Help" xml:space="preserve">
    <value>Subject.</value>
  </data>
	<data name="lblNewCommentNotificationMailSubject.Text" xml:space="preserve">
    <value>Subject:</value>
  </data>
	<data name="lblNewEventNotificationEmailTemplateContent.Help" xml:space="preserve">
    <value>Email content.</value>
  </data>
	<data name="lblNewEventNotificationEmailTemplateContent.Text" xml:space="preserve">
    <value>Email content:</value>
  </data>
	<data name="lblNewEventNotificationEmailTemplateTheme.Help" xml:space="preserve">
    <value>Predefined email template.</value>
  </data>
	<data name="lblNewEventNotificationEmailTemplateTheme.Text" xml:space="preserve">
    <value>Predefined email template:</value>
  </data>
	<data name="lblNewEventNotificationMailSubject.Help" xml:space="preserve">
    <value>Subject.</value>
  </data>
	<data name="lblNewEventNotificationMailSubject.Text" xml:space="preserve">
    <value>Subject:</value>
  </data>
	<data name="lblNotificationProvider.Help" xml:space="preserve">
    <value>Select the method of sending notifications. If "DNN notifications" is selected, then the notifications are sent via the DNN notification API, and users receive them in their DNN inbox. If "SMTP" is selected, then the notifications are sent via SMTP directly to user’s email. To be able to use the SMTP method, you must first configure email settings. If "Both" is selected, notifications are sent via both channels.</value>
  </data>
	<data name="lblNotificationProvider.Text" xml:space="preserve">
    <value>Send notifications via:</value>
  </data>
	<data name="lblRequestForApproveArticleEmailTemplateContent.Help" xml:space="preserve">
    <value>Email content.</value>
  </data>
	<data name="lblRequestForApproveArticleEmailTemplateContent.Text" xml:space="preserve">
    <value>Email content:</value>
  </data>
	<data name="lblRequestForApproveArticleEmailTemplateTheme.Help" xml:space="preserve">
    <value>Predefined email template.</value>
  </data>
	<data name="lblRequestForApproveArticleEmailTemplateTheme.Text" xml:space="preserve">
    <value>Predefined email template:</value>
  </data>
	<data name="lblRequestForApproveArticleMailSubject.Help" xml:space="preserve">
    <value>Subject.</value>
  </data>
	<data name="lblRequestForApproveArticleMailSubject.Text" xml:space="preserve">
    <value>Subject:</value>
  </data>
	<data name="lblRequestForApproveCommentEmailTemplateContent.Help" xml:space="preserve">
    <value>Email content.</value>
  </data>
	<data name="lblRequestForApproveCommentEmailTemplateContent.Text" xml:space="preserve">
    <value>Email content:</value>
  </data>
	<data name="lblRequestForApproveCommentEmailTemplateTheme.Help" xml:space="preserve">
    <value>Predefined email template.</value>
  </data>
	<data name="lblRequestForApproveCommentEmailTemplateTheme.Text" xml:space="preserve">
    <value>Predefined email template:</value>
  </data>
	<data name="lblRequestForApproveCommentMailSubject.Help" xml:space="preserve">
    <value>Subject.</value>
  </data>
	<data name="lblRequestForApproveCommentMailSubject.Text" xml:space="preserve">
    <value>Subject:</value>
  </data>
	<data name="liBoth.Text" xml:space="preserve">
    <value>BOTH</value>
  </data>
	<data name="liDnnApi.Text" xml:space="preserve">
    <value>DNN notifications</value>
  </data>
	<data name="liSmtp.Text" xml:space="preserve">
    <value>SMTP</value>
  </data>
	<data name="newArticleNotification.Text" xml:space="preserve">
    <value>New article notification</value>
  </data>
	<data name="newCommentNotification.Text" xml:space="preserve">
    <value>New comment notification</value>
  </data>
	<data name="newEventNotification.Text" xml:space="preserve">
    <value>New event notification</value>
  </data>
	<data name="NotificationSettings.Text" xml:space="preserve">
    <value>Notification settings</value>
  </data>
	<data name="OpenIn.Text" xml:space="preserve">
    <value>Open in</value>
  </data>
	<data name="requestForApproveArticle.Text" xml:space="preserve">
    <value>Request for article approval</value>
  </data>
	<data name="requestForApproveComment.Text" xml:space="preserve">
    <value>Request for comment approval</value>
  </data>
	<data name="emailSettingsHeader.Text" xml:space="preserve">
    <value>Email settings</value>
  </data>
	<data name="fromMailNotValid.Text" xml:space="preserve">
    <value>From mail not valid</value>
  </data>
	<data name="fromMailRequired.Text" xml:space="preserve">
    <value>From mail required.</value>
  </data>
	<data name="fromNameRequired.Text" xml:space="preserve">
    <value>From name required.</value>
  </data>
	<data name="lblDefaultFromMail.Help" xml:space="preserve">
    <value>Enter your outgoing email.</value>
  </data>
	<data name="lblDefaultFromMail.Text" xml:space="preserve">
    <value>From email:</value>
  </data>
	<data name="lblDefaultFromName.Help" xml:space="preserve">
    <value>Enter a name which will be on your outgoing emails.</value>
  </data>
	<data name="lblDefaultFromName.Text" xml:space="preserve">
    <value>From name:</value>
  </data>
	<data name="lblDefaultReplyTo.Help" xml:space="preserve">
    <value>Enter a reply email here, if it is different from outgoing email.</value>
  </data>
	<data name="lblDefaultReplyTo.Text" xml:space="preserve">
    <value>Reply to:</value>
  </data>
	<data name="replyToMailNotValid.Text" xml:space="preserve">
    <value>Reply to mail not valid.</value>
  </data>
	<data name="replyToMailRequired.Text" xml:space="preserve">
    <value>Reply to mail required.</value>
  </data>
	<data name="required.ErrorMessage" xml:space="preserve">
    <value>Required!</value>
  </data>
	<data name="rfvDefaultFromMail.ErrorMessage" xml:space="preserve">
    <value>Required!</value>
  </data>
	<data name="rfvDefaultFromName.ErrorMessage" xml:space="preserve">
    <value>Required!</value>
  </data>
	<data name="lblSettingHelpNotification.Text" xml:space="preserve">
		<value>To be able to use the SMTP method, you must first configure email settings.</value>
	</data>
</root>