IF NOT EXISTS (SELECT UpdateVersion FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUpdate] WHERE UpdateVersion = '10.06.01')
BEGIN
	INSERT {databaseOwner}[{objectQualifier}EasyDNNNewsUpdate]([UpdateVersion],[Finished],[InstallType]) VALUES(N'10.06.01',0, N'DNN')
END
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]    Script Date: 7.1.2020. 13:04:54 ******/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]    Script Date: 7.1.2020. 13:04:54 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]
	@PortalId INT,
	@UserId INT,
	@ModuleId INT,
	@RowCount INT,
	@AdminOrSuperUser BIT  = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDnnUserId INT = 0,
	@FilterByDnnGroupId INT = 0,
	@ShowAllAuthors BIT = 1,
	@CategoryFilterType TINYINT = 0,
	@SatellitePermissionsSource TINYINT = 0,
	@PermissionsModuleId INT = 0,
	@HideUnlocalizedItems BIT = 0,
	@FilterCategoryId INT = NULL,
	@IsPortalSharing BIT = 0,
	@IsIcalUpcomingOccurrences INT = 0
AS
SET NOCOUNT ON;
DECLARE @paramList NVARCHAR(1000);
SET @paramList = N'
	@PortalId INT,
	@UserId INT,
	@ModuleId INT,
	@RowCount INT,
	@LocaleCode NVARCHAR(20),
	@FilterByDNNUserID INT,
	@FilterByDNNGroupID INT,
	@PermissionsModuleId INT,
	@FilterCategoryId INT = NULL,
	@IsIcalUpcomingOccurrences INT= 0'

DECLARE @sqlcommand NVARCHAR(MAX);
DECLARE @sqlSharingPortal NVARCHAR(300);
DECLARE @sqlSharingPortalAll NVARCHAR(300);

SET @sqlcommand = N'
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();
SET @CurrentDate = GETUTCDATE();
DECLARE @EventsLocaleCode NVARCHAR(20);

IF @LocaleCode IS NULL
	SET @EventsLocaleCode = ''Default'';
ELSE
	SET @EventsLocaleCode = (SELECT @LocaleCode)

CREATE TABLE #UserInRoles (RoleID INT PRIMARY KEY);
CREATE TABLE #ViewCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #FilterCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #ViewCategoriesWithFilter (CategoryID INT PRIMARY KEY); '

IF @IsPortalSharing = 1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	CREATE TABLE #SharingPortals (PortalID INT PRIMARY KEY);
	INSERT INTO #SharingPortals
	SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleId;';

	SET @sqlSharingPortal = N' EXISTS (SELECT PortalID FROM #SharingPortals AS sp WHERE sp.PortalID = na.PortalID) ';
	SET @sqlSharingPortalAll = N'PortalID IN (SELECT PortalID FROM #SharingPortals) ';
END
ELSE
BEGIN
	SET @sqlSharingPortal = N' na.PortalID = @PortalId ';
	SET @sqlSharingPortalAll = N'PortalID = @PortalId ';
END

IF @UserId <> -1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #UserInRoles '

	IF @IsPortalSharing = 0
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] AS mp ON mp.SharingPortalID = r.PortalID
		WHERE mp.ModuleID = @ModuleId
			AND ur.UserID = @UserId
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
END

IF @AdminOrSuperUser = 1 OR @SatellitePermissionsSource = 0
BEGIN
	SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #ViewCategories
		SELECT c.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		WHERE c.' + @sqlSharingPortalAll
END
ELSE IF @UserId = -1
BEGIN
	IF @SatellitePermissionsSource = 1 OR EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleId AND PermissionsPMSource = 1)
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalId  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalId
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.PortalID = @PortalId
					AND rps.ModuleID IS NULL
					AND rps.RoleID IS NULL); '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.ModuleID = @PermissionsModuleId AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.PortalID = @PortalId
					AND rps.ModuleID = @PermissionsModuleId
					AND rps.RoleID IS NULL); '
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @IsPortalSharing = 1
	BEGIN -- only can be by module settings, roles from current portal!
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN (
				SELECT r.[RoleID]
				FROM {databaseOwner}[{objectQualifier}Roles] AS r
				INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
				WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
					AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
					AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate)
			) AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleId AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN (
				SELECT r.[RoleID]
				FROM {databaseOwner}[{objectQualifier}Roles] AS r
				INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
				WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
					AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
					AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate)
			) AS uir ON rps.RoleID = uir.RoleID 
			WHERE rps.ModuleID = @PermissionsModuleId
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId; '
	END
	ELSE
	IF @SatellitePermissionsSource = 1 OR EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleId AND PermissionsPMSource = 1)
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalId AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.PortalID = @PortalId AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalId;
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalId AND rps.ModuleID IS NULL
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.PortalID = @PortalId AND ups.ModuleID IS NULL; '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleId AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID 
			WHERE rps.ModuleID = @PermissionsModuleId
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId; '
	END
END

IF @FilterCategoryID IS NOT NULL -- filtrira se po jednoj kategoriji
BEGIN
	SET @sqlcommand = @sqlcommand  + N'
	INSERT INTO #FilterCategories SELECT @FilterCategoryId; '
END
ELSE IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT [CategoryID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
	WHERE ' + @sqlSharingPortalAll
END
ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT [CategoryID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
	WHERE ModuleID = @ModuleId; '
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	;WITH hierarchy AS(
		SELECT cl.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE EXISTS (
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
			WHERE ci.ModuleID = @ModuleId
				AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
		)
		AND cl.' + @sqlSharingPortalAll + '
		UNION ALL
		SELECT cl.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
	)
	INSERT INTO #FilterCategories
	SELECT DISTINCT CategoryID
	FROM hierarchy; '
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategoriesWithFilter
SELECT vc.CategoryID
FROM #ViewCategories AS vc
INTERSECT
SELECT fc.CategoryID
FROM #FilterCategories AS fc; '

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

IF @IsSocialInstance = 1
BEGIN
	IF @FilterByDNNGroupID <> 0
	BEGIN	
		SET @FilterBySocialGroup = 1;
	END
END
ELSE
BEGIN
	IF @ShowAllAuthors = 0
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		SET @sqlcommand = @sqlcommand + N'
		DECLARE @TempAuthorsIDList TABLE (UserID INT PRIMARY KEY);
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleId
		UNION 
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
		WHERE mgi.ModuleID = @ModuleId '
	END
END

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #LocalizedCategories (Id INT PRIMARY KEY, Name NVARCHAR(200), CategoryText NVARCHAR(MAX), CategoryURL NVARCHAR(1500));
	INSERT INTO #LocalizedCategories
	SELECT c.CategoryID AS Id,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryName ELSE cl.Title END AS Name,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryText ELSE cl.CategoryText END AS CategoryText,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryURL ELSE cl.CategoryURL END AS CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.CategoryID = cl.CategoryID AND cl.LocaleCode = @LocaleCode
	WHERE c.CategoryID IN (SELECT CategoryID FROM #ViewCategories) '

SET @sqlcommand = @sqlcommand  + N'
IF @RowCount = 0 OR @RowCount > 100
	SET @RowCount = 100;

;WITH MainFilters AS(
	SELECT DISTINCT na.[ArticleID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #FilterCategories) '
	IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand  + N' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode '
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand  + N'
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserId, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey '
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand  + N'
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserId, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey '
	SET @sqlcommand = @sqlcommand  + N'
	WHERE ' + @sqlSharingPortal + N'
		AND na.EventArticle = 1
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '
		IF @LocaleCode IS NULL SET @sqlcommand = @sqlcommand  + N' AND na.HideDefaultLocale = 0 '
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand  + N' AND na.UserID = @FilterByDNNUserID '
		ELSE IF @ShowAllAuthors = 0 SET @sqlcommand = @sqlcommand  + N' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) '
	SET @sqlcommand = @sqlcommand  + N'
)'

SET @sqlcommand = @sqlcommand + N'
SELECT TOP (@RowCount)
alr.*,
CASE WHEN alr.RecurringID IS NULL
THEN
	NULL
ELSE
	(
		SELECT [Summary]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringContent]
		WHERE ArticleID = alr.ArticleID AND RecurringID = alr.RecurringID AND LocaleCode = @EventsLocaleCode
	)
END AS CustomSummary,
categories.CssCategoryClasses,
maps.GoogleMapData, '

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color", c.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.CategoryID = ci.CategoryID
	WHERE ci.ArticleID = alr.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategories)
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '
ELSE
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", lc.Name AS "@name", lc.CategoryURL AS "@url", c.Color AS "@color", lc.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #LocalizedCategories AS lc ON c.CategoryID = lc.Id
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON ci.CategoryID = c.CategoryID
	WHERE ci.ArticleID = alr.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '

If @CategoryFilterType <> 0
		SET @sqlcommand = @sqlcommand  + N'link.LinkTabId, link.LinkModuleId '
ELSE
	SET @sqlcommand = @sqlcommand  + N'NULL AS LinkTabId, NULL AS LinkModuleId'

SET @sqlcommand = @sqlcommand  + N'
FROM ( '
IF @LocaleCode IS NULL
	SET @sqlcommand = @sqlcommand  + N'
	SELECT na.[ArticleID],na.[PortalID],na.[UserID],na.[Title],na.[SubTitle],na.[Summary],na.[Article],na.[ArticleImage],na.[DateAdded],na.[LastModified],na.[PublishDate]
		,na.[ExpireDate],na.[Approved],na.[Featured],na.[NumberOfViews],na.[RatingValue],na.[RatingCount],na.[AllowComments],na.[Active]
		,na.[TitleLink],na.[DetailType],na.[DetailTypeData],na.[DetailsTemplate],na.[DetailsTheme],na.[GalleryPosition],na.[GalleryDisplayType]
		,na.[ShowMainImage],na.[ShowMainImageFront],na.[CommentsTheme],na.[ArticleImageFolder],na.[NumberOfComments]
		,na.[ArticleImageSet],na.[MetaDecription],na.[MetaKeywords],na.[DisplayStyle],na.[DetailTarget]
		,na.[ArticleFromRSS],na.[HasPermissions],na.[EventArticle],na.[DetailMediaType],na.[DetailMediaData],na.[AuthorAliasName],na.[ShowGallery],na.[ArticleGalleryID]
		,na.[MainImageTitle],na.[MainImageDescription],na.[CFGroupeID],na.[ContactEmail],ne.[WhloeDay],ne.[ShowEndDate],
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[StartDateTime] ELSE ne.[StartDate] END AS StartDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[EndDateTime] ELSE ne.[EndDate] END AS EndDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[RecurringID] ELSE NULL END AS RecurringID '
ELSE
	SET @sqlcommand = @sqlcommand + N'
	SELECT na.[ArticleID],na.[PortalID],na.[UserID]
		,CASE WHEN cl.ArticleID IS NULL THEN na.[Title] ELSE cl.[Title] END AS Title
		,CASE WHEN cl.ArticleID IS NULL THEN na.[SubTitle] ELSE cl.[SubTitle] END AS SubTitle
		,CASE WHEN cl.ArticleID IS NULL THEN na.[Summary] ELSE cl.[Summary] END AS Summary
		,CASE WHEN cl.ArticleID IS NULL THEN na.[Article] ELSE cl.[Article] END AS Article
		,na.[ArticleImage],na.[DateAdded],na.[LastModified],na.[PublishDate]
		,na.[ExpireDate],na.[Approved],na.[Featured],na.[NumberOfViews],na.[RatingValue],na.[RatingCount],na.[AllowComments],na.[Active]
		,CASE WHEN cl.ArticleID IS NULL THEN na.[TitleLink] ELSE cl.[clTitleLink] END AS TitleLink
		,na.[DetailType]
		,CASE WHEN cl.ArticleID IS NULL THEN na.[DetailTypeData] ELSE cl.[DetailTypeData] END AS DetailTypeData
		,na.[DetailsTemplate],na.[DetailsTheme],na.[GalleryPosition],na.[GalleryDisplayType]
		,na.[ShowMainImage],na.[ShowMainImageFront],na.[CommentsTheme],na.[ArticleImageFolder],na.[NumberOfComments]
		,na.[ArticleImageSet]
		,CASE WHEN cl.ArticleID IS NULL THEN na.[MetaDecription] ELSE cl.[MetaDecription] END AS MetaDecription
		,CASE WHEN cl.ArticleID IS NULL THEN na.[MetaKeywords] ELSE cl.[MetaKeywords] END AS MetaKeywords
		,na.[DisplayStyle],na.[DetailTarget]
		,na.[ArticleFromRSS],na.[HasPermissions],na.[EventArticle],na.[DetailMediaType],na.[DetailMediaData],na.[AuthorAliasName],na.[ShowGallery],na.[ArticleGalleryID]
		,CASE WHEN cl.ArticleID IS NULL THEN na.[MainImageTitle] ELSE cl.[MainImageTitle] END AS MainImageTitle
		,CASE WHEN cl.ArticleID IS NULL THEN na.[MainImageDescription] ELSE cl.[MainImageDescription] END AS MainImageDescription
		,na.[CFGroupeID],na.[ContactEmail],ne.[WhloeDay],ne.[ShowEndDate],
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[StartDateTime] ELSE ne.[StartDate] END AS StartDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[EndDateTime] ELSE ne.[EndDate] END AS EndDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[RecurringID] ELSE NULL END AS RecurringID ';
SET @sqlcommand = @sqlcommand + N'
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND
		((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN @IsIcalUpcomingOccurrences=1 THEN 45 WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.StartDateTime)) OR
		(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN @IsIcalUpcomingOccurrences=1 THEN 45 WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.StartDateTime))) ' 
IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON na.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';

SET @sqlcommand = @sqlcommand + N'
	WHERE na.ArticleID IN (
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
		WHERE na.HasPermissions = 0
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate)) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
		SET @sqlcommand = @sqlcommand + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND
			((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN @IsIcalUpcomingOccurrences=1 THEN 45 WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.StartDateTime)) OR
			(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN @IsIcalUpcomingOccurrences=1 THEN 45 WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.StartDateTime))) '
		SET @sqlcommand = @sqlcommand + N'
		WHERE na.HasPermissions = 0
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
		SET @sqlcommand = @sqlcommand + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate)) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand + N' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
				IF @UserId = -1 SET @sqlcommand = @sqlcommand + N' AND aup.UserID IS NULL '
				ELSE SET @sqlcommand = @sqlcommand + N' AND aup.UserID = @UserId '
			END
		SET @sqlcommand = @sqlcommand + N'
		UNION ALL
		SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND
			((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN @IsIcalUpcomingOccurrences=1 THEN 45 WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.StartDateTime)) OR
			(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN @IsIcalUpcomingOccurrences=1 THEN 45 WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.StartDateTime)))
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand + N' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
				IF @UserId = -1 SET @sqlcommand = @sqlcommand + N' AND aup.UserID IS NULL '
				ELSE SET @sqlcommand = @sqlcommand + N' AND aup.UserID = @UserId '
			END
		SET @sqlcommand = @sqlcommand + N'
		UNION
		SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #FilterCategories)
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0 '
	
		SET @sqlcommand = @sqlcommand + N'
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate)) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND (na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles)) '
		SET @sqlcommand = @sqlcommand + N'
		UNION ALL
		SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND
			((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN @IsIcalUpcomingOccurrences=1 THEN 45 WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.StartDateTime)) OR
			(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN @IsIcalUpcomingOccurrences=1 THEN 45 WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.StartDateTime))) '		
		SET @sqlcommand = @sqlcommand + N'
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND (na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles)) '
		SET @sqlcommand = @sqlcommand + N'
	)
) AS alr
OUTER APPLY 
(
	SELECT c.CategoryID AS "@id", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #ViewCategories AS uvc ON c.CategoryID = uvc.CategoryID
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID
	WHERE cl.ArticleID = alr.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')
) AS categories (CssCategoryClasses)
OUTER APPLY 
( 
	SELECT PointData AS GoogleMapData
	FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md
	INNER JOIN  {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID
	WHERE mc.ArticleID =  alr.ArticleID
) maps '

IF @CategoryFilterType <> 0
	SET @sqlcommand = @sqlcommand  + N'
	OUTER APPLY 
	( 
		SELECT TOP 1 clink.[NewsModuleTabID] AS LinkTabId, clink.[NewsModuleID] AS LinkModuleId
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl ON c.CategoryID = cl.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS clink ON clink.CategoryID = cl.CategoryID AND clink.SourceModuleID = @ModuleId
		WHERE c.ArticleID = alr.ArticleID
			AND cl.' + @sqlSharingPortalAll + '
		ORDER BY cl.Position
	) link '

SET @sqlcommand = @sqlcommand  + N'
ORDER BY alr.StartDate; '

SET @sqlcommand = @sqlcommand + N'
IF OBJECT_ID(''tempdb..#UserInRoles'') IS NOT NULL
	DROP TABLE #UserInRoles;
IF OBJECT_ID(''tempdb..#ViewCategories'') IS NOT NULL
	DROP TABLE #ViewCategories;
IF OBJECT_ID(''tempdb..#ViewCategoriesWithFilter'') IS NOT NULL
	DROP TABLE #ViewCategoriesWithFilter;
IF OBJECT_ID(''tempdb..#FilterCategories'') IS NOT NULL
	DROP TABLE #FilterCategories; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#LocalizedCategories'') IS NOT NULL
		DROP TABLE #LocalizedCategories; '

IF @IsPortalSharing = 1
	SET @sqlcommand = @sqlcommand + N' DROP TABLE #SharingPortals;';

EXEC SP_EXECUTESQL @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalId = @PortalId
	,@UserId  = @UserId
	,@ModuleId = @ModuleId
	,@RowCount = @RowCount
	,@LocaleCode = @LocaleCode
	,@FilterByDNNUserID = @FilterByDNNUserID
	,@FilterByDNNGroupID = @FilterByDNNGroupID
	,@PermissionsModuleId = @PermissionsModuleId
	,@FilterCategoryId = @FilterCategoryId
	,@IsIcalUpcomingOccurrences= @IsIcalUpcomingOccurrences
GO

