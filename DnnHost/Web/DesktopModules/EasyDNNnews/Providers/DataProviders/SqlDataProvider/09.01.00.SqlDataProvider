IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsUserItems' and column_name = 'IsDeletedStatus')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] ADD IsDeletedStatus TINYINT CONSTRAINT DF_{objectQualifier}EasyDNNNewsEventsUserItems_IsDeletedStatus DEFAULT (0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsUserItems' and column_name = 'DeleteRequestDateUtc')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] ADD DeleteRequestDateUtc DATETIME NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsEventsData' and column_name = 'EnableCancelRegistrations')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] ADD EnableCancelRegistrations  BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsEventsData_EnableCancelRegistrations DEFAULT (0) NOT NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'SubjectUnregisterNotification')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD SubjectUnregisterNotification NVARCHAR(256) NULL
END
GO
IF NOT EXISTS  (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'TemplateUnregisterNotification')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD TemplateUnregisterNotification NVARCHAR(MAX) NULL
END
GO
IF EXISTS (SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}EasyDNNNewsAuthorProfile' AND COLUMN_NAME = 'ShortInfo' AND DATA_TYPE = 'nvarchar' AND CHARACTER_MAXIMUM_LENGTH = 350)
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] ALTER COLUMN [ShortInfo] NVARCHAR(4000) NULL;
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[IX_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers]') AND type in (N'UQ'))
BEGIN
	EXECUTE(N' ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers] DROP CONSTRAINT [IX_{objectQualifier}EasyDNNNewsEmailAuthenticatedUsers] ')
END
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[IX_{objectQualifier}EasyDNNNewsEventsUserItems]') AND type in (N'UQ'))
BEGIN
	EXECUTE(N' ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] DROP CONSTRAINT [IX_{objectQualifier}EasyDNNNewsEventsUserItems] ')
END
GO
IF NOT EXISTS  (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyDNNNewsComments' AND column_name = 'IsDeleted')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsComments] ADD IsDeleted BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsComments_IsDeleted DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsCalendarSettings' and column_name = 'CalendarTooltipHtmlFileName')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsCalendarSettings] ADD CalendarTooltipHtmlFileName NVARCHAR(256) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsCalendarSettings' and column_name = 'UpcomingEventsTooltipHtmlFileName')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsCalendarSettings] ADD UpcomingEventsTooltipHtmlFileName NVARCHAR(256) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'AddCanonicalToOriginalRSSLink')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD AddCanonicalToOriginalRSSLink BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_AddCanonicalToOriginalRSSLink DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'AddCanonicalToOriginalRSSLink')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD AddCanonicalToOriginalRSSLink BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsPortalSettings_AddCanonicalToOriginalRSSLink DEFAULT(0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'CustomResxFolder')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD CustomResxFolder NVARCHAR(250) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'CustomResxFolder')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD CustomResxFolder NVARCHAR(250) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'AddThisProfileId')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD AddThisProfileId NVARCHAR(64) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'OpenGraphMetaTags')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD OpenGraphMetaTags NVARCHAR(4000) CONSTRAINT DF_{objectQualifier}EasyDNNNews_OpenGraphMetaTags DEFAULT('<meta property="og:site_name" content="[Portal:PortalName]" />
<meta property="og:title" content="[EasyDNNnews:Title]" />
<meta property="og:description" content="[EasyDNNnews:CleanArticleText:500]" />
<meta property="og:url" content="[EasyDNNnews:CurrentURL]" />
<meta property="og:type" content="article" />
[EasyDNNnews:IfExists:Image]
<meta property="og:image" content="[EasyDNNnews:OriginalArticleImage:AbsoluteUrl]" />
[EasyDNNnews:EndIf:Image]
') NOT NULL
END

IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNews' and column_name = 'TwitterCardMetaTags')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNews] ADD TwitterCardMetaTags NVARCHAR(4000) CONSTRAINT DF_{objectQualifier}EasyDNNNews_TwitterCardMetaTags DEFAULT('<meta name="twitter:card" content="summary_large_image" />
<meta name="twitter:title" content="[EasyDNNnews:Title]" />
<meta name="twitter:description" content="[EasyDNNnews:CleanArticleText:200]" />
[EasyDNNnews:IfExists:Image]
<meta name="twitter:image" content="[EasyDNNnews:OriginalArticleImage:AbsoluteUrl]" />
[EasyDNNnews:EndIf:Image]
') NOT NULL 
END
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings]') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings](
	[ModuleId] [int] NOT NULL,
	[Theme] [nvarchar](250) NOT NULL,
	[ThemeStyle] [nvarchar](250) NOT NULL,
	[ShowAllCategories] [bit] NOT NULL,
	[AutoAddChildCategories] [bit] NOT NULL,
	[OpenInTabId] [int] NOT NULL,
	[OpenInModuleId] [int] NOT NULL,
	[DisplayAllAuthors] [bit] NOT NULL,
	[DisplayHeader] [bit] NOT NULL,
	[IsSocialInstance] [bit] NOT NULL,
	[HideUnlocalizedItems] [bit] NOT NULL,
	[Imported] [bit] NOT NULL,
	[FilterByEventsLimitByDays] [int] NULL,
	[OrderByCustomFieldId] [int] NULL,
	[ArticlesOrderBy] [nvarchar](50) NOT NULL,
	[ArticlesOrderByDirection] [varchar](4) NOT NULL,
	[HtmlTemplate] [nvarchar](250) NOT NULL,
	[FeaturedOnTop] [bit] NOT NULL,
	[FilterOnlyFeatured] [bit] NOT NULL,
	[ItemsPerPage] [int] NOT NULL,
	[RestrictionByDateRange] [smallint] NULL,
	[TemplateGroup] [nvarchar](150) NOT NULL,
	[IsPaginationEnabled] [bit] NOT NULL,
	[Visibility] [tinyint] NOT NULL,
	[EventsFilterType] [tinyint] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EasyDNNnewsMyEventsSettings] PRIMARY KEY CLUSTERED 
(
	[ModuleId] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF)
)
END
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsMyEventsSettings_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsMyEventsSettings_Modules] FOREIGN KEY([ModuleId])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsMyEventsSettings_Modules]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsMyEventsSettings_Modules]
GO
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsMyEventsSettings_OrderByCustomFieldID]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}EasyDNNnewsMyEventsSettings_OrderByCustomFieldID] FOREIGN KEY([OrderByCustomFieldId])
REFERENCES {databaseOwner}[{objectQualifier}EasyDNNfields] ([CustomFieldID])
ON DELETE SET NULL
GO
IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}EasyDNNnewsMyEventsSettings_OrderByCustomFieldID]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings] CHECK CONSTRAINT [FK_{objectQualifier}EasyDNNnewsMyEventsSettings_OrderByCustomFieldID]
GO
IF NOT EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsMyEventsSettings_ItemsPerPage]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings]  WITH CHECK ADD  CONSTRAINT [CK_{objectQualifier}EasyDNNnewsMyEventsSettings_ItemsPerPage] CHECK  (([ItemsPerPage]>(0)))
GO
IF  EXISTS (SELECT * FROM sys.check_constraints WHERE object_id = OBJECT_ID(N'{databaseOwner}[CK_{objectQualifier}EasyDNNnewsMyEventsSettings_ItemsPerPage]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings]'))
ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNnewsMyEventsSettings] CHECK CONSTRAINT [CK_{objectQualifier}EasyDNNnewsMyEventsSettings_ItemsPerPage]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetArticles]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetArticles]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetAllContent]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetAllContent]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsUserEventsRegistrationList]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsUserEventsRegistrationList]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetContentNoPermissions]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetContentNoPermissions]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetContentByPermissions]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetContentByPermissions]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNfieldsGetValues]
(
	@ArticleID INT,
	@FieldsTemplateID INT,
	@LocaleCode NVARCHAR(20) = NULL,
	@ShowHiddenFields BIT
)
AS
SET NOCOUNT ON;
IF @LocaleCode IS NULL
BEGIN
	SELECT fv.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],cf.[IconURL],cf.[ACode],cf.[DisplayFormat],cf.[Options],fv.[RText],fv.[Decimal],fv.[Int],fv.[Bit],fv.[DateTime],NULL AS [FieldElementID],fv.[Text],fv.[Text] AS TextValue, gt.[Position],NULL AS [MEPosition]
	FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON cf.[CustomFieldID] = fv.[CustomFieldID]
	WHERE cf.[IsPublished] = 1
		AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields)
		AND gt.[FieldsTemplateID] = @FieldsTemplateID AND fv.[ArticleID] = @ArticleID
		AND cf.ControlTypeID < 300
	UNION ALL
	SELECT fms.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],cf.[IconURL],NULL AS [ACode],NULL AS [DisplayFormat],cf.[Options],NULL AS [RText], NULL AS [Decimal],NULL AS [Int],NULL AS [Bit], NULL AS [DateTime],fme.[FieldElementID],fme.[Text],fme.[Text] AS TextValue,gt.[Position],fme.[Position] AS [MEPosition]
	FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] AS fme ON cf.[CustomFieldID] = fme.[CustomFieldID]
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] AS fms ON cf.[CustomFieldID] = fms.[CustomFieldID] AND fme.[FieldElementID] = fms.[FieldElementID] AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
	WHERE cf.[IsPublished] = 1
		AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields)
		AND gt.[FieldsTemplateID] = @FieldsTemplateID
		AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
		AND cf.ControlTypeID < 300
	ORDER BY [Position], [MEPosition];
END
ELSE
BEGIN
	;WITH AllValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],[IconURL],[ACode],[DisplayFormat],[Options],[RText],[Decimal],[Int],[Bit],[DateTime],[FieldElementID],[Text],[TextValue],[Position],[MEPosition])AS (
		SELECT fv.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],cf.[IconURL],cf.[ACode],cf.[DisplayFormat],cf.[Options],fv.[RText],fv.[Decimal],fv.[Int],fv.[Bit],fv.[DateTime],NULL AS [FieldElementID],fv.[Text],fv.[Text] AS TextValue,gt.[Position],NULL AS [MEPosition]
		FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON cf.[CustomFieldID] = fv.[CustomFieldID]
		WHERE cf.[IsPublished] = 1
			AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields)
			AND gt.[FieldsTemplateID] = @FieldsTemplateID AND fv.[ArticleID] = @ArticleID
			AND cf.ControlTypeID < 300
		UNION ALL
		SELECT fms.[ArticleID], cf.[CustomFieldID],cf.[ControlTypeID],cf.[Token],cf.[ShowLabel],cf.[LabelValue],cf.[LabelHelp],cf.[IsParent],cf.[IconURL],NULL AS [ACode],NULL AS [DisplayFormat],cf.[Options],NULL AS [RText], NULL AS [Decimal],NULL AS [Int],NULL AS [Bit],NULL AS [DateTime],fme.[FieldElementID],fme.[Text],fme.[Text] AS TextValue,gt.[Position],fme.[Position] AS [MEPosition]
		FROM {databaseOwner}[{objectQualifier}EasyDNNfields] AS cf
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsTemplateItems] AS gt ON cf.[CustomFieldID] = gt.[CustomFieldID]
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElements] AS fme ON cf.[CustomFieldID] = fme.[CustomFieldID]
			LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] AS fms ON cf.[CustomFieldID] = fms.[CustomFieldID] AND fms.[FieldElementID] = fme.[FieldElementID] AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
		WHERE cf.[IsPublished] = 1
			AND (@ShowHiddenFields = 1 OR cf.[IsHidden] = @ShowHiddenFields)
			AND gt.[FieldsTemplateID] = @FieldsTemplateID
			AND ((cf.[ShowAllMultiElements] = 0 AND fms.[ArticleID] = @ArticleID) OR (cf.[ShowAllMultiElements] = 1 AND (fms.[ArticleID] = @ArticleID OR (fms.[ArticleID] IS NULL AND cf.[ControlTypeID] = 23))))
			AND cf.ControlTypeID < 300
	),
	LocalizedSingleValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],[IconURL],[ACode],[DisplayFormat],[Options],[RText],[Decimal],[Int],[Bit],[DateTime],[FieldElementID],[Text],[TextValue],[Position],[MEPosition]) AS(
		SELECT av.[ArticleID], av.[CustomFieldID],av.[ControlTypeID],av.[Token],av.[ShowLabel],av.[LabelValue],av.[LabelHelp],av.[IsParent],av.[IconURL],av.[ACode],av.[DisplayFormat],av.[Options],fvl.[RText],av.[Decimal],av.[Int],av.[Bit],av.[DateTime],av.[FieldElementID],fvl.[Text],av.[TextValue],av.[Position],av.[MEPosition]
		FROM AllValues AS av
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValuesLocalization] AS fvl ON av.CustomFieldID = fvl.CustomFieldID AND fvl.ArticleID = @ArticleID AND fvl.LocaleCode = @LocaleCode
		WHERE (av.ControlTypeID = 1 OR av.ControlTypeID = 2)
	),
	LocalizedMultiValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],[IconURL],[ACode],[DisplayFormat],[Options],[RText],[Decimal],[Int],[Bit],[DateTime],[FieldElementID],[Text],[TextValue],[Position],[MEPosition]) AS(
		SELECT av.[ArticleID], av.[CustomFieldID],av.[ControlTypeID],av.[Token],av.[ShowLabel],av.[LabelValue],av.[LabelHelp],av.[IsParent],
			av.[IconURL],av.[ACode],av.[DisplayFormat],av.[Options],av.[RText],av.[Decimal],av.[Int],av.[Bit],av.[DateTime],av.[FieldElementID],fmel.[Text],av.[TextValue],av.[Position],av.[MEPosition]
		FROM AllValues AS av
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiElementsLocalization] AS fmel ON av.FieldElementID = fmel.FieldElementID AND fmel.LocaleCode = @LocaleCode
	),
	CombinedValues ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],[IconURL],[ACode],[DisplayFormat],[Options],[RText],[Decimal],[Int],[Bit],[DateTime],[FieldElementID],[Text],[TextValue],[Position],[MEPosition]) AS(
		SELECT * FROM LocalizedSingleValues
		UNION ALL
		SELECT * FROM LocalizedMultiValues
		UNION ALL
		SELECT * FROM AllValues
		WHERE (CustomFieldID NOT IN (SELECT CustomFieldID FROM LocalizedSingleValues))
			AND (FieldElementID NOT IN (SELECT FieldElementID FROM LocalizedMultiValues) OR FieldElementID IS NULL)
	),
	LocalizedLabelsAndFinalize ([ArticleID],[CustomFieldID],[ControlTypeID],[Token],[ShowLabel],[LabelValue],[LabelHelp],[IsParent],[IconURL],[ACode],[DisplayFormat],[Options],[RText],[Decimal],[Int],[Bit],[DateTime],[FieldElementID],[Text],[TextValue],[Position],[MEPosition]) AS(
		SELECT cv.[ArticleID],cv.[CustomFieldID],cv.[ControlTypeID],cv.[Token],cv.[ShowLabel],fl.[LabelValue],fl.[LabelHelp],cv.[IsParent],
			cv.[IconURL],cv.[ACode],cv.[DisplayFormat],cv.[Options],cv.[RText],cv.[Decimal],cv.[Int],cv.[Bit],cv.[DateTime],cv.[FieldElementID],cv.[Text],cv.[TextValue],cv.[Position],cv.[MEPosition]
		FROM CombinedValues AS cv
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsLocalization] AS fl ON cv.CustomFieldID = fl.CustomFieldID AND fl.LocaleCode = @LocaleCode
	)
	SELECT * FROM LocalizedLabelsAndFinalize
	UNION ALL
	SELECT * FROM CombinedValues
	WHERE CustomFieldID NOT IN (SELECT CustomFieldID FROM LocalizedLabelsAndFinalize)
	ORDER BY [Position], [MEPosition];
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetContentByPermissions]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetContentByPermissions] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetContentByPermissions]
	@PortalID INT,
	@ModuleID INT,
	@UserID INT,
	@ArticleID INT,
	@Perm_ViewAllCategores BIT = 0,
	@Perm_EditAllCategores BIT = 0,
	@AdminOrSuperUser BIT = 0,
	@EditOnlyAsOwner BIT = 0,
	@UserCanApprove BIT = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@PermissionSettingsSource BIT = 1,
	@IsPortalSharing BIT = 0,
	@QueryPermissionsPerArticles BIT = 1,
	@QueryModulePermissions BIT = 1
AS
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @ArticleAuthorId INT;

DECLARE @HasPermissionsPerArticle BIT;
IF @IsPortalSharing = 0
	SELECT @HasPermissionsPerArticle = HasPermissions, @ArticleAuthorId = UserID
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews]
	WHERE ArticleID = @ArticleID AND PortalID = @PortalID;
ELSE
	SELECT @HasPermissionsPerArticle = HasPermissions, @ArticleAuthorId = UserID
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews]
	WHERE ArticleID = @ArticleID
		AND PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID);

IF @HasPermissionsPerArticle IS NOT NULL
BEGIN
	DECLARE @CanView BIT = 0;
	DECLARE @CanEdit BIT = 0;
	CREATE TABLE #UserInRoles (RoleID INT PRIMARY KEY);

	IF @UserID <> -1
	BEGIN
		IF @IsPortalSharing = 0
			INSERT INTO #UserInRoles
			SELECT DISTINCT r.[RoleID]
			FROM {databaseOwner}[{objectQualifier}Roles] AS r
			INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
			WHERE r.PortalID = @PortalID
				AND ur.UserID = @UserID
				AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
				AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate);
		ELSE
			INSERT INTO #UserInRoles
			SELECT DISTINCT r.[RoleID]
			FROM {databaseOwner}[{objectQualifier}Roles] AS r
			INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
			WHERE r.PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID)
				AND ur.UserID = @UserID
				AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
				AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate);
	END

	CREATE TABLE #ViewCategories (CategoryID INT PRIMARY KEY);
	--fill #ViewCategories - it is used in main select
	IF @AdminOrSuperUser = 1 OR @Perm_ViewAllCategores = 1 OR @QueryModulePermissions = 0
	BEGIN
		IF @IsPortalSharing = 0
			INSERT INTO #ViewCategories
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
			WHERE PortalID = @PortalID;
		ELSE
			INSERT INTO #ViewCategories
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
			WHERE PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID);
	END
	ELSE IF @UserID = -1
	BEGIN
		IF @PermissionSettingsSource = 1
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings]
				WHERE PortalID = @PortalID
					AND ModuleID IS NULL
					AND RoleID IS NULL
				);
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.[PremissionSettingsID] IN (
				SELECT [PremissionSettingsID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings]
				WHERE [PortalID] = @PortalID
					AND [ModuleID] = @ModuleID
					AND [RoleID] IS NULL
				);
	END
	ELSE
	BEGIN
		IF @PermissionSettingsSource = 1
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.[PremissionSettingsID] IN (
				SELECT [PremissionSettingsID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings]
				WHERE [PortalID] = @PortalID
					AND [ModuleID] IS NULL
					AND RoleID IN (SELECT [RoleID] FROM #UserInRoles)
				)
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			WHERE upsc.[PremissionSettingsID] IN (
				SELECT [PremissionSettingsID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings]
				WHERE [PortalID] = @PortalID
					AND [UserID] = @UserID
					AND [ModuleID] IS NULL
				);
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.[PremissionSettingsID] IN (
				SELECT [PremissionSettingsID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings]
				WHERE [ModuleID] = @ModuleID
					AND RoleID IN (SELECT [RoleID] FROM #UserInRoles))
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			WHERE upsc.[PremissionSettingsID] IN (
				SELECT [PremissionSettingsID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings]
				WHERE [PortalID] = @PortalID
					AND [UserID] = @UserID
					AND [ModuleID] = @ModuleID
				)
	END

	IF @AdminOrSuperUser = 1
		SET @CanEdit = 1;
	ELSE
	BEGIN
		IF @HasPermissionsPerArticle = 1
		BEGIN
			IF @QueryPermissionsPerArticles = 0
			BEGIN
				IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
					WHERE n.ArticleID=@ArticleID
						AND (n.UserID = @UserID OR ((n.Approved = 1 OR @UserCanApprove = 1) AND (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate])))
				)
				SET @CanView = 1;
			END
			ELSE
			BEGIN
				IF @UserID = -1
				BEGIN
					IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n 
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON n.ArticleID = aup.ArticleID
						WHERE aup.ArticleID = @ArticleID
							AND aup.UserID IS NULL
							AND (n.Approved = 1 OR @UserCanApprove = 1)
							AND (n.UserID = @UserID OR (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]))
						)
						SET @CanView = 1;
				END
				ELSE
				BEGIN
					IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
						WHERE arp.ArticleID = @ArticleID
							AND arp.Edit = 1
							AND arp.RoleID IN(SELECT [RoleID] FROM #UserInRoles)
					)
					OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
						WHERE aup.ArticleID = @ArticleID
							AND aup.Edit = 1
							AND aup.UserID = @UserID
					)
						SET @CanEdit = 1;
					ELSE
						IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n 
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON n.ArticleID = aup.ArticleID
							WHERE aup.ArticleID = @ArticleID
								AND aup.UserID = @UserID
								AND aup.Show = 1
								AND (n.UserID = @UserID OR ((n.Approved = 1 OR @UserCanApprove = 1) AND (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate])))
							)
						OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n 
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON n.ArticleID = arp.ArticleID
							WHERE arp.ArticleID = @ArticleID
								AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles)
								AND arp.Show = 1
								AND (n.UserID = @UserID OR ((n.Approved = 1 OR @UserCanApprove = 1) AND (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate])))
							)
							SET @CanView = 1;
				END
			END
		END
		ELSE
		BEGIN
			-- resolve EDIT RIGHTS
			IF @Perm_EditAllCategores = 1
			BEGIN
				IF @EditOnlyAsOwner = 0 OR @ArticleAuthorId = @UserID
					SET @CanEdit = 1;
			END 
			ELSE
			BEGIN
				DECLARE @HasEditRights BIT = 0;

				IF @UserID = -1
				BEGIN
					IF @PermissionSettingsSource = 1
					BEGIN
						IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
							WHERE c.ArticleID = @ArticleID AND c.CategoryID IN (
								SELECT rpatc.[CategoryID]
								FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
								WHERE rpatc.[PremissionSettingsID] IN (
									SELECT [PremissionSettingsID]
									FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings]
									WHERE [PortalID] = @PortalID
										AND [ModuleID] IS NULL
										AND [RoleID] IS NULL
								)
							)
						)
						SET @HasEditRights = 1;
					END
					ELSE
					BEGIN
						IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
							WHERE c.ArticleID = @ArticleID AND c.CategoryID IN (
								SELECT rpatc.[CategoryID]
								FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
								WHERE rpatc.[PremissionSettingsID] IN (
									SELECT [PremissionSettingsID]
									FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings]
									WHERE [PortalID] = @PortalID
										AND [ModuleID] = @ModuleID
										AND [RoleID] IS NULL
								)
							)
						)
						SET @HasEditRights = 1;
					END
				END
				ELSE
				BEGIN
					IF @PermissionSettingsSource = 1
					BEGIN
						IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
							WHERE c.ArticleID = @ArticleID AND c.CategoryID IN (
								SELECT rpatc.[CategoryID]
								FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
								WHERE rpatc.[PremissionSettingsID] IN (
									SELECT [PremissionSettingsID]
									FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings]
									WHERE [PortalID] = @PortalID
										AND [ModuleID] IS NULL
										AND RoleID IN (SELECT [RoleID] FROM #UserInRoles))
								UNION
								SELECT upatc.[CategoryID]
								FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
								WHERE upatc.[PremissionSettingsID] IN (
									SELECT [PremissionSettingsID]
									FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings]
									WHERE [PortalID] = @PortalID
										AND [UserID] = @UserID
										AND [ModuleID] IS NULL
								)
							)
						)
						SET @HasEditRights = 1;
					END
					ELSE
					BEGIN
						IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
							WHERE c.ArticleID = @ArticleID AND c.CategoryID IN (
								SELECT rpatc.[CategoryID]
								FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsAddToCategories] AS rpatc
								WHERE rpatc.[PremissionSettingsID] IN (
									SELECT [PremissionSettingsID]
									FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings]
									WHERE [ModuleID] = @ModuleID
										AND RoleID IN (SELECT [RoleID] FROM #UserInRoles)
								)
								UNION
								SELECT upatc.[CategoryID]
								FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsAddToCategories] AS upatc
								WHERE upatc.[PremissionSettingsID] IN (
									SELECT [PremissionSettingsID]
									FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings]
									WHERE [UserID] = @UserID
										AND [PortalID] = @PortalID
										AND [ModuleID] = @ModuleID
								)
							)
						)
						SET @HasEditRights = 1;
					END
				END

				IF @HasEditRights = 1 AND (@EditOnlyAsOwner = 0 OR @ArticleAuthorId = @UserID)
					SET @CanEdit = 1;
			END

			IF @CanEdit <> 1
			BEGIN
				IF @Perm_ViewAllCategores = 1 OR @QueryModulePermissions = 0
				BEGIN
					IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
						WHERE n.ArticleID=@ArticleID
							AND (n.UserID = @UserID OR ((n.Approved = 1 OR @UserCanApprove = 1) AND (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate])))
					)
					SET @CanView = 1;
				END
				ELSE
				BEGIN
					IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
						INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c ON n.ArticleID = c.ArticleID
						INNER JOIN #ViewCategories AS uvc ON uvc.CategoryID = c.CategoryID
						WHERE n.ArticleID=@ArticleID
							AND (n.UserID = @UserID OR ((n.Approved = 1 OR @UserCanApprove = 1) AND (n.Active = 1 AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate])))
						)
						SET @CanView = 1;
				END
			END
		END
	END

	IF @CanEdit = 1 OR @CanView = 1
	BEGIN
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID = @ArticleID AND LocaleCode = @LocaleCode)
		BEGIN
			SELECT n.[ArticleID],n.[PortalID],n.[UserID],ncl.[Title],ncl.[SubTitle],ncl.[Summary],ncl.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
				,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active],ncl.[clTitleLink] AS TitleLink,n.[DetailType]
				,ncl.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType],n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme]
				,n.[ArticleImageFolder],n.[NumberOfComments],n.[ArticleImageSet],ncl.[MetaDecription],ncl.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget],n.[ArticleFromRSS]
				,n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],ncl.[MainImageTitle]
				,ncl.[MainImageDescription],n.[CFGroupeID],n.[DetailsDocumentsTemplate],n.[DetailsLinksTemplate],n.[DetailsRelatedArticlesTemplate],n.[ContactEmail],ncl.[TitleTag]
				,n.[OpenGraphMetaTags],n.[TwitterCardMetaTags],@CanEdit AS CanEdit
				,(
					SELECT c.[CategoryID] AS "@id", c.[PortalID] AS "@portalid"
						,CASE WHEN cl.CategoryID IS NULL THEN c.[CategoryName] ELSE cl.[Title] END AS "@name", cl.[CategoryURL] AS "@url", c.[Color] AS "@color", cl.[CategoryText] AS "@description", c.[CategoryImage] AS "@image"
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.[CategoryID] = ci.[CategoryID]
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.[CategoryID] = cl.[CategoryID] AND cl.[LocaleCode] = @LocaleCode
					WHERE ci.ArticleID = n.ArticleID
					ORDER BY c.Position
					FOR XML PATH('category'), ROOT('categories')
				) AS CatToShow
				,CASE WHEN n.Active = 1 THEN 0 ELSE 1 END AS Published
				,CASE @UserCanApprove
					WHEN 0 THEN 0
					WHEN 1 THEN
						CASE n.Approved
						 WHEN 1 THEN 0
						 WHEN 0 THEN
							 CASE n.Active
								WHEN 1 THEN 1
								WHEN 0 THEN 0
							END
						END
				END AS Approve
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID AND ncl.LocaleCode = @LocaleCode
			WHERE n.ArticleID = @ArticleID;
		END
		ELSE
		BEGIN
			SELECT n.[ArticleID],n.[PortalID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
				,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active],n.[TitleLink],n.[DetailType]
				,n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType],n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme]
				,n.[ArticleImageFolder],n.[NumberOfComments],n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget],n.[ArticleFromRSS]
				,n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle]
				,n.[MainImageDescription],n.[CFGroupeID],n.[DetailsDocumentsTemplate],n.[DetailsLinksTemplate],n.[DetailsRelatedArticlesTemplate],n.[ContactEmail],n.[TitleTag]
				,n.[OpenGraphMetaTags],n.[TwitterCardMetaTags],@CanEdit AS CanEdit
				,(
					SELECT c.[CategoryID] AS "@id", c.[PortalID] AS "@portalid", c.[CategoryName] AS "@name", c.[CategoryURL] AS "@url", c.[Color] AS "@color", c.[CategoryText] AS "@description", c.[CategoryImage] AS "@image"
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.CategoryID = ci.CategoryID
					WHERE ci.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategories)
					ORDER BY c.Position
					FOR XML PATH('category'), ROOT('categories')
				) AS CatToShow
				,CASE WHEN n.Active = 1 THEN 0 ELSE 1 END AS Published
				,CASE @UserCanApprove
					WHEN 0 THEN 0
					WHEN 1 THEN
						CASE n.Approved
						 WHEN 1 THEN 0
						 WHEN 0 THEN
							 CASE n.Active
								WHEN 1 THEN 1
								WHEN 0 THEN 0
							END
						END
				END AS Approve
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
			WHERE n.ArticleID = @ArticleID;
		END
	END
END

IF OBJECT_ID('tempdb..#UserInRoles') IS NOT NULL
	DROP TABLE #UserInRoles;
IF OBJECT_ID('tempdb..#ViewCategories') IS NOT NULL
	DROP TABLE #ViewCategories;
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetContentNoPermissions]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetContentNoPermissions] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetContentNoPermissions]
	@PortalID INT,
	@ModuleID INT,
	@ArticleID INT,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsPortalSharing BIT = 0
AS
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @ArticleExists BIT;
SET @ArticleExists = 0;

IF (@IsPortalSharing = 1
		AND EXISTS (
			SELECT 1
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
			WHERE n.PortalID IN (
				SELECT SharingPortalID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals]
				WHERE ModuleID = @ModuleID
				)
				AND n.ArticleID = @ArticleID
				AND n.Approved = 1
				AND n.Active = 1
				AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]
		)
	) OR (
	@IsPortalSharing = 0
		AND EXISTS (
			SELECT 1
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
			WHERE n.PortalID = @PortalID
				AND n.ArticleID = @ArticleID
				AND n.Approved = 1
				AND n.Active = 1
				AND @CurrentDate BETWEEN n.[PublishDate] AND n.[ExpireDate]
		)
	)
BEGIN
	IF @LocaleCode IS NOT NULL AND EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] WHERE ArticleID = @ArticleID AND LocaleCode = @LocaleCode)
	BEGIN
		SELECT n.[ArticleID],n.[PortalID],n.[UserID],ncl.[Title],ncl.[SubTitle],ncl.[Summary],ncl.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
			,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active],ncl.[clTitleLink] AS TitleLink,n.[DetailType]
			,ncl.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType],n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme]
			,n.[ArticleImageFolder],n.[NumberOfComments],n.[ArticleImageSet],ncl.[MetaDecription],ncl.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget],n.[ArticleFromRSS]
			,n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],ncl.[MainImageTitle]
			,ncl.[MainImageDescription],n.[CFGroupeID],n.[DetailsDocumentsTemplate],n.[DetailsLinksTemplate],n.[DetailsRelatedArticlesTemplate],n.[ContactEmail],ncl.[TitleTag]
			,n.[OpenGraphMetaTags],n.[TwitterCardMetaTags]
			,0 AS CanEdit
			,0 AS Published
			,0 AS Approve
			,(
				SELECT c.[CategoryID] AS "@id", c.[PortalID] AS "@portalid"
					,CASE WHEN cl.CategoryID IS NULL THEN c.[CategoryName] ELSE cl.[Title] END AS "@name", cl.[CategoryURL] AS "@url", c.[Color] AS "@color", cl.[CategoryText] AS "@description", c.[CategoryImage] AS "@image"
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.[CategoryID] = ci.[CategoryID]
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.[CategoryID] = cl.[CategoryID] AND cl.[LocaleCode] = @LocaleCode
				WHERE ci.ArticleID = n.ArticleID
				ORDER BY c.Position
				FOR XML PATH('category'), ROOT('categories')
			) AS CatToShow
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = n.ArticleID AND ncl.LocaleCode = @LocaleCode
		WHERE n.ArticleID = @ArticleID;
	END
	ELSE
	BEGIN
		SELECT n.[ArticleID],n.[PortalID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
			,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active],n.[TitleLink],n.[DetailType]
			,n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType],n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme]
			,n.[ArticleImageFolder],n.[NumberOfComments],n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget],n.[ArticleFromRSS]
			,n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle]
			,n.[MainImageDescription],n.[CFGroupeID],n.[DetailsDocumentsTemplate],n.[DetailsLinksTemplate],n.[DetailsRelatedArticlesTemplate],n.[ContactEmail],n.[TitleTag]
			,n.[OpenGraphMetaTags],n.[TwitterCardMetaTags]
			,0 AS CanEdit
			,0 AS Published
			,0 AS Approve
			,(
				SELECT c.[CategoryID] AS "@id", c.[PortalID] AS "@portalid", c.[CategoryName] AS "@name", c.[CategoryURL] AS "@url", c.[Color] AS "@color", c.[CategoryText] AS "@description", c.[CategoryImage] AS "@image"
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.CategoryID = ci.CategoryID
				WHERE ci.ArticleID = n.ArticleID
				ORDER BY c.Position
				FOR XML PATH('category'), ROOT('categories')
			) AS CatToShow
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		WHERE n.ArticleID = @ArticleID;
	END
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsUserEventsRegistrationList]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsUserEventsRegistrationList] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsUserEventsRegistrationList]
	@PortalID INT,
	@ModuleID INT,
	@UserID INT,
	@OrderByColumnName NVARCHAR(30),
	@OrderByDirection NVARCHAR(4),
	@OrderByCustomFieldID INT = NULL,
	@ItemsFrom INT = 1,
	@ItemsTo INT = 5,
	@DateRangeType TINYINT = 0,
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@OnlyOneCategory INT = NULL,
	@Featured BIT = 0,
	@ShowAllAuthors BIT = 1,
	@FilterByAuthor INT = 0,
	@FilterByGroupID INT = 0,
	@FilterByTags BIT = 0,
	@FilterByArticles BIT = 0,
	@FilterByDNNUserID INT = 0,
	@FilterByDNNGroupID INT = 0,
	@EditOnlyAsOwner BIT = 0,
	@UserCanApprove BIT = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FirstOrderBy NVARCHAR(20) = NULL,
	@Perm_ViewAllCategores BIT = 0,
	@Perm_EditAllCategores BIT = 0,
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 1,
	@PermissionSettingsSource BIT = 0,
	@FillterSettingsSource BIT = 0,
	@StartDate DATETIME = NULL,
	@OuterModuleID INT = NULL,
	@HideUnlocalizedItems BIT = 0,
	@NewsFilterCategories NVARCHAR(1000) = NULL,
	@NewsFilterAuthors NVARCHAR(1000) = NULL,
	@NewsFilterGroups NVARCHAR(1000) = NULL,
	@ListArchive BIT = 0,
	@FilterByTagID INT = NULL,
	@RestrictionByDateRange SMALLINT = NULL,
	@AdminFuturePostsVisible BIT = 0,
	@UseAndOperator BIT = NULL,
	@GoogleMapsFilter TINYINT = NULL,
	@FilterByCustomFields BIT = 0,
	@IsPortalSharing BIT = 0,
	@CanEditAllContent BIT = 0,
	@QueryPermissionsPerArticles BIT = 1,
	@QueryModulePermissions BIT = 1,
	@OnlyEventsWithRegistration BIT = 0,
	@UserMustBeRegistered BIT = 1 -- ne radi dobro ako se postavi na 0
--WITH RECOMPILE
AS
SET NOCOUNT ON;
DECLARE @paramList NVARCHAR(2000);
SET @paramList = N'
	 @PortalID INT
	,@ModuleID INT
	,@UserID INT
	,@OrderByCustomFieldID INT
	,@ItemsFrom INT
	,@ItemsTo INT
	,@DateRangeType TINYINT
	,@FromDate DATETIME
	,@ToDate DATETIME
	,@OnlyOneCategory INT
	,@Featured BIT
	,@ShowAllAuthors BIT
	,@FilterByAuthor INT
	,@FilterByGroupID INT
	,@FilterByArticles BIT
	,@FilterByDNNUserID INT
	,@FilterByDNNGroupID INT
	,@EditOnlyAsOwner BIT
	,@UserCanApprove BIT
	,@LocaleCode NVARCHAR(20)
	,@IsSocialInstance BIT
	,@FirstOrderBy NVARCHAR(20)
	,@Perm_ViewAllCategores BIT
	,@Perm_EditAllCategores BIT
	,@AdminOrSuperUser BIT
	,@CategoryFilterType TINYINT
	,@PermissionSettingsSource BIT
	,@FillterSettingsSource BIT
	,@StartDate DATETIME
	,@OuterModuleID INT
	,@HideUnlocalizedItems BIT
	,@NewsFilterCategories NVARCHAR(1000)
	,@NewsFilterAuthors NVARCHAR(1000)
	,@NewsFilterGroups NVARCHAR(1000)
	,@ListArchive BIT
	,@FilterByTagID INT
	,@RestrictionByDateRange SMALLINT
	,@IsPortalSharing BIT
	,@CanEditAllContent BIT
	,@QueryPermissionsPerArticles BIT
	,@QueryModulePermissions BIT';

DECLARE @sqlCommand NVARCHAR(MAX);
DECLARE @MainContentFilter NVARCHAR(MAX);
DECLARE @TopInnerFilter NVARCHAR(MAX);
DECLARE @sqlSharingPortal NVARCHAR(300);
DECLARE @sqlSharingPortalAll NVARCHAR(300);

SET @sqlCommand = N'
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @EventUserId INT;

SELECT @EventUserId = [Id]
FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventUsers]
WHERE DNNUserID = @UserId

IF @EventUserId IS NULL
	SET @EventUserId = -1

CREATE TABLE #UserInRoles (RoleID INT PRIMARY KEY);
CREATE TABLE #ViewCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #FilterCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #ViewCategoriesWithFilter (CategoryID INT PRIMARY KEY); '

IF @IsPortalSharing = 1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	CREATE TABLE #SharingPortals (PortalID INT NOT NULL PRIMARY KEY);
	INSERT INTO #SharingPortals
	SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID;';

	SET @sqlSharingPortal = N' EXISTS (SELECT PortalID FROM #SharingPortals AS sp WHERE sp.PortalID = na.PortalID) ';
	SET @sqlSharingPortalAll = N'PortalID IN (SELECT PortalID FROM #SharingPortals) ';
END
ELSE
BEGIN
	SET @sqlSharingPortal = N' na.PortalID = @PortalID ';
	SET @sqlSharingPortalAll = N'PortalID = @PortalID ';
END

IF @UserID <> -1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #UserInRoles '

	IF @IsPortalSharing = 0
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		WHERE r.PortalID = @PortalID AND ur.UserID = @UserID
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] AS mp ON mp.SharingPortalID = r.PortalID
		WHERE mp.ModuleID = @ModuleID
			AND ur.UserID = @UserID
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategories '

IF @AdminOrSuperUser = 1 OR @Perm_ViewAllCategores = 1 OR @QueryModulePermissions = 0
BEGIN
	IF @IsPortalSharing = 1
		SET @sqlCommand = @sqlCommand + N'
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID); '
	ELSE
	SET @sqlCommand = @sqlCommand + N'
		SELECT c.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		WHERE c.PortalID = @PortalID; '
END
ELSE IF @UserID = -1
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal - ako je portal sharing to bi trebalo biti false
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		WHERE rpsc.PremissionSettingsID IN (
			SELECT PremissionSettingsID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			WHERE rps.PortalID = @PortalID
				AND rps.ModuleID IS NULL
				AND rps.RoleID IS NULL); '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		WHERE rpsc.PremissionSettingsID IN (
			SELECT PremissionSettingsID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			WHERE rps.PortalID = @PortalID
				AND rps.ModuleID = @ModuleID
				AND rps.RoleID IS NULL); '
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
		UNION
		SELECT upsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL; '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID 
		WHERE rps.ModuleID = @ModuleID
		UNION
		SELECT upsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.ModuleID = @ModuleID; '
	END
END

IF @NewsFilterCategories IS NOT NULL
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT fc.KeyID
	FROM {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterCategories) AS fc; '
ELSE IF @OnlyOneCategory IS NOT NULL -- filtrira se po jednoj kategoriji
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT @OnlyOneCategory; '
ELSE IF @CategoryFilterType = 0 -- 0 All categories
	IF @IsPortalSharing = 1
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID = @PortalID; '
ELSE IF @OuterModuleID IS NOT NULL
BEGIN
	IF @CategoryFilterType = 1 -- 1 - SELECTion
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
		WHERE ModuleID = @OuterModuleID; '
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		IF @IsPortalSharing = 1
			SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
					WHERE ci.ModuleID = @OuterModuleID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID)
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
		ELSE
		SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
					WHERE ci.ModuleID = @OuterModuleID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID = @PortalID
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
	END
END
ELSE
BEGIN
	IF @CategoryFilterType = 1 -- 1 - SELECTion
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
			SET @sqlCommand = @sqlCommand + N'
			INSERT INTO #FilterCategories
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems]
			WHERE PortalID = @PortalID; '
		ELSE -- module
			SET @sqlCommand = @sqlCommand + N'
			INSERT INTO #FilterCategories
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
			WHERE ModuleID = @ModuleID; '
	END
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
		BEGIN
			SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS ci
					WHERE ci.PortalID = @PortalID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID = @PortalID
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
		END
		ELSE -- module
		BEGIN
			IF @IsPortalSharing = 1
				SET @sqlCommand = @sqlCommand + N'
				;WITH hierarchy AS(
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE EXISTS (
						SELECT [CategoryID]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
						WHERE ci.ModuleID = @ModuleID
							AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
					)
					AND cl.PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID)
					UNION ALL
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
				)
				INSERT INTO #FilterCategories
				SELECT DISTINCT CategoryID
				FROM hierarchy; '
			ELSE
				SET @sqlCommand = @sqlCommand + N'
				;WITH hierarchy AS(
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE EXISTS (
						SELECT [CategoryID]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
						WHERE ci.ModuleID = @ModuleID
							AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
					)
					AND cl.PortalID = @PortalID
					UNION ALL
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
				)
				INSERT INTO #FilterCategories
				SELECT DISTINCT CategoryID
				FROM hierarchy; '
		END
	END
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategoriesWithFilter
SELECT vc.CategoryID
FROM #ViewCategories AS vc
INTERSECT
SELECT fc.CategoryID
FROM #FilterCategories AS fc; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #LocalizedCategories (Id INT PRIMARY KEY, Name NVARCHAR(200), CategoryText NVARCHAR(MAX), CategoryURL NVARCHAR(1500)); '

IF @CanEditAllContent = 0 AND @QueryModulePermissions = 1
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #UserEditCategories (CategoryID INT PRIMARY KEY);
	INSERT INTO #UserEditCategories
	SELECT CategoryID
	FROM {databaseOwner}[{objectQualifier}EDS_EditPermissions] (@PortalID,@ModuleID,@UserID,@AdminOrSuperUser,@Perm_EditAllCategores,@PermissionSettingsSource,@CurrentDate)

	DECLARE @HasEditCategories BIT;

	IF EXISTS (SELECT 1 FROM #UserEditCategories)
		SET @HasEditCategories = 1;
	ELSE
		SET @HasEditCategories = 0; '

IF @NewsFilterCategories IS NULL
BEGIN
	IF @OuterModuleID IS NULL AND @FilterByArticles = 1
	SET @sqlcommand = @sqlcommand + N' 
		DECLARE @FilterArticlesTable TABLE (ArticleID INT PRIMARY KEY);
		IF @FillterSettingsSource = 1
			INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByArticles] WHERE FilterPortalID = @PortalID;
		ELSE
			INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByArticles] WHERE FilterModuleID = @ModuleID; '

	IF @FilterByTagID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		DECLARE @FilterTagsTable TABLE (TagID INT PRIMARY KEY);
		INSERT INTO @FilterTagsTable SELECT @FilterByTagID '
		SET @FilterByTags = 1
	END
	ELSE IF @OuterModuleID IS NULL AND @FilterByTags = 1
		SET @sqlcommand = @sqlcommand + N' 
		DECLARE @FilterTagsTable TABLE (TagID INT PRIMARY KEY);
		IF @FillterSettingsSource = 1
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByTagID] WHERE FilterPortalID = @PortalID;
		ELSE
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] WHERE FilterModuleID = @ModuleID; '
END

DECLARE @sqlAuthors NVARCHAR(2000);

IF @NewsFilterAuthors IS NULL AND @NewsFilterGroups IS NULL
BEGIN
	IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0 AND @FilterByAuthor <> 0
			SET @sqlAuthors = N' 
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
				WHERE ap.[AuthorProfileID] = @FilterByAuthor; '
	END
	ELSE
	BEGIN
		IF @OuterModuleID IS NOT NULL AND @ShowAllAuthors = 0
			SET @sqlAuthors = N'
			SELECT mai.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai
			WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT ap.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID; '
		ELSE
		BEGIN
			IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0
			BEGIN
				IF @FillterSettingsSource = 1
					SET @sqlAuthors = N'
					SELECT pai.[UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai
					WHERE pai.PortalID = @PortalID
					UNION 
					SELECT [UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID; '
				ELSE
					SET @sqlAuthors = N'
					SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleID
					UNION 
					SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID; '
			END
			ELSE IF @FilterByAuthor <> 0
				SET @sqlAuthors = N'
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
				WHERE ap.[AuthorProfileID] = @FilterByAuthor; '
			ELSE IF @FilterByGroupID <> 0
				SET @sqlAuthors = N'
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID; '
		END
	END
END
ELSE
BEGIN
	IF @NewsFilterAuthors IS NOT NULL AND @NewsFilterGroups IS NOT NULL
		SET @sqlAuthors = N'
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID
		WHERE ap.' + @sqlSharingPortalAll + '
		UNION
		SELECT ap.[UserID] 
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID
		WHERE ap.' + @sqlSharingPortalAll + ' '
	ELSE IF @NewsFilterAuthors IS NOT NULL
		SET @sqlAuthors = N' 
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID
		WHERE ap.' + @sqlSharingPortalAll + ' '
	ELSE IF @NewsFilterGroups IS NOT NULL
		SET @sqlAuthors = N' 
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID
		WHERE ap.' + @sqlSharingPortalAll + ' '
END

IF @sqlAuthors IS NOT NULL
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CREATE TABLE #FilterAuthors (UserID INT NOT NULL PRIMARY KEY);
	INSERT INTO #FilterAuthors ' + @sqlAuthors
END

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	INSERT INTO #LocalizedCategories
	SELECT c.CategoryID AS Id,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryName ELSE cl.Title END AS Name,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryText ELSE cl.CategoryText END AS CategoryText,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryURL ELSE cl.CategoryURL END AS CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.CategoryID = cl.CategoryID AND cl.LocaleCode = @LocaleCode
	WHERE c.CategoryID IN (SELECT CategoryID FROM #ViewCategories) '
	
SET @sqlcommand = @sqlcommand + N' DECLARE @AllContentCount INT'

SET @TopInnerFilter = N' WHERE ' + @sqlSharingPortal;

	IF @GoogleMapsFilter = 2
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS gmc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS gmd ON gmd.GoogleMapID = gmc.GoogleMapID AND gmd.PointData <> N''''
			WHERE gmc.ArticleID = na.ArticleID
		) '
	ELSE IF @GoogleMapsFilter = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS gmc
			WHERE gmc.ArticleID = na.ArticleID
		) '

	IF @HideUnlocalizedItems = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl
			WHERE ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode
		) '

	IF @FilterByDNNGroupID <> 0 
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT nss.ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = nss.ArticleID
			WHERE nss.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		) '
	ELSE IF @FilterByDNNUserID <> 0
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT nss.ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE nss.ArticleID = na.ArticleID
		) '

	IF @FilterByTags = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti
			INNER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE ti.ArticleID = na.ArticleID
		) '
	
	IF @FilterByArticles = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM @FilterArticlesTable AS fba
			WHERE fba.ArticleID = na.ArticleID
		) '

	IF @AdminFuturePostsVisible = 1 AND @QueryModulePermissions = 1
	BEGIN
		IF @RestrictionByDateRange IS NOT NULL 
			SET @TopInnerFilter = @TopInnerFilter + N' AND na.PublishDate >= DATEADD(day,-@RestrictionByDateRange,@CurrentDate) AND na.[ExpireDate] >= @CurrentDate '
		ELSE
			SET @TopInnerFilter = @TopInnerFilter + N' AND @CurrentDate <= na.[ExpireDate] '
	END
	ELSE IF @RestrictionByDateRange IS NOT NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.PublishDate BETWEEN DATEADD(day,-@RestrictionByDateRange,@CurrentDate) AND @CurrentDate AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '
	ELSE
		SET @TopInnerFilter = @TopInnerFilter + N' AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '
		
	IF @LocaleCode IS NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.HideDefaultLocale = 0 '
	IF @Featured = 1
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.Featured = 1 '

	IF @FilterByDNNUserID <> 0
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.UserID = @FilterByDNNUserID '
	ELSE IF @sqlAuthors IS NOT NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.UserID IN (SELECT UserID FROM #FilterAuthors) '
	
	IF @QueryModulePermissions = 0
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.Approved = 1 AND na.Active = 1 '
	ELSE IF @CanEditAllContent = 0
	BEGIN
		IF @UserCanApprove = 0
			SET @TopInnerFilter = @TopInnerFilter + N' AND (na.UserID = @UserID OR (na.Active = 1 AND na.Approved = 1)) '
		ELSE
			SET @TopInnerFilter = @TopInnerFilter + N' AND (na.UserID = @UserID OR na.Active = 1) '
	END

DECLARE @CleanOrderColumnWithDirection NVARCHAR(35);

IF @OrderByCustomFieldID IS NOT NULL
BEGIN
	DECLARE @ControlTypeID INT;
	SELECT @ControlTypeID = [ControlTypeID] FROM {databaseOwner}[{objectQualifier}EasyDNNfields] WHERE CustomFieldID = @OrderByCustomFieldID AND IsOrderable = 1;
	IF @ControlTypeID IS NOT NULL
	BEGIN
		SELECT @OrderByColumnName =
			CASE @ControlTypeID
				WHEN 1 THEN N'[Text]'
				WHEN 3 THEN N'[Int]'
				WHEN 4 THEN N'[Decimal]'
				WHEN 5 THEN N'[Decimal]'
				WHEN 6 THEN N'[Text]'
				WHEN 9 THEN N'[DateTime]'
				WHEN 10 THEN N'[Text]'
				ELSE NULL
			END
		IF @OrderByColumnName IS NULL
		BEGIN
			SET @OrderByCustomFieldID = NULL;
			SET @OrderByColumnName = N'[PublishDate]';
		END
	END
	ELSE
	BEGIN
		SET @OrderByCustomFieldID = NULL;
		SET @OrderByColumnName = N'[PublishDate]';
	END
END
IF @OrderByColumnName = N'NEWID()'
	SET @CleanOrderColumnWithDirection = @OrderByColumnName
ELSE
	SET @CleanOrderColumnWithDirection = @OrderByColumnName + N' ' + @OrderByDirection;

IF @FilterByCustomFields = 1
BEGIN
	DECLARE @CFFilterQuery NVARCHAR(MAX);
	DECLARE @FiltersCountSimple INT;
	DECLARE @FiltersCountMulti INT;

	DECLARE @CFFilterTableSimple TABLE(
		RowID INT PRIMARY KEY IDENTITY(1,1),
		CFWhereRoule NVARCHAR(630)
	)
	DECLARE @CFFilterTableMulti TABLE(
		RowID INT PRIMARY KEY IDENTITY(1,1),
		ElementsCount INT NOT NULL ,
		LogicalOperator NVARCHAR(10) NOT NULL,
		CFWhereRoule NVARCHAR(MAX) NOT NULL
	)

	IF @FillterSettingsSource = 1
	BEGIN
		INSERT INTO @CFFilterTableSimple
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] WHERE PortalID = @PortalID;
		SET @FiltersCountSimple = @@ROWCOUNT;
		
		INSERT INTO @CFFilterTableMulti
		SELECT ElementsCount,LogicalOperator, CFQueryRoule FROM (
			SELECT mv.Id,mv.LogicalOperator,(SELECT COUNT(FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id]) AS ElementsCount, 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND cf.FieldElementID IN (' + STUFF((SELECT ',' + STR(fme.FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id] FOR XML PATH('')), 1, 1, '') + ')' AS CFQueryRoule
			FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] AS mv
			WHERE mv.[PortalID] = @PortalID
		) AS AllCfData WHERE EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.MultiCFId = AllCfData.Id)
		SET @FiltersCountMulti = @@ROWCOUNT;
	END
	ELSE
	BEGIN
		INSERT INTO @CFFilterTableSimple
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] WHERE ModuleID = @ModuleID;
		SET @FiltersCountSimple = @@ROWCOUNT;
		
		INSERT INTO @CFFilterTableMulti
		SELECT ElementsCount,LogicalOperator, CFQueryRoule FROM (
			SELECT mv.Id,mv.LogicalOperator,(SELECT COUNT(FieldElementID)
				FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme
				WHERE fme.[MultiCFId] = mv.[Id]) AS ElementsCount, 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND cf.FieldElementID IN (' + STUFF((SELECT ',' + STR(fme.FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id] FOR XML PATH('')), 1, 1, '') + ')' AS CFQueryRoule
			FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] AS mv
			WHERE mv.[ModuleID] = @ModuleID
		) AS AllCfData WHERE EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.MultiCFId = AllCfData.Id)
		SET @FiltersCountMulti = @@ROWCOUNT;
	END
	
	IF @FiltersCountMulti > 0 OR @FiltersCountSimple > 0
	BEGIN
		DECLARE @CurrentRow INT;
		DECLARE @ElementsCount INT;
		DECLARE @LogicalOperator NVARCHAR(10);

		SET @CFFilterQuery = N'SELECT CFFilteredArticles.ArticleID FROM (';
	
		IF @FiltersCountMulti > 0
		BEGIN	
			SET @CurrentRow = 0;
			DECLARE @FilterValueMulti NVARCHAR(MAX);
			WHILE @CurrentRow < @FiltersCountMulti
			BEGIN
				SET @CurrentRow = @CurrentRow + 1;
				SELECT @ElementsCount = ElementsCount, @LogicalOperator = LogicalOperator, @FilterValueMulti = CFWhereRoule FROM @CFFilterTableMulti WHERE RowID = @CurrentRow;

				IF @LogicalOperator = N'AND'
				BEGIN
					SET @CFFilterQuery = @CFFilterQuery +
N'SELECT ArticleID FROM (
	  SELECT ArticleID, ROW_NUMBER() OVER (PARTITION BY cf.[ArticleID] ORDER BY cf.[ArticleID] DESC ) AS Recency
	  FROM {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] AS cf
	  WHERE ' + @FilterValueMulti + '
) AS OnlyWithGoogleMaps
WHERE Recency >= ' + STR(@ElementsCount) + ' '
				END
				ELSE
				BEGIN
					SET @CFFilterQuery = @CFFilterQuery +
N'SELECT n.[ArticleID]
FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] AS cf ON cf.ArticleID = n.ArticleID
WHERE ' + @FilterValueMulti + ' '
				END
				
			IF @CurrentRow < @FiltersCountMulti OR @FiltersCountSimple > 0
				SET @CFFilterQuery = @CFFilterQuery + N' INTERSECT '
			END
		END
	
		IF @FiltersCountSimple > 0
		BEGIN
			SET @CurrentRow = 0;
			DECLARE @FilterValueSimple NVARCHAR(630);
			WHILE @CurrentRow < @FiltersCountSimple
			BEGIN
				SET @CurrentRow = @CurrentRow + 1;
				SELECT @FilterValueSimple = CFWhereRoule FROM @CFFilterTableSimple WHERE RowID = @CurrentRow;

				SET @CFFilterQuery = @CFFilterQuery +
N'SELECT n.[ArticleID]
FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS cf ON cf.ArticleID = n.ArticleID
WHERE ' + @FilterValueSimple + ' '

			IF @CurrentRow < @FiltersCountSimple
				SET @CFFilterQuery = @CFFilterQuery + N' INTERSECT '
			END

		END

		SET @CFFilterQuery = @CFFilterQuery + N') AS CFFilteredArticles'
	END

	IF @CFFilterQuery IS NULL
		SET @FilterByCustomFields = 0;
END

SET @MainContentFilter = N'
;WITH AllContent AS( '

	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		SELECT ArticleID, CommentedDate,RecurringID,StartDate,EventUserItemId,CreatedOnDate FROM (
		SELECT nc.[ArticleID]
			,nc.[DateAdded] AS CommentedDate
			,inner_all.RecurringID
			,inner_all.StartDate
			,ROW_NUMBER() OVER(PARTITION BY nc.[ArticleID], inner_all.RecurringID ORDER BY '
			
			IF @FirstOrderBy = 'Featured DESC' SET @MainContentFilter = @MainContentFilter + N'inner_all.Featured DESC, '
			
			SET @MainContentFilter = @MainContentFilter + N' nc.[DateAdded] ' + @OrderByDirection + ') AS OnlyFirstOccurance
			
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsComments] AS nc
		INNER JOIN (';
	END
	
	SET @MainContentFilter = @MainContentFilter + N'
	SELECT n.ArticleID,n.Featured,
		CASE WHEN ed.Recurring = 1 THEN multiEvents.StartDateTime ELSE ed.StartDate END AS StartDate,
		CASE WHEN ed.Recurring = 1 THEN multiEvents.RecurringID ELSE NULL END AS RecurringID,
		CASE WHEN ed.Recurring = 1 THEN multiEvents.Id ELSE simpleEvents.Id END AS EventUserItemId,
		CASE WHEN ed.Recurring = 1 THEN multiEvents.CreatedOnDate ELSE simpleEvents.CreatedOnDate END AS CreatedOnDate
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ed ON n.ArticleID = ed.ArticleID
	LEFT OUTER JOIN (
		SELECT ned.ArticleID, eui.Id, eui.CreatedOnDate
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ON eui.ArticleID = ned.ArticleID
		WHERE ned.Recurring = 0
			AND eui.EventUserID = @EventUserId
	) AS simpleEvents ON simpleEvents.ArticleID = ed.ArticleID AND ed.Recurring = 0
	LEFT OUTER JOIN (
		SELECT nerd.ArticleID, nerd.StartDateTime, nerd.RecurringID, eui.Id, eui.CreatedOnDate
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd '
		IF @UserMustBeRegistered = 1
			SET @MainContentFilter = @MainContentFilter + N'
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ON eui.RecurringArticleID = nerd.ArticleID AND eui.RecurringID = nerd.RecurringID AND eui.EventUserID = @EventUserId '

	SET @MainContentFilter = @MainContentFilter + N'
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON ned.ArticleID = nerd.ArticleID AND ned.Recurring = 1 AND '

	IF @DateRangeType = 3
		SET @MainContentFilter = @MainContentFilter + N' nerd.EndDateTime < @CurrentDate'
	ELSE IF @DateRangeType = 2
		SET @MainContentFilter = @MainContentFilter + N'
		((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
			 OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
	ELSE IF @DateRangeType = 1
		BEGIN
			IF @ListArchive = 0
				SET @MainContentFilter = @MainContentFilter + N' nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate '
			ELSE
				SET @MainContentFilter = @MainContentFilter + N' nerd.StartDateTime <= @CurrentDate AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate AND nerd.EndDateTime < @CurrentDate '
		END
	ELSE IF @DateRangeType = 0
		SET @MainContentFilter = @MainContentFilter + N' (nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
	ELSE IF @DateRangeType = 4
		SET @MainContentFilter = @MainContentFilter + N' (
		(ned.StartDate >= @CurrentDate AND nerd.RecurringID IN (
			SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) erd.RecurringID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID
			ORDER BY erd.StartDateTime
			)
		) OR
		(ned.StartDate < @CurrentDate AND nerd.RecurringID IN (
			SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) erd.RecurringID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime >= @CurrentDate
			ORDER BY erd.StartDateTime
			)
		)) '
	
	SET @MainContentFilter = @MainContentFilter + N'
	) AS multiEvents ON multiEvents.ArticleID = ed.ArticleID AND ed.Recurring = 1 
	WHERE n.ArticleID IN ( '
	 
	 -- tu bi trebal staviti okolo da se filtrira po and !!!
	 
	IF @UseAndOperator IS NOT NULL AND @NewsFilterCategories IS NOT NULL
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		SELECT DISTINCT [ArticleID] FROM (
			SELECT na.[ArticleID], ROW_NUMBER() OVER (PARTITION BY na.[ArticleID] ORDER BY na.[ArticleID] DESC ) AS Recency
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN #FilterCategories AS fbc ON fbc.CategoryID = cat.CategoryID
			WHERE na.ArticleID IN ( ';
	END
	 
	IF @FilterByCustomFields = 1
		SET @MainContentFilter = @MainContentFilter + N' SELECT ArticleID FROM ('
	 
	SET @MainContentFilter = @MainContentFilter + N'
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na ' -- normal and recurring event normal permissions
			SET @MainContentFilter = @MainContentFilter + @TopInnerFilter + N'
			AND EXISTS (
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
				WHERE c.ArticleID = na.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)
			)
			AND EXISTS (
				SELECT ne.ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
				WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 0 '

				IF @UserMustBeRegistered = 1
					SET @MainContentFilter = @MainContentFilter + N'
						AND ne.ArticleID IN (
							SELECT eui.[ArticleID]
							FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui
							WHERE eui.EventUserID = @EventUserId
						 ) '

				IF @OnlyEventsWithRegistration = 1
					SET @MainContentFilter = @MainContentFilter + N' AND ne.EventType IS NOT NULL '

				IF @DateRangeType = 3
					SET @MainContentFilter = @MainContentFilter + N' AND ne.EndDate < @CurrentDate'
				ELSE IF @DateRangeType = 1
				BEGIN
					IF @ListArchive = 0
						SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate '
					ELSE
						SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate AND ne.EndDate < @CurrentDate '
				END
				ELSE IF @DateRangeType = 2
					SET @MainContentFilter = @MainContentFilter + N' AND (ne.StartDate >= @StartDate OR (ne.StartDate < @StartDate AND ne.EndDate >= @StartDate)) '
				ELSE IF @DateRangeType = 4
					SET @MainContentFilter = @MainContentFilter + N' AND (ne.StartDate >= @CurrentDate OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate)) '

			SET @MainContentFilter = @MainContentFilter + N'
				UNION ALL
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
				WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 1 ' 
					IF @OnlyEventsWithRegistration = 1
						SET @MainContentFilter = @MainContentFilter + N' AND ne.EventType IS NOT NULL '

					SET @MainContentFilter = @MainContentFilter + N'
					AND EXISTS (
						SELECT nerd.ArticleID
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd '

						IF @UserMustBeRegistered = 1
							SET @MainContentFilter = @MainContentFilter + N'
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ON eui.RecurringArticleID = nerd.ArticleID AND eui.RecurringID = nerd.RecurringID AND eui.EventUserID = @EventUserId '

						SET @MainContentFilter = @MainContentFilter + N'
						WHERE nerd.ArticleID = ne.ArticleID '

						IF @DateRangeType = 3
							SET @MainContentFilter = @MainContentFilter + N' AND nerd.EndDateTime < @CurrentDate'
						ELSE IF @DateRangeType = 2
							SET @MainContentFilter = @MainContentFilter + N'
							AND ((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
								OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
						ELSE IF @DateRangeType = 1
							BEGIN
								IF @ListArchive = 0
									SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate '
								ELSE
									SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @CurrentDate AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate AND nerd.EndDateTime < @CurrentDate '
							END
						ELSE IF @DateRangeType = 0
							SET @MainContentFilter = @MainContentFilter + N' AND (nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
						ELSE IF @DateRangeType = 4
							SET @MainContentFilter = @MainContentFilter + N' AND (
							(ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (
								SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID
								FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID
								ORDER BY erd.StartDateTime
								)
							) OR
							(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (
								SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID
								FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate
								ORDER BY erd.StartDateTime
								)
							)) '

					SET @MainContentFilter = @MainContentFilter + N'
					)
			) '

		IF @QueryPermissionsPerArticles = 1
			SET @MainContentFilter = @MainContentFilter + N' AND na.HasPermissions = 0 '

	IF @QueryPermissionsPerArticles = 1
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na ' -- normal and recurring events user/role permissions
			SET @MainContentFilter = @MainContentFilter + @TopInnerFilter + N'
			AND EXISTS (
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
				WHERE c.ArticleID = na.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #FilterCategories)
			)
			AND EXISTS (
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
				WHERE aup.ArticleID = na.ArticleID '
				IF @CanEditAllContent = 0
				BEGIN
					SET @MainContentFilter = @MainContentFilter + N' AND aup.Show = 1 '
					IF @UserID = -1 SET @MainContentFilter = @MainContentFilter + N' AND aup.UserID IS NULL '
					ELSE SET @MainContentFilter = @MainContentFilter + N' AND aup.UserID = @UserID '
				END
				IF @UserID <> -1
				BEGIN
					SET @MainContentFilter = @MainContentFilter + N'
					UNION
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
					WHERE arp.ArticleID = na.ArticleID '
					IF @CanEditAllContent = 0
					BEGIN
						SET @MainContentFilter = @MainContentFilter + N' AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
					END
				END
			
			SET @MainContentFilter = @MainContentFilter + N'
			)
			AND EXISTS (
				SELECT ne.ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
				WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 0 '

				IF @UserMustBeRegistered = 1
					SET @MainContentFilter = @MainContentFilter + N'
						AND ne.ArticleID IN (
							SELECT eui.[ArticleID]
							FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui
							WHERE eui.EventUserID = @EventUserId
						 ) '

				IF @OnlyEventsWithRegistration = 1
					SET @MainContentFilter = @MainContentFilter + N' AND ne.EventType IS NOT NULL '

				IF @DateRangeType = 3
					SET @MainContentFilter = @MainContentFilter + N' AND ne.EndDate < @CurrentDate'
				ELSE IF @DateRangeType = 1
				BEGIN
					IF @ListArchive = 0
						SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate '
					ELSE
						SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate AND ne.EndDate < @CurrentDate '
				END
				ELSE IF @DateRangeType = 2
					SET @MainContentFilter = @MainContentFilter + N' AND (ne.StartDate >= @StartDate OR (ne.StartDate < @StartDate AND ne.EndDate >= @StartDate)) '

			SET @MainContentFilter = @MainContentFilter + N'
				UNION ALL
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
				WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 1 '
				IF @OnlyEventsWithRegistration = 1
					SET @MainContentFilter = @MainContentFilter + N' AND ne.EventType IS NOT NULL '

				SET @MainContentFilter = @MainContentFilter + N'
					AND EXISTS (
						SELECT nerd.ArticleID
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd '

						IF @UserMustBeRegistered = 1
							SET @MainContentFilter = @MainContentFilter + N'
							INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsUserItems] AS eui ON eui.RecurringArticleID = nerd.ArticleID AND eui.RecurringID = nerd.RecurringID AND eui.EventUserID = @EventUserId '

						SET @MainContentFilter = @MainContentFilter + N'
						WHERE nerd.ArticleID = ne.ArticleID '

						IF @DateRangeType = 3
							SET @MainContentFilter = @MainContentFilter + N' AND nerd.EndDateTime < @CurrentDate'
						ELSE IF @DateRangeType = 2
						SET @MainContentFilter = @MainContentFilter + N'
						AND ((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
								OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
						ELSE IF @DateRangeType = 1
							BEGIN
								IF @ListArchive = 0
									SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate '
								ELSE
									SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @CurrentDate AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate AND nerd.EndDateTime < @CurrentDate '
							END
						ELSE IF @DateRangeType = 0
							SET @MainContentFilter = @MainContentFilter + N' AND (nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
						ELSE IF @DateRangeType = 4
								SET @MainContentFilter = @MainContentFilter + N' AND (
								(ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (
									SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID
									FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID
									ORDER BY erd.StartDateTime
									)
								) OR
								(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (
									SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID
									FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate
									ORDER BY erd.StartDateTime
									)
								)) '

					SET @MainContentFilter = @MainContentFilter + N'
					)
			) '
		END

	IF @FilterByCustomFields = 1
		SET @MainContentFilter = @MainContentFilter + N') AllBeforeFilters INTERSECT ' + @CFFilterQuery
	
	IF @UseAndOperator IS NOT NULL AND @NewsFilterCategories IS NOT NULL
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
			)
		) AS OnlyWithGoogleMaps
		WHERE Recency >= (SELECT COUNT(*) FROM #FilterCategories) ';
	END
	
	SET @MainContentFilter = @MainContentFilter + N'
	) '
	
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N') AS inner_all ON nc.ArticleID = inner_all.ArticleID AND nc.Approved = ''True'' AND nc.' + @sqlSharingPortalAll + '
		) AS OnlyFirstRows
	WHERE OnlyFirstOccurance = 1'
	END
	
SET @MainContentFilter = @MainContentFilter + N' 
) '

SET @sqlcommand = @sqlcommand + @MainContentFilter + N' SELECT @AllContentCount = COUNT(ArticleID) FROM AllContent '

SET @sqlcommand = @sqlcommand + @MainContentFilter

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
SELECT n.[ArticleID],n.[PortalID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
	,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
	,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
	,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
	,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
	,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID]
	,e_fsd.StartDate,e_fsd.RecurringID,n.[ContactEmail], '
ELSE
SET @sqlcommand = @sqlcommand + N'
SELECT n.[ArticleID],n.[PortalID],n.[UserID]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Title] ELSE cl.[Title] END AS Title
	,CASE WHEN cl.ArticleID IS NULL THEN n.[SubTitle] ELSE cl.[SubTitle] END AS SubTitle
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Summary] ELSE cl.[Summary] END AS Summary
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Article] ELSE cl.[Article] END AS Article
	,n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
	,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[TitleLink] ELSE cl.[clTitleLink] END AS TitleLink
	,n.[DetailType]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[DetailTypeData] ELSE cl.[DetailTypeData] END AS DetailTypeData
	,n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
	,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
	,n.[ArticleImageSet]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaDecription] ELSE cl.[MetaDecription] END AS MetaDecription
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaKeywords] ELSE cl.[MetaKeywords] END AS MetaKeywords
	,n.[DisplayStyle],n.[DetailTarget]
	,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageTitle] ELSE cl.[MainImageTitle] END AS MainImageTitle
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageDescription] ELSE cl.[MainImageDescription] END AS MainImageDescription
	,n.[CFGroupeID],e_fsd.StartDate,e_fsd.RecurringID,n.[ContactEmail], ';

IF @QueryModulePermissions = 0
	SET @sqlcommand = @sqlcommand + N'0 AS CanEdit, '
ELSE IF @CanEditAllContent = 1
	SET @sqlcommand = @sqlcommand + N'1 AS CanEdit, '
ELSE
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CASE WHEN @HasEditCategories = 0
	THEN 
		CASE WHEN EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
			WHERE arp.ArticleID = n.ArticleID AND arp.Edit = 1 AND arp.RoleID IN (SELECT RoleID FROM #UserInRoles)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
			WHERE aup.ArticleID = n.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID
		)
		THEN 1 ELSE 0
		END
	ELSE
		CASE WHEN EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
			WHERE '
			IF @EditOnlyAsOwner = 1
				SET @sqlcommand = @sqlcommand + N' n.UserID = @UserID AND '

			SET @sqlcommand = @sqlcommand + N' c.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #UserEditCategories)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
			WHERE arp.ArticleID = n.ArticleID AND arp.Edit = 1 AND arp.RoleID IN (SELECT RoleID FROM #UserInRoles)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
			WHERE aup.ArticleID = n.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID
		)
		THEN 1 ELSE 0
		END
	END
	AS CanEdit, '
END

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color", c.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.CategoryID = ci.CategoryID
	WHERE ci.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategories)
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '
ELSE
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", lc.Name AS "@name", lc.CategoryURL AS "@url", c.Color AS "@color", lc.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #LocalizedCategories AS lc ON c.CategoryID = lc.Id
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON ci.CategoryID = c.CategoryID
	WHERE ci.ArticleID = n.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '

IF @QueryModulePermissions = 0
	SET @sqlcommand = @sqlcommand + N' 0 AS Published, 0 AS Approve, '
ELSE
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CASE n.Active
		WHEN 1 THEN 0
		WHEN 0 THEN 1
	END AS Published, '
	IF @UserCanApprove = 0
		SET @sqlcommand = @sqlcommand + N'0 AS Approve, '
	ELSE
		SET @sqlcommand = @sqlcommand + N'
			CASE n.Approved
				WHEN 1 THEN 0
				WHEN 0 THEN n.Active
			END AS Approve, '
END

SET @sqlcommand = @sqlcommand + N' @AllContentCount AS ContentCount,EventUserItemId '

IF @LocaleCode IS NULL
BEGIN
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.CommentedDate,finalSelection.EventUserItemId,finalSelection.CreatedOnDate
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,inner_ac.CommentedDate,inner_ac.EventUserItemId, inner_ac.CreatedOnDate
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC'
					SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
					
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID ';
	END
	ELSE IF @OrderByCustomFieldID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N',e_fsd.' + @OrderByColumnName + ',(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END)
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.EventUserItemId,finalSelection.CreatedOnDate,finalSelection.' + @OrderByColumnName + '
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,inner_ac.EventUserItemId, inner_ac.CreatedOnDate,fv.' + @OrderByColumnName + '
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '

				IF @OrderByDirection = 'ASC' SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'

				SET @sqlcommand = @sqlcommand + N'fv.'+ @CleanOrderColumnWithDirection + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON fv.ArticleID = inner_n.ArticleID AND fv.CustomFieldID = @OrderByCustomFieldID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID ';
	END
	ELSE
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.EventUserItemId,finalSelection.CreatedOnDate
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,inner_ac.EventUserItemId, inner_ac.CreatedOnDate
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '

				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID '
	END
END
ELSE
BEGIN
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.CommentedDate,finalSelection.EventUserItemId,finalSelection.CreatedOnDate
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,inner_ac.CommentedDate,inner_ac.EventUserItemId, inner_ac.CreatedOnDate
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
				
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
	END
	ELSE IF @OrderByCustomFieldID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.EventUserItemId,finalSelection.CreatedOnDate,finalSelection.' + @OrderByColumnName + '
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,inner_ac.EventUserItemId, inner_ac.CreatedOnDate,fv.' + @OrderByColumnName + '
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '

				IF @OrderByDirection = 'ASC' SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'
				
				SET @sqlcommand = @sqlcommand + N'fv.'+ @CleanOrderColumnWithDirection + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON fv.ArticleID = inner_n.ArticleID AND fv.CustomFieldID = @OrderByCustomFieldID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
	END
	ELSE
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.EventUserItemId,finalSelection.CreatedOnDate
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,inner_ac.EventUserItemId, inner_ac.CreatedOnDate
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
					
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
	END
END

SET @sqlcommand = @sqlcommand + N' ORDER BY '
	IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'Featured DESC, '
	IF @OrderByCustomFieldID IS NOT NULL AND @OrderByDirection = 'ASC'
		SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'
	SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + N', CreatedOnDate DESC '

SET @sqlcommand = @sqlcommand + N'
IF OBJECT_ID(''tempdb..#UserInRoles'') IS NOT NULL
	DROP TABLE #UserInRoles;
IF OBJECT_ID(''tempdb..#ViewCategories'') IS NOT NULL
	DROP TABLE #ViewCategories;
IF OBJECT_ID(''tempdb..#ViewCategoriesWithFilter'') IS NOT NULL
	DROP TABLE #ViewCategoriesWithFilter;
IF OBJECT_ID(''tempdb..#FilterCategories'') IS NOT NULL
	DROP TABLE #FilterCategories; '

IF @IsPortalSharing = 1
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#SharingPortals'') IS NOT NULL
		DROP TABLE #SharingPortals; '

IF @CanEditAllContent = 0 AND @QueryModulePermissions = 1
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#UserEditCategories'') IS NOT NULL
		DROP TABLE #UserEditCategories; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#LocalizedCategories'') IS NOT NULL
		DROP TABLE #LocalizedCategories; '

IF @sqlAuthors IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#FilterAuthors'') IS NOT NULL
		DROP TABLE #FilterAuthors; '

EXEC SP_EXECUTESQL @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalID = @PortalID
	,@ModuleID = @ModuleID
	,@UserID = @UserID
	,@OrderByCustomFieldID = @OrderByCustomFieldID
	,@ItemsFrom = @ItemsFrom
	,@ItemsTo = @ItemsTo
	,@DateRangeType = @DateRangeType
	,@FromDate = @FromDate
	,@ToDate = @ToDate
	,@OnlyOneCategory = @OnlyOneCategory
	,@Featured = @Featured
	,@ShowAllAuthors = @ShowAllAuthors
	,@FilterByAuthor = @FilterByAuthor
	,@FilterByGroupID = @FilterByGroupID
	,@FilterByArticles = @FilterByArticles
	,@FilterByDNNUserID = @FilterByDNNUserID
	,@FilterByDNNGroupID = @FilterByDNNGroupID
	,@EditOnlyAsOwner = @EditOnlyAsOwner
	,@UserCanApprove = @UserCanApprove
	,@LocaleCode = @LocaleCode
	,@IsSocialInstance = @IsSocialInstance
	,@FirstOrderBy = @FirstOrderBy
	,@Perm_ViewAllCategores = @Perm_ViewAllCategores
	,@Perm_EditAllCategores = @Perm_EditAllCategores
	,@AdminOrSuperUser = @AdminOrSuperUser
	,@CategoryFilterType = @CategoryFilterType
	,@PermissionSettingsSource = @PermissionSettingsSource
	,@FillterSettingsSource = @FillterSettingsSource
	,@StartDate = @StartDate
	,@OuterModuleID = @OuterModuleID
	,@HideUnlocalizedItems = @HideUnlocalizedItems
	,@NewsFilterCategories = @NewsFilterCategories
	,@NewsFilterAuthors = @NewsFilterAuthors
	,@NewsFilterGroups = @NewsFilterGroups
	,@ListArchive = @ListArchive
	,@FilterByTagID = @FilterByTagID
	,@RestrictionByDateRange = @RestrictionByDateRange
	,@IsPortalSharing = @IsPortalSharing
	,@CanEditAllContent = @CanEditAllContent
	,@QueryPermissionsPerArticles = @QueryPermissionsPerArticles
	,@QueryModulePermissions = @QueryModulePermissions
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetAllContent]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetAllContent] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetAllContent]
	@PortalId INT,
	@UserId INT,
	@ModuleId INT,
	@AdminOrSuperUser BIT  = 0,
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@eFromDate DATETIME = NULL,
	@eToDate DATETIME = NULL,
	@DisplayType TINYINT = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDnnUserId INT = 0,
	@FilterByDnnGroupId INT = 0,
	@ShowAllAuthors BIT = 1,
	@CategoryFilterType TINYINT = 0,
	@HideUnlocalizedItems BIT = 0,
	@SatellitePermissionsSource TINYINT = 0,
	@PermissionsModuleId INT = 0,
	@FilterCategoryId INT = NULL,
	@IsPortalSharing BIT = 0,
	@EventsFilterType TINYINT = 0
AS
SET NOCOUNT ON;
DECLARE @paramList NVARCHAR(2000);
SET @paramList = N'
	@PortalId INT
	,@UserId INT
	,@ModuleId INT
	,@AdminOrSuperUser BIT
	,@FromDate DATETIME
	,@ToDate DATETIME
	,@eFromDate DATETIME
	,@eToDate DATETIME
	,@DisplayType TINYINT
	,@LocaleCode NVARCHAR(20)
	,@IsSocialInstance BIT
	,@FilterByDnnUserId INT
	,@FilterByDnnGroupId INT
	,@ShowAllAuthors BIT
	,@CategoryFilterType TINYINT
	,@HideUnlocalizedItems BIT
	,@SatellitePermissionsSource TINYINT
	,@PermissionsModuleId INT
	,@FilterCategoryId INT
	,@EventsFilterType TINYINT'

DECLARE @sqlcommand NVARCHAR(MAX);
DECLARE @sqlSharingPortal NVARCHAR(300);
DECLARE @sqlSharingPortalAll NVARCHAR(300);

SET @sqlcommand = N'
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE(); 

CREATE TABLE #UserInRoles (RoleID INT PRIMARY KEY);
CREATE TABLE #ViewCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #FilterCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #ViewCategoriesWithFilter (CategoryID INT PRIMARY KEY); '

IF @IsPortalSharing = 1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	CREATE TABLE #SharingPortals (PortalID INT PRIMARY KEY);
	INSERT INTO #SharingPortals
	SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleId;';

	SET @sqlSharingPortal = N' EXISTS (SELECT PortalID FROM #SharingPortals AS sp WHERE sp.PortalID = na.PortalID) ';
	SET @sqlSharingPortalAll = N'PortalID IN (SELECT PortalID FROM #SharingPortals) ';
END
ELSE
BEGIN
	SET @sqlSharingPortal = N' na.PortalID = @PortalId ';
	SET @sqlSharingPortalAll = N'PortalID = @PortalId ';
END

IF @UserId <> -1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #UserInRoles '

	IF @IsPortalSharing = 0
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] AS mp ON mp.SharingPortalID = r.PortalID
		WHERE mp.ModuleID = @ModuleId
			AND ur.UserID = @UserId
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
END

IF @AdminOrSuperUser = 1 OR @SatellitePermissionsSource = 0
BEGIN
	SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #ViewCategories
		SELECT c.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		WHERE c.' + @sqlSharingPortalAll
END
ELSE IF @UserId = -1
BEGIN
	IF @SatellitePermissionsSource = 1 OR EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleId AND PermissionsPMSource = 1)
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalId  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalId
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.PortalID = @PortalId
					AND rps.ModuleID IS NULL
					AND rps.RoleID IS NULL); '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.ModuleID = @PermissionsModuleId AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.PortalID = @PortalId
					AND rps.ModuleID = @PermissionsModuleId
					AND rps.RoleID IS NULL); '
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @IsPortalSharing = 1
	BEGIN -- only can be by module settings, roles from current portal!
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN (
				SELECT r.[RoleID]
				FROM {databaseOwner}[{objectQualifier}Roles] AS r
				INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
				WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
					AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
					AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate)
			) AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleId AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN (
				SELECT r.[RoleID]
				FROM {databaseOwner}[{objectQualifier}Roles] AS r
				INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
				WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
					AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
					AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate)
			) AS uir ON rps.RoleID = uir.RoleID 
			WHERE rps.ModuleID = @PermissionsModuleId
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId; '
	END
	ELSE
	IF @SatellitePermissionsSource = 1 OR EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleId AND PermissionsPMSource = 1)
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalId AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.PortalID = @PortalId AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalId;
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalId AND rps.ModuleID IS NULL
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.PortalID = @PortalId AND ups.ModuleID IS NULL; '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleId AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID 
			WHERE rps.ModuleID = @PermissionsModuleId
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId; '
	END
END

IF @FilterCategoryID IS NOT NULL -- filtrira se po jednoj kategoriji
BEGIN
	SET @sqlcommand = @sqlcommand  + N'
	INSERT INTO #FilterCategories SELECT @FilterCategoryId; '
END
ELSE IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT [CategoryID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
	WHERE ' + @sqlSharingPortalAll
END
ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT [CategoryID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
	WHERE ModuleID = @ModuleId; '
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	;WITH hierarchy AS(
		SELECT cl.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE EXISTS (
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
			WHERE ci.ModuleID = @ModuleId
				AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
		)
		AND cl.' + @sqlSharingPortalAll + '
		UNION ALL
		SELECT cl.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
	)
	INSERT INTO #FilterCategories
	SELECT DISTINCT CategoryID
	FROM hierarchy; '
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategoriesWithFilter
SELECT vc.CategoryID
FROM #ViewCategories AS vc
INTERSECT
SELECT fc.CategoryID
FROM #FilterCategories AS fc; '

IF @ShowAllAuthors = 0
BEGIN
	SET @sqlcommand = @sqlcommand  + N'
	DECLARE @TempAuthorsIDList TABLE (UserID INT PRIMARY KEY);
	INSERT INTO @TempAuthorsIDList
	SELECT [UserID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai
	WHERE mai.ModuleID = @ModuleId
	UNION 
	SELECT [UserID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
	WHERE mgi.ModuleID = @ModuleId '
END

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #LocalizedCategories (Id INT PRIMARY KEY, Name NVARCHAR(200), CategoryText NVARCHAR(MAX), CategoryURL NVARCHAR(1500));
	INSERT INTO #LocalizedCategories
	SELECT c.CategoryID AS Id,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryName ELSE cl.Title END AS Name,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryText ELSE cl.CategoryText END AS CategoryText,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryURL ELSE cl.CategoryURL END AS CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.CategoryID = cl.CategoryID AND cl.LocaleCode = @LocaleCode
	WHERE c.CategoryID IN (SELECT CategoryID FROM #ViewCategories) '

SET @sqlcommand = @sqlcommand  + N'
;WITH MainFilters AS(
	SELECT DISTINCT na.[ArticleID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #FilterCategories) '
	IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand  + N' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode '
	IF @FilterByDnnGroupId <> 0 
		SET @sqlcommand = @sqlcommand  + N'
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDnnGroupId
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserId, @FilterByDnnGroupId) AS t ON t.seckey = nss.SecurityKey '
	ELSE IF @FilterByDnnUserId <> 0
		SET @sqlcommand = @sqlcommand  + N'
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserId, @FilterByDnnGroupId) AS t ON t.seckey = nss.SecurityKey '
	SET @sqlcommand = @sqlcommand  + N'
	WHERE ' + @sqlSharingPortal + N'
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '
		IF @LocaleCode IS NULL SET @sqlcommand = @sqlcommand  + N' AND na.HideDefaultLocale = 0 '
		IF @FilterByDnnUserId <> 0 SET @sqlcommand = @sqlcommand  + N' AND na.UserID = @FilterByDnnUserId '
		ELSE IF @ShowAllAuthors = 0 SET @sqlcommand = @sqlcommand  + N' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) '
	SET @sqlcommand = @sqlcommand  + N'
)'

SET @sqlcommand = @sqlcommand  + N'
SELECT alr.*,alr.StartDate AS CombinedOrderBy, categories.CssCategoryClasses, maps.GoogleMapData, '

IF @CategoryFilterType <> 0
	SET @sqlcommand = @sqlcommand  + N'link.LinkTabId, link.LinkModuleId '
ELSE
	SET @sqlcommand = @sqlcommand  + N'NULL AS LinkTabId, NULL AS LinkModuleId'

SET @sqlcommand = @sqlcommand  + N'
FROM ( '
IF @LocaleCode IS NULL
	SET @sqlcommand = @sqlcommand  + N'
	SELECT n.[ArticleID],n.[PortalID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID]
		,n.[ContactEmail],ne.[WhloeDay],ne.[ShowEndDate],
		CASE WHEN n.[EventArticle] = 1 THEN CASE WHEN ne.[Recurring] = 1 THEN nerd.[StartDateTime] ELSE ne.[StartDate] END ELSE n.[PublishDate] END AS StartDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[EndDateTime] ELSE ne.[EndDate] END AS EndDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[RecurringID] ELSE NULL END AS RecurringID, '
ELSE
	SET @sqlcommand = @sqlcommand + N'
	SELECT n.[ArticleID],n.[PortalID],n.[UserID]
		,CASE WHEN cl.ArticleID IS NULL THEN n.[Title] ELSE cl.[Title] END AS Title
		,CASE WHEN cl.ArticleID IS NULL THEN n.[SubTitle] ELSE cl.[SubTitle] END AS SubTitle
		,CASE WHEN cl.ArticleID IS NULL THEN n.[Summary] ELSE cl.[Summary] END AS Summary
		,CASE WHEN cl.ArticleID IS NULL THEN n.[Article] ELSE cl.[Article] END AS Article
		,n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		,CASE WHEN cl.ArticleID IS NULL THEN n.[TitleLink] ELSE cl.[clTitleLink] END AS TitleLink
		,n.[DetailType]
		,CASE WHEN cl.ArticleID IS NULL THEN n.[DetailTypeData] ELSE cl.[DetailTypeData] END AS DetailTypeData
		,n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		,n.[ArticleImageSet]
		,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaDecription] ELSE cl.[MetaDecription] END AS MetaDecription
		,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaKeywords] ELSE cl.[MetaKeywords] END AS MetaKeywords
		,n.[DisplayStyle],n.[DetailTarget]
		,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID]
		,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageTitle] ELSE cl.[MainImageTitle] END AS MainImageTitle
		,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageDescription] ELSE cl.[MainImageDescription] END AS MainImageDescription
		,n.[CFGroupeID],n.[ContactEmail],ne.[WhloeDay],ne.[ShowEndDate],
		CASE WHEN n.[EventArticle] = 1 THEN CASE WHEN ne.[Recurring] = 1 THEN nerd.[StartDateTime] ELSE ne.[StartDate] END ELSE n.[PublishDate] END AS StartDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[EndDateTime] ELSE ne.[EndDate] END AS EndDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[RecurringID] ELSE NULL END AS RecurringID, ';

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color", c.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.CategoryID = ci.CategoryID
	WHERE ci.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategories)
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow '
ELSE
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", lc.Name AS "@name", lc.CategoryURL AS "@url", c.Color AS "@color", lc.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #LocalizedCategories AS lc ON c.CategoryID = lc.Id
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON ci.CategoryID = c.CategoryID
	WHERE ci.ArticleID = n.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow '

SET @sqlcommand = @sqlcommand + N'
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON n.ArticleID = ne.ArticleID
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 '
	IF @EventsFilterType = 1
		SET @sqlcommand = @sqlcommand  + N' AND nerd.EndDateTime < @CurrentDate '
	IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate '
	ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = n.ArticleID ORDER BY erd.StartDateTime) AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate '
	ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = n.ArticleID ORDER BY erd.StartDateTime) AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)) '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';

	SET @sqlcommand = @sqlcommand  + N' 
	WHERE n.ArticleID IN (
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)	
		WHERE na.HasPermissions = 0
			AND na.EventArticle = 0 
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND na.PublishDate BETWEEN @FromDate AND @ToDate '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand  + N' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
		SET @sqlcommand = @sqlcommand  + N'
		UNION
		SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)	
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 0
		WHERE na.HasPermissions = 0
			AND na.EventArticle = 1
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @EventsFilterType = 1
				SET @sqlcommand = @sqlcommand  + N' AND ne.EndDate < @CurrentDate '
			IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate '
			ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND na.PublishDate BETWEEN @FromDate AND @ToDate '
			ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((na.PublishDate BETWEEN @FromDate AND @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand  + N' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
		SET @sqlcommand = @sqlcommand  + N'
		UNION
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)	
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 '
		IF @EventsFilterType = 1
			SET @sqlcommand = @sqlcommand  + N' AND nerd.EndDateTime < @CurrentDate '
		IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate '
		ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate '
		ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)) '
		SET @sqlcommand = @sqlcommand  + N'
		WHERE na.HasPermissions = 0
			AND na.EventArticle = 1
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand  + N' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
		SET @sqlcommand = @sqlcommand  + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		WHERE na.HasPermissions = 1
			AND na.EventArticle = 0  
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND na.PublishDate BETWEEN @FromDate AND @ToDate '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
				IF @UserId = -1 SET @sqlcommand = @sqlcommand  + N' AND aup.UserID IS NULL '
				ELSE SET @sqlcommand = @sqlcommand  + N' AND aup.UserID = @UserId '
			END 
		SET @sqlcommand = @sqlcommand  + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 0
		WHERE na.HasPermissions = 1
			AND na.EventArticle = 1
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @EventsFilterType = 1
				SET @sqlcommand = @sqlcommand  + N' AND ne.EndDate < @CurrentDate '
			IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate '
			ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND na.PublishDate BETWEEN @FromDate AND @ToDate '
			ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((na.PublishDate BETWEEN @FromDate AND @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
				IF @UserId = -1 SET @sqlcommand = @sqlcommand  + N' AND aup.UserID IS NULL '
				ELSE SET @sqlcommand = @sqlcommand  + N' AND aup.UserID = @UserId '
			END 
		SET @sqlcommand = @sqlcommand  + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 '
		IF @EventsFilterType = 1
			SET @sqlcommand = @sqlcommand  + N' AND nerd.EndDateTime < @CurrentDate '
		IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate '
		ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate '
		ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)) '
		SET @sqlcommand = @sqlcommand  + N'
		WHERE na.HasPermissions = 1
			AND na.EventArticle = 1
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
				IF @UserId = -1 SET @sqlcommand = @sqlcommand  + N' AND aup.UserID IS NULL '
				ELSE SET @sqlcommand = @sqlcommand  + N' AND aup.UserID = @UserId '
			END 
		SET @sqlcommand = @sqlcommand  + N'
		UNION
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		WHERE na.HasPermissions = 1
			AND na.EventArticle = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND na.PublishDate BETWEEN @FromDate AND @ToDate '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND arp.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
			END
		SET @sqlcommand = @sqlcommand  + N'
		UNION ALL
		SELECT DISTINCT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 0
		WHERE na.HasPermissions = 1
			AND na.EventArticle = 1
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @EventsFilterType = 1
				SET @sqlcommand = @sqlcommand  + N' AND ne.EndDate < @CurrentDate '
			IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate '
			ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND na.PublishDate BETWEEN @FromDate AND @ToDate '
			ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((na.PublishDate BETWEEN @FromDate AND @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND arp.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
			END
		SET @sqlcommand = @sqlcommand  + N'
		UNION ALL
		SELECT DISTINCT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne on na.ArticleID = ne.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 '
		IF @EventsFilterType = 1
			SET @sqlcommand = @sqlcommand  + N' AND nerd.EndDateTime < @CurrentDate '
		IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate '
		ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate '
		ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)) '
		SET @sqlcommand = @sqlcommand  + N'
		WHERE na.HasPermissions = 1
			AND na.EventArticle = 1
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND arp.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
			END
		SET @sqlcommand = @sqlcommand  + N'
		)
) AS alr
OUTER APPLY 
(
	SELECT c.CategoryID AS "@id", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #ViewCategories AS uvc ON c.CategoryID = uvc.CategoryID
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID
	WHERE cl.ArticleID = alr.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')
) AS categories (CssCategoryClasses)
OUTER APPLY 
( 
	SELECT PointData AS GoogleMapData
	FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID
	WHERE mc.ArticleID = alr.ArticleID
) maps '
	 
IF @CategoryFilterType <> 0
	SET @sqlcommand = @sqlcommand  + N'
	OUTER APPLY 
	( 
		SELECT TOP 1 tm.[TabID] AS LinkTabId, clink.NewsModuleID AS LinkModuleId
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl ON c.CategoryID = cl.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS clink ON clink.CategoryID = cl.CategoryID AND clink.SourceModuleID = @ModuleId
		INNER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON clink.NewsModuleID = tm.ModuleID
		WHERE c.ArticleID = alr.ArticleID
			AND cl.' + @sqlSharingPortalAll + '
		ORDER BY cl.Position
	) link '

SET @sqlcommand = @sqlcommand  + N'
	ORDER BY CombinedOrderBy; '

SET @sqlcommand = @sqlcommand + N'
IF OBJECT_ID(''tempdb..#UserInRoles'') IS NOT NULL
	DROP TABLE #UserInRoles;
IF OBJECT_ID(''tempdb..#ViewCategories'') IS NOT NULL
	DROP TABLE #ViewCategories;
IF OBJECT_ID(''tempdb..#ViewCategoriesWithFilter'') IS NOT NULL
	DROP TABLE #ViewCategoriesWithFilter;
IF OBJECT_ID(''tempdb..#FilterCategories'') IS NOT NULL
	DROP TABLE #FilterCategories; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#LocalizedCategories'') IS NOT NULL
		DROP TABLE #LocalizedCategories; '

IF @IsPortalSharing = 1
	SET @sqlcommand = @sqlcommand + N' DROP TABLE #SharingPortals;';

EXEC SP_EXECUTESQL @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalId = @PortalId
	,@UserId = @UserId
	,@ModuleId = @ModuleId
	,@AdminOrSuperUser = @AdminOrSuperUser
	,@FromDate = @FromDate
	,@ToDate = @ToDate
	,@eFromDate = @eFromDate
	,@eToDate = @eToDate
	,@DisplayType = @DisplayType
	,@LocaleCode = @LocaleCode
	,@IsSocialInstance = @IsSocialInstance
	,@FilterByDnnUserId = @FilterByDnnUserId
	,@FilterByDnnGroupId = @FilterByDnnGroupId
	,@ShowAllAuthors = @ShowAllAuthors
	,@CategoryFilterType = @CategoryFilterType
	,@HideUnlocalizedItems = @HideUnlocalizedItems
	,@SatellitePermissionsSource = @SatellitePermissionsSource
	,@PermissionsModuleId = @PermissionsModuleId
	,@FilterCategoryId = @FilterCategoryId
	,@EventsFilterType = @EventsFilterType
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetArticles]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetArticles] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetArticles]
	@PortalId INT,
	@UserId INT,
	@ModuleId INT,
	@AdminOrSuperUser BIT = 0,
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@eFromDate DATETIME = NULL,
	@eToDate DATETIME = NULL,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDnnUserId INT = 0,
	@FilterByDnnGroupId INT = 0,
	@ShowAllAuthors BIT = 1,
	@CategoryFilterType TINYINT = 0,
	@HideUnlocalizedItems BIT = 0,
	@SatellitePermissionsSource TINYINT = 0,
	@PermissionsModuleId INT = 0,
	@FilterCategoryId INT = NULL,
	@IsPortalSharing BIT = 0
AS
SET NOCOUNT ON;
DECLARE @paramList NVARCHAR(1000);
SET @paramList = N'
	@PortalId INT
	,@UserId INT
	,@ModuleId INT
	,@AdminOrSuperUser BIT
	,@FromDate DATETIME
	,@ToDate DATETIME
	,@eFromDate DATETIME
	,@eToDate DATETIME
	,@LocaleCode NVARCHAR(20)
	,@IsSocialInstance BIT
	,@FilterByDnnUserId INT
	,@FilterByDnnGroupId INT
	,@ShowAllAuthors BIT
	,@CategoryFilterType TINYINT
	,@HideUnlocalizedItems BIT
	,@SatellitePermissionsSource TINYINT
	,@PermissionsModuleID INT
	,@FilterCategoryId INT'

DECLARE @sqlcommand NVARCHAR(MAX);
DECLARE @sqlSharingPortal NVARCHAR(300);
DECLARE @sqlSharingPortalAll NVARCHAR(300);

SET @sqlcommand = N'
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

CREATE TABLE #UserInRoles (RoleID INT PRIMARY KEY);
CREATE TABLE #ViewCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #FilterCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #ViewCategoriesWithFilter (CategoryID INT PRIMARY KEY); '

IF @IsPortalSharing = 1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	CREATE TABLE #SharingPortals (PortalID INT PRIMARY KEY);
	INSERT INTO #SharingPortals
	SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleId;';

	SET @sqlSharingPortal = N' EXISTS (SELECT PortalID FROM #SharingPortals AS sp WHERE sp.PortalID = na.PortalID) ';
	SET @sqlSharingPortalAll = N'PortalID IN (SELECT PortalID FROM #SharingPortals) ';
END
ELSE
BEGIN
	SET @sqlSharingPortal = N' na.PortalID = @PortalId ';
	SET @sqlSharingPortalAll = N'PortalID = @PortalId ';
END

IF @UserId <> -1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #UserInRoles '

	IF @IsPortalSharing = 0
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] AS mp ON mp.SharingPortalID = r.PortalID
		WHERE mp.ModuleID = @ModuleId
			AND ur.UserID = @UserId
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
END

IF @AdminOrSuperUser = 1 OR @SatellitePermissionsSource = 0
BEGIN
	SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #ViewCategories
		SELECT c.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		WHERE c.' + @sqlSharingPortalAll
END
ELSE IF @UserId = -1
BEGIN
	IF @SatellitePermissionsSource = 1 OR EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleId AND PermissionsPMSource = 1)
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalId  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalId
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.PortalID = @PortalId
					AND rps.ModuleID IS NULL
					AND rps.RoleID IS NULL); '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.ModuleID = @PermissionsModuleId AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.PortalID = @PortalId
					AND rps.ModuleID = @PermissionsModuleId
					AND rps.RoleID IS NULL); '
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @IsPortalSharing = 1
	BEGIN -- only can be by module settings, roles from current portal!
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN (
				SELECT r.[RoleID]
				FROM {databaseOwner}[{objectQualifier}Roles] AS r
				INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
				WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
					AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
					AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate)
			) AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleId AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN (
				SELECT r.[RoleID]
				FROM {databaseOwner}[{objectQualifier}Roles] AS r
				INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
				WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
					AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
					AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate)
			) AS uir ON rps.RoleID = uir.RoleID 
			WHERE rps.ModuleID = @PermissionsModuleId
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId; '
	END
	ELSE
	IF @SatellitePermissionsSource = 1 OR EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleId AND PermissionsPMSource = 1)
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalId AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.PortalID = @PortalId AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalId;
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalId AND rps.ModuleID IS NULL
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.PortalID = @PortalId AND ups.ModuleID IS NULL; '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleId AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID 
			WHERE rps.ModuleID = @PermissionsModuleId
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId; '
	END
END

IF @FilterCategoryID IS NOT NULL -- filtrira se po jednoj kategoriji
BEGIN
	SET @sqlcommand = @sqlcommand  + N'
	INSERT INTO #FilterCategories SELECT @FilterCategoryId; '
END
ELSE IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT [CategoryID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
	WHERE ' + @sqlSharingPortalAll
END
ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT [CategoryID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
	WHERE ModuleID = @ModuleId; '
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	;WITH hierarchy AS(
		SELECT cl.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE EXISTS (
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
			WHERE ci.ModuleID = @ModuleId
				AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
		)
		AND cl.' + @sqlSharingPortalAll + '
		UNION ALL
		SELECT cl.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
	)
	INSERT INTO #FilterCategories
	SELECT DISTINCT CategoryID
	FROM hierarchy; '
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategoriesWithFilter
SELECT vc.CategoryID
FROM #ViewCategories AS vc
INTERSECT
SELECT fc.CategoryID
FROM #FilterCategories AS fc; '

IF @ShowAllAuthors = 0
BEGIN
	SET @sqlcommand = @sqlcommand  + N'
	DECLARE @TempAuthorsIDList TABLE (UserID INT PRIMARY KEY);
	INSERT INTO @TempAuthorsIDList
	SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleId
	UNION 
	SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
	WHERE mgi.ModuleID = @ModuleId '
END

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #LocalizedCategories (Id INT PRIMARY KEY, Name NVARCHAR(200), CategoryText NVARCHAR(MAX), CategoryURL NVARCHAR(1500));
	INSERT INTO #LocalizedCategories
	SELECT c.CategoryID AS Id,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryName ELSE cl.Title END AS Name,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryText ELSE cl.CategoryText END AS CategoryText,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryURL ELSE cl.CategoryURL END AS CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.CategoryID = cl.CategoryID AND cl.LocaleCode = @LocaleCode
	WHERE c.CategoryID IN (SELECT CategoryID FROM #ViewCategories) '

SET @sqlcommand = @sqlcommand  + N'
;WITH MainFilters AS(
	SELECT DISTINCT na.[ArticleID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #FilterCategories) '
	IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand  + N' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode '
	IF @FilterByDnnGroupId <> 0 
		SET @sqlcommand = @sqlcommand  + N'
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDnnGroupId
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserId, @FilterByDnnGroupId) AS t ON t.seckey = nss.SecurityKey '
	ELSE IF @FilterByDnnUserId <> 0
		SET @sqlcommand = @sqlcommand  + N'
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserId, @FilterByDnnGroupId) AS t ON t.seckey = nss.SecurityKey '
	SET @sqlcommand = @sqlcommand  + N'
	WHERE ' + @sqlSharingPortal + N'
		AND na.EventArticle = 0
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
		AND na.PublishDate BETWEEN @FromDate AND @ToDate '
		IF @LocaleCode IS NULL SET @sqlcommand = @sqlcommand  + N' AND na.HideDefaultLocale = 0 '
		IF @FilterByDnnUserId <> 0 SET @sqlcommand = @sqlcommand  + N' AND na.UserID = @FilterByDnnUserId '
		ELSE IF @ShowAllAuthors = 0 SET @sqlcommand = @sqlcommand  + N' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) '
	SET @sqlcommand = @sqlcommand  + N'
)'

SET @sqlcommand = @sqlcommand  + N'
SELECT alr.*,PublishDate AS CombinedOrderBy, categories.CssCategoryClasses, '

IF @CategoryFilterType <> 0
		SET @sqlcommand = @sqlcommand  + N'link.LinkTabId, link.LinkModuleId '
ELSE
	SET @sqlcommand = @sqlcommand  + N'NULL AS LinkTabId, NULL AS LinkModuleId'

SET @sqlcommand = @sqlcommand  + N'
FROM ( '
IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand  + N'
	SELECT n.[ArticleID],n.[PortalID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
	,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
	,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
	,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
	,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
	,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle]
	,n.[MainImageDescription],n.[CFGroupeID],n.[ContactEmail], '
ELSE
SET @sqlcommand = @sqlcommand + N'
SELECT n.[ArticleID],n.[PortalID],n.[UserID]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Title] ELSE cl.[Title] END AS Title
	,CASE WHEN cl.ArticleID IS NULL THEN n.[SubTitle] ELSE cl.[SubTitle] END AS SubTitle
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Summary] ELSE cl.[Summary] END AS Summary
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Article] ELSE cl.[Article] END AS Article
	,n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
	,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[TitleLink] ELSE cl.[clTitleLink] END AS TitleLink
	,n.[DetailType]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[DetailTypeData] ELSE cl.[DetailTypeData] END AS DetailTypeData
	,n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
	,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
	,n.[ArticleImageSet]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaDecription] ELSE cl.[MetaDecription] END AS MetaDecription
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaKeywords] ELSE cl.[MetaKeywords] END AS MetaKeywords
	,n.[DisplayStyle],n.[DetailTarget]
	,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageTitle] ELSE cl.[MainImageTitle] END AS MainImageTitle
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageDescription] ELSE cl.[MainImageDescription] END AS MainImageDescription
	,n.[CFGroupeID],n.[ContactEmail], ';

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color", c.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.CategoryID = ci.CategoryID
	WHERE ci.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategories)
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow '
ELSE
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", lc.Name AS "@name", lc.CategoryURL AS "@url", c.Color AS "@color", lc.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #LocalizedCategories AS lc ON c.CategoryID = lc.Id
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON ci.CategoryID = c.CategoryID
	WHERE ci.ArticleID = n.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow '

SET @sqlcommand = @sqlcommand + N'
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';

SET @sqlcommand = @sqlcommand + N'
	WHERE n.ArticleID IN (
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)	
		WHERE na.HasPermissions = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand  + N' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
		SET @sqlcommand = @sqlcommand  + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		WHERE na.HasPermissions = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
				IF @UserId = -1 SET @sqlcommand = @sqlcommand  + N' AND aup.UserID IS NULL '
				ELSE SET @sqlcommand = @sqlcommand  + N' AND aup.UserID = @UserId '
			END 
		SET @sqlcommand = @sqlcommand  + N'
		UNION
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		WHERE na.HasPermissions = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND arp.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
			END
		SET @sqlcommand = @sqlcommand  + N'
		)
	) AS alr
	OUTER APPLY 
	(
		SELECT c.CategoryID AS "@id", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color"
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		INNER JOIN #ViewCategories AS uvc ON c.CategoryID = uvc.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID
		WHERE cl.ArticleID = alr.ArticleID
		ORDER BY c.Position
		FOR XML PATH(''category''), ROOT(''categories'')
	) AS categories (CssCategoryClasses) '
	 
	IF @CategoryFilterType <> 0
	SET @sqlcommand = @sqlcommand  + N'
	OUTER APPLY 
	( 
		SELECT TOP 1 tm.[TabID] AS LinkTabId, clink.NewsModuleID AS LinkModuleId
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl ON c.CategoryID = cl.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS clink ON clink.CategoryID = cl.CategoryID AND clink.SourceModuleID = @ModuleId
		INNER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON clink.NewsModuleID = tm.ModuleID
		WHERE c.ArticleID = alr.ArticleID
			AND cl.' + @sqlSharingPortalAll + '
		ORDER BY cl.Position
	) link '

	 SET @sqlcommand = @sqlcommand  + N'
	ORDER BY alr.PublishDate; '

SET @sqlcommand = @sqlcommand + N'
IF OBJECT_ID(''tempdb..#UserInRoles'') IS NOT NULL
	DROP TABLE #UserInRoles;
IF OBJECT_ID(''tempdb..#ViewCategories'') IS NOT NULL
	DROP TABLE #ViewCategories;
IF OBJECT_ID(''tempdb..#ViewCategoriesWithFilter'') IS NOT NULL
	DROP TABLE #ViewCategoriesWithFilter;
IF OBJECT_ID(''tempdb..#FilterCategories'') IS NOT NULL
	DROP TABLE #FilterCategories; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#LocalizedCategories'') IS NOT NULL
		DROP TABLE #LocalizedCategories; '

IF @IsPortalSharing = 1
	SET @sqlcommand = @sqlcommand + N' DROP TABLE #SharingPortals;';

EXEC SP_EXECUTESQL @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalId = @PortalId
	,@UserId = @UserId
	,@ModuleId = @ModuleId
	,@AdminOrSuperUser = @AdminOrSuperUser
	,@FromDate = @FromDate
	,@ToDate = @ToDate
	,@eFromDate = @eFromDate
	,@eToDate = @eToDate
	,@LocaleCode = @LocaleCode
	,@IsSocialInstance = @IsSocialInstance
	,@FilterByDnnUserId = @FilterByDnnUserId
	,@FilterByDnnGroupId = @FilterByDnnGroupId
	,@ShowAllAuthors = @ShowAllAuthors
	,@CategoryFilterType = @CategoryFilterType
	,@HideUnlocalizedItems = @HideUnlocalizedItems
	,@SatellitePermissionsSource = @SatellitePermissionsSource
	,@PermissionsModuleID = @PermissionsModuleID
	,@FilterCategoryId = @FilterCategoryId
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetEvents]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetEvents] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetEvents]
	@PortalId INT,
	@UserId INT,
	@ModuleId INT,
	@AdminOrSuperUser BIT = 0,
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@eFromDate DATETIME = NULL,
	@eToDate DATETIME = NULL,
	@DisplayType TINYINT = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDnnUserId INT = 0,
	@FilterByDnnGroupId INT = 0,
	@ShowAllAuthors BIT = 1,
	@CategoryFilterType TINYINT = 0,
	@HideUnlocalizedItems BIT = 0,
	@SatellitePermissionsSource TINYINT = 0,
	@PermissionsModuleId INT = 0,
	@FilterCategoryId INT = NULL,
	@IsPortalSharing BIT = 0,
	@EventsFilterType TINYINT = 0
AS
SET NOCOUNT ON;
DECLARE @paramList NVARCHAR(2000);
SET @paramList = N'
	 @PortalId INT
	,@UserId INT
	,@ModuleId INT
	,@AdminOrSuperUser BIT
	,@FromDate DATETIME
	,@ToDate DATETIME
	,@eFromDate DATETIME
	,@eToDate DATETIME
	,@DisplayType TINYINT
	,@LocaleCode NVARCHAR(20)
	,@IsSocialInstance BIT
	,@FilterByDnnUserId INT
	,@FilterByDnnGroupId INT
	,@ShowAllAuthors BIT
	,@CategoryFilterType TINYINT
	,@HideUnlocalizedItems BIT
	,@SatellitePermissionsSource TINYINT
	,@PermissionsModuleId INT
	,@FilterCategoryId INT
	,@EventsFilterType TINYINT'

DECLARE @sqlcommand NVARCHAR(MAX);
DECLARE @sqlSharingPortal NVARCHAR(300);
DECLARE @sqlSharingPortalAll NVARCHAR(300);

SET @sqlcommand = N'
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE(); 

CREATE TABLE #UserInRoles (RoleID INT PRIMARY KEY);
CREATE TABLE #ViewCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #FilterCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #ViewCategoriesWithFilter (CategoryID INT PRIMARY KEY); '

IF @IsPortalSharing = 1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	CREATE TABLE #SharingPortals (PortalID INT PRIMARY KEY);
	INSERT INTO #SharingPortals
	SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleId;';

	SET @sqlSharingPortal = N' EXISTS (SELECT PortalID FROM #SharingPortals AS sp WHERE sp.PortalID = na.PortalID) ';
	SET @sqlSharingPortalAll = N'PortalID IN (SELECT PortalID FROM #SharingPortals) ';
END
ELSE
BEGIN
	SET @sqlSharingPortal = N' na.PortalID = @PortalId ';
	SET @sqlSharingPortalAll = N'PortalID = @PortalId ';
END

IF @UserId <> -1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #UserInRoles '

	IF @IsPortalSharing = 0
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] AS mp ON mp.SharingPortalID = r.PortalID
		WHERE mp.ModuleID = @ModuleId
			AND ur.UserID = @UserId
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
END

IF @AdminOrSuperUser = 1 OR @SatellitePermissionsSource = 0
BEGIN
	SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #ViewCategories
		SELECT c.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		WHERE c.' + @sqlSharingPortalAll
END
ELSE IF @UserId = -1
BEGIN
	IF @SatellitePermissionsSource = 1 OR EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleId AND PermissionsPMSource = 1)
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalId  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalId
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.PortalID = @PortalId
					AND rps.ModuleID IS NULL
					AND rps.RoleID IS NULL); '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.ModuleID = @PermissionsModuleId AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.PortalID = @PortalId
					AND rps.ModuleID = @PermissionsModuleId
					AND rps.RoleID IS NULL); '
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @IsPortalSharing = 1
	BEGIN -- only can be by module settings, roles from current portal!
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN (
				SELECT r.[RoleID]
				FROM {databaseOwner}[{objectQualifier}Roles] AS r
				INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
				WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
					AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
					AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate)
			) AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleId AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN (
				SELECT r.[RoleID]
				FROM {databaseOwner}[{objectQualifier}Roles] AS r
				INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
				WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
					AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
					AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate)
			) AS uir ON rps.RoleID = uir.RoleID 
			WHERE rps.ModuleID = @PermissionsModuleId
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId; '
	END
	ELSE
	IF @SatellitePermissionsSource = 1 OR EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleId AND PermissionsPMSource = 1)
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalId AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.PortalID = @PortalId AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalId;
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalId AND rps.ModuleID IS NULL
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.PortalID = @PortalId AND ups.ModuleID IS NULL; '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleId AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID 
			WHERE rps.ModuleID = @PermissionsModuleId
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId; '
	END
END

IF @FilterCategoryID IS NOT NULL -- filtrira se po jednoj kategoriji
BEGIN
	SET @sqlcommand = @sqlcommand  + N'
	INSERT INTO #FilterCategories SELECT @FilterCategoryId; '
END
ELSE IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT [CategoryID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
	WHERE ' + @sqlSharingPortalAll
END
ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT [CategoryID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
	WHERE ModuleID = @ModuleId; '
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	;WITH hierarchy AS(
		SELECT cl.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE EXISTS (
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
			WHERE ci.ModuleID = @ModuleId
				AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
		)
		AND cl.' + @sqlSharingPortalAll + '
		UNION ALL
		SELECT cl.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
	)
	INSERT INTO #FilterCategories
	SELECT DISTINCT CategoryID
	FROM hierarchy; '
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategoriesWithFilter
SELECT vc.CategoryID
FROM #ViewCategories AS vc
INTERSECT
SELECT fc.CategoryID
FROM #FilterCategories AS fc; '

IF @ShowAllAuthors = 0
BEGIN
	SET @sqlcommand = @sqlcommand  + N'
	DECLARE @TempAuthorsIDList TABLE (UserID INT PRIMARY KEY);
	INSERT INTO @TempAuthorsIDList
	SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleId
	UNION 
	SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
	WHERE mgi.ModuleID = @ModuleId '
END

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #LocalizedCategories (Id INT PRIMARY KEY, Name NVARCHAR(200), CategoryText NVARCHAR(MAX), CategoryURL NVARCHAR(1500));
	INSERT INTO #LocalizedCategories
	SELECT c.CategoryID AS Id,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryName ELSE cl.Title END AS Name,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryText ELSE cl.CategoryText END AS CategoryText,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryURL ELSE cl.CategoryURL END AS CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.CategoryID = cl.CategoryID AND cl.LocaleCode = @LocaleCode
	WHERE c.CategoryID IN (SELECT CategoryID FROM #ViewCategories) '

SET @sqlcommand = @sqlcommand  + N'
;WITH MainFilters AS(
	SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #FilterCategories) '
		IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand  + N' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode '
		IF @FilterByDnnGroupId <> 0 
			SET @sqlcommand = @sqlcommand  + N'
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDnnGroupId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserId, @FilterByDnnGroupId) AS t ON t.seckey = nss.SecurityKey '
		ELSE IF @FilterByDnnUserId <> 0
			SET @sqlcommand = @sqlcommand  + N'
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserId, @FilterByDnnGroupId) AS t ON t.seckey = nss.SecurityKey '
	SET @sqlcommand = @sqlcommand  + N'
	WHERE ' + @sqlSharingPortal + N'
		AND na.EventArticle = 1
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '
		IF @LocaleCode IS NULL SET @sqlcommand = @sqlcommand  + N' AND na.HideDefaultLocale = 0 '
		IF @FilterByDnnUserId <> 0 SET @sqlcommand = @sqlcommand  + N' AND na.UserID = @FilterByDnnUserId '
		ELSE IF @ShowAllAuthors = 0 SET @sqlcommand = @sqlcommand  + N' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) '
	SET @sqlcommand = @sqlcommand  + N'
)'
SET @sqlcommand = @sqlcommand  + N'
SELECT alr.*,alr.[StartDate] AS CombinedOrderBy, categories.CssCategoryClasses, maps.GoogleMapData, '

IF @CategoryFilterType <> 0
		SET @sqlcommand = @sqlcommand  + N'link.LinkTabId, link.LinkModuleId '
ELSE
	SET @sqlcommand = @sqlcommand  + N'NULL AS LinkTabId, NULL AS LinkModuleId'

SET @sqlcommand = @sqlcommand  + N'
FROM ( '
IF @LocaleCode IS NULL
	SET @sqlcommand = @sqlcommand  + N'
	SELECT n.[ArticleID],n.[PortalID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
		,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID]
		,n.[ContactEmail],ne.[WhloeDay],ne.[ShowEndDate],
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[StartDateTime] ELSE ne.[StartDate] END AS StartDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[EndDateTime] ELSE ne.[EndDate] END AS EndDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[RecurringID] ELSE NULL END AS RecurringID, '
ELSE
	SET @sqlcommand = @sqlcommand + N'
	SELECT n.[ArticleID],n.[PortalID],n.[UserID]
		,CASE WHEN cl.ArticleID IS NULL THEN n.[Title] ELSE cl.[Title] END AS Title
		,CASE WHEN cl.ArticleID IS NULL THEN n.[SubTitle] ELSE cl.[SubTitle] END AS SubTitle
		,CASE WHEN cl.ArticleID IS NULL THEN n.[Summary] ELSE cl.[Summary] END AS Summary
		,CASE WHEN cl.ArticleID IS NULL THEN n.[Article] ELSE cl.[Article] END AS Article
		,n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
		,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
		,CASE WHEN cl.ArticleID IS NULL THEN n.[TitleLink] ELSE cl.[clTitleLink] END AS TitleLink
		,n.[DetailType]
		,CASE WHEN cl.ArticleID IS NULL THEN n.[DetailTypeData] ELSE cl.[DetailTypeData] END AS DetailTypeData
		,n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
		,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
		,n.[ArticleImageSet]
		,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaDecription] ELSE cl.[MetaDecription] END AS MetaDecription
		,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaKeywords] ELSE cl.[MetaKeywords] END AS MetaKeywords
		,n.[DisplayStyle],n.[DetailTarget]
		,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID]
		,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageTitle] ELSE cl.[MainImageTitle] END AS MainImageTitle
		,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageDescription] ELSE cl.[MainImageDescription] END AS MainImageDescription
		,n.[CFGroupeID],n.[ContactEmail],ne.[WhloeDay],ne.[ShowEndDate],
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[StartDateTime] ELSE ne.[StartDate] END AS StartDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[EndDateTime] ELSE ne.[EndDate] END AS EndDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[RecurringID] ELSE NULL END AS RecurringID, ';

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color", c.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.CategoryID = ci.CategoryID
	WHERE ci.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategories)
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow '
ELSE
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", lc.Name AS "@name", lc.CategoryURL AS "@url", c.Color AS "@color", lc.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #LocalizedCategories AS lc ON c.CategoryID = lc.Id
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON ci.CategoryID = c.CategoryID
	WHERE ci.ArticleID = n.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow '

SET @sqlcommand = @sqlcommand + N'
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON n.ArticleID = ne.ArticleID
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 '
	IF @EventsFilterType = 1
		SET @sqlcommand = @sqlcommand  + N' AND nerd.EndDateTime < @CurrentDate '
	IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate '
	ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = n.ArticleID ORDER BY erd.StartDateTime) AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate '
	ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = n.ArticleID ORDER BY erd.StartDateTime) AND n.PublishDate >= @FromDate AND n.PublishDate <= @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)) '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';

	SET @sqlcommand = @sqlcommand  + N' 
		WHERE n.ArticleID IN (
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)	
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 0
		WHERE na.HasPermissions = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND ne.Recurring = 0 '
		IF @EventsFilterType = 1
			SET @sqlcommand = @sqlcommand  + N' AND ne.EndDate < @CurrentDate '
		IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate '
		ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND na.PublishDate BETWEEN @FromDate AND @ToDate '
		ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((na.PublishDate BETWEEN @FromDate AND @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) '

		IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand  + N' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
		SET @sqlcommand = @sqlcommand  + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)	
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 '
		IF @EventsFilterType = 1
			SET @sqlcommand = @sqlcommand  + N' AND nerd.EndDateTime < @CurrentDate '
		IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate '
		ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate '
		ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)) '
		SET @sqlcommand = @sqlcommand  + N'
		WHERE na.HasPermissions = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND ne.Recurring = 1 '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand  + N' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
		SET @sqlcommand = @sqlcommand  + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 0
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @EventsFilterType = 1
				SET @sqlcommand = @sqlcommand  + N' AND ne.EndDate < @CurrentDate '
			IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate '
			ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND na.PublishDate BETWEEN @FromDate AND @ToDate '
			ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((na.PublishDate BETWEEN @FromDate AND @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
				IF @UserId = -1 SET @sqlcommand = @sqlcommand  + N' AND aup.UserID IS NULL '
				ELSE SET @sqlcommand = @sqlcommand  + N' AND aup.UserID = @UserId '
			END 
		SET @sqlcommand = @sqlcommand  + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 '
		IF @EventsFilterType = 1
			SET @sqlcommand = @sqlcommand  + N' AND nerd.EndDateTime < @CurrentDate '
		IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate '
		ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate '
		ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)) '
		SET @sqlcommand = @sqlcommand  + N'
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
				IF @UserId = -1 SET @sqlcommand = @sqlcommand  + N' AND aup.UserID IS NULL '
				ELSE SET @sqlcommand = @sqlcommand  + N' AND aup.UserID = @UserId '
			END 
		SET @sqlcommand = @sqlcommand  + N'
		UNION
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 0
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @EventsFilterType = 1
				SET @sqlcommand = @sqlcommand  + N' AND ne.EndDate < @CurrentDate '
			IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate '
			ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND na.PublishDate BETWEEN @FromDate AND @ToDate '
			ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((na.PublishDate BETWEEN @FromDate AND @ToDate) OR (ne.StartDate <= @eToDate AND ne.EndDate >= @eFromDate)) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND arp.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
			END
		SET @sqlcommand = @sqlcommand  + N'
		UNION ALL
		SELECT DISTINCT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 '
		IF @EventsFilterType = 1
			SET @sqlcommand = @sqlcommand  + N' AND nerd.EndDateTime < @CurrentDate '
		IF @DisplayType = 0 SET @sqlcommand = @sqlcommand  + N' AND nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate '
		ELSE IF @DisplayType = 1 SET @sqlcommand = @sqlcommand  + N' AND nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate '
		ELSE IF @DisplayType = 2 SET @sqlcommand = @sqlcommand  + N' AND ((nerd.RecurringID = (SELECT TOP 1 RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = na.ArticleID ORDER BY erd.StartDateTime) AND na.PublishDate BETWEEN @FromDate AND @ToDate) OR (nerd.StartDateTime <= @eToDate AND nerd.EndDateTime >= @eFromDate)) '
		SET @sqlcommand = @sqlcommand  + N'
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand  + N' AND arp.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
			END
		SET @sqlcommand = @sqlcommand  + N'
		)
) AS alr
OUTER APPLY 
(
	SELECT c.CategoryID AS "@id", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #ViewCategories AS uvc ON c.CategoryID = uvc.CategoryID
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID
	WHERE cl.ArticleID = alr.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')
) AS categories (CssCategoryClasses)
OUTER APPLY 
( 
	SELECT PointData AS GoogleMapData
	FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID
	WHERE mc.ArticleID = alr.ArticleID
) maps '
	 
IF @CategoryFilterType <> 0
SET @sqlcommand = @sqlcommand  + N'
OUTER APPLY 
( 
	SELECT TOP 1 tm.[TabID] AS LinkTabId, clink.NewsModuleID AS LinkModuleId
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl ON c.CategoryID = cl.CategoryID
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS clink ON clink.CategoryID = cl.CategoryID AND clink.SourceModuleID = @ModuleId
	INNER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON clink.NewsModuleID = tm.ModuleID
	WHERE c.ArticleID = alr.ArticleID
		AND cl.' + @sqlSharingPortalAll + '
	ORDER BY cl.Position
) link '

	SET @sqlcommand = @sqlcommand  + N'
	ORDER BY CombinedOrderBy; '

SET @sqlcommand = @sqlcommand + N'
IF OBJECT_ID(''tempdb..#UserInRoles'') IS NOT NULL
	DROP TABLE #UserInRoles;
IF OBJECT_ID(''tempdb..#ViewCategories'') IS NOT NULL
	DROP TABLE #ViewCategories;
IF OBJECT_ID(''tempdb..#ViewCategoriesWithFilter'') IS NOT NULL
	DROP TABLE #ViewCategoriesWithFilter;
IF OBJECT_ID(''tempdb..#FilterCategories'') IS NOT NULL
	DROP TABLE #FilterCategories; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#LocalizedCategories'') IS NOT NULL
		DROP TABLE #LocalizedCategories; '

IF @IsPortalSharing = 1
	SET @sqlcommand = @sqlcommand + N' DROP TABLE #SharingPortals;';

EXEC SP_EXECUTESQL @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalId = @PortalId
	,@UserId = @UserId
	,@ModuleId = @ModuleId
	,@AdminOrSuperUser = @AdminOrSuperUser
	,@FromDate = @FromDate
	,@ToDate = @ToDate
	,@eFromDate = @eFromDate
	,@eToDate = @eToDate
	,@DisplayType = @DisplayType
	,@LocaleCode = @LocaleCode
	,@IsSocialInstance = @IsSocialInstance
	,@FilterByDnnUserId = @FilterByDnnUserId
	,@FilterByDnnGroupId = @FilterByDnnGroupId
	,@ShowAllAuthors = @ShowAllAuthors
	,@CategoryFilterType = @CategoryFilterType
	,@HideUnlocalizedItems = @HideUnlocalizedItems
	,@SatellitePermissionsSource = @SatellitePermissionsSource
	,@PermissionsModuleId = @PermissionsModuleId
	,@FilterCategoryId = @FilterCategoryId
	,@EventsFilterType = @EventsFilterType
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsCalendarGetUpcomingEvents]
	@PortalId INT,
	@UserId INT,
	@ModuleId INT,
	@RowCount INT,
	@AdminOrSuperUser BIT  = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FilterByDnnUserId INT = 0,
	@FilterByDnnGroupId INT = 0,
	@ShowAllAuthors BIT = 1,
	@CategoryFilterType TINYINT = 0,
	@SatellitePermissionsSource TINYINT = 0,
	@PermissionsModuleId INT = 0,
	@HideUnlocalizedItems BIT = 0,
	@FilterCategoryId INT = NULL,
	@IsPortalSharing BIT = 0
AS
SET NOCOUNT ON;
DECLARE @paramList NVARCHAR(1000);
SET @paramList = N'
	@PortalId INT,
	@UserId INT,
	@ModuleId INT,
	@RowCount INT,
	@LocaleCode NVARCHAR(20),
	@FilterByDNNUserID INT,
	@FilterByDNNGroupID INT,
	@PermissionsModuleId INT,
	@FilterCategoryId INT = NULL'

DECLARE @sqlcommand NVARCHAR(MAX);
DECLARE @sqlSharingPortal NVARCHAR(300);
DECLARE @sqlSharingPortalAll NVARCHAR(300);

SET @sqlcommand = N'
SET NOCOUNT ON;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

DECLARE @EventsLocaleCode NVARCHAR(20);

IF @LocaleCode IS NULL
	SET @EventsLocaleCode = ''Default'';
ELSE
	SET @EventsLocaleCode = (SELECT @LocaleCode)

CREATE TABLE #UserInRoles (RoleID INT PRIMARY KEY);
CREATE TABLE #ViewCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #FilterCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #ViewCategoriesWithFilter (CategoryID INT PRIMARY KEY); '

IF @IsPortalSharing = 1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	CREATE TABLE #SharingPortals (PortalID INT PRIMARY KEY);
	INSERT INTO #SharingPortals
	SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleId;';

	SET @sqlSharingPortal = N' EXISTS (SELECT PortalID FROM #SharingPortals AS sp WHERE sp.PortalID = na.PortalID) ';
	SET @sqlSharingPortalAll = N'PortalID IN (SELECT PortalID FROM #SharingPortals) ';
END
ELSE
BEGIN
	SET @sqlSharingPortal = N' na.PortalID = @PortalId ';
	SET @sqlSharingPortalAll = N'PortalID = @PortalId ';
END

IF @UserId <> -1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #UserInRoles '

	IF @IsPortalSharing = 0
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] AS mp ON mp.SharingPortalID = r.PortalID
		WHERE mp.ModuleID = @ModuleId
			AND ur.UserID = @UserId
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
END

IF @AdminOrSuperUser = 1 OR @SatellitePermissionsSource = 0
BEGIN
	SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #ViewCategories
		SELECT c.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		WHERE c.' + @sqlSharingPortalAll
END
ELSE IF @UserId = -1
BEGIN
	IF @SatellitePermissionsSource = 1 OR EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleId AND PermissionsPMSource = 1)
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalId  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalId
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.PortalID = @PortalId
					AND rps.ModuleID IS NULL
					AND rps.RoleID IS NULL); '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.ModuleID = @PermissionsModuleId AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.PortalID = @PortalId
					AND rps.ModuleID = @PermissionsModuleId
					AND rps.RoleID IS NULL); '
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @IsPortalSharing = 1
	BEGIN -- only can be by module settings, roles from current portal!
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN (
				SELECT r.[RoleID]
				FROM {databaseOwner}[{objectQualifier}Roles] AS r
				INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
				WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
					AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
					AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate)
			) AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleId AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN (
				SELECT r.[RoleID]
				FROM {databaseOwner}[{objectQualifier}Roles] AS r
				INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
				WHERE r.PortalID = @PortalId AND ur.UserID = @UserId
					AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
					AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate)
			) AS uir ON rps.RoleID = uir.RoleID 
			WHERE rps.ModuleID = @PermissionsModuleId
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId; '
	END
	ELSE
	IF @SatellitePermissionsSource = 1 OR EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleId AND PermissionsPMSource = 1)
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalId AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.PortalID = @PortalId AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalId;
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.PortalID = @PortalId AND rps.ModuleID IS NULL
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.PortalID = @PortalId AND ups.ModuleID IS NULL; '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		IF EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleId AND rps.ShowAllCategories = 1
		) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId AND ups.ShowAllCategories = 1
		)
			INSERT INTO #ViewCategories
			SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE ' + @sqlSharingPortalAll + '
		ELSE
			INSERT INTO #ViewCategories
			SELECT rpsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID 
			WHERE rps.ModuleID = @PermissionsModuleId
			UNION
			SELECT upsc.[CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserId AND ups.ModuleID = @PermissionsModuleId; '
	END
END

IF @FilterCategoryID IS NOT NULL -- filtrira se po jednoj kategoriji
BEGIN
	SET @sqlcommand = @sqlcommand  + N'
	INSERT INTO #FilterCategories SELECT @FilterCategoryId; '
END
ELSE IF @CategoryFilterType = 0 -- 0 All categories
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT [CategoryID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
	WHERE ' + @sqlSharingPortalAll
END
ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT [CategoryID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
	WHERE ModuleID = @ModuleId; '
ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	;WITH hierarchy AS(
		SELECT cl.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		WHERE EXISTS (
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
			WHERE ci.ModuleID = @ModuleId
				AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
		)
		AND cl.' + @sqlSharingPortalAll + '
		UNION ALL
		SELECT cl.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
		INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
	)
	INSERT INTO #FilterCategories
	SELECT DISTINCT CategoryID
	FROM hierarchy; '
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategoriesWithFilter
SELECT vc.CategoryID
FROM #ViewCategories AS vc
INTERSECT
SELECT fc.CategoryID
FROM #FilterCategories AS fc; '

DECLARE @FilterBySocialGroup BIT;
SET @FilterBySocialGroup = 0;
DECLARE @FilterAuthorOrAuthors BIT;
SET @FilterAuthorOrAuthors = 0;

IF @IsSocialInstance = 1
BEGIN
	IF @FilterByDNNGroupID <> 0
	BEGIN	
		SET @FilterBySocialGroup = 1;
	END
END
ELSE
BEGIN
	IF @ShowAllAuthors = 0
	BEGIN
		SET @FilterAuthorOrAuthors = 1;
		SET @sqlcommand = @sqlcommand + N'
		DECLARE @TempAuthorsIDList TABLE (UserID INT PRIMARY KEY);
		INSERT INTO @TempAuthorsIDList
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleId
		UNION 
		SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
		WHERE mgi.ModuleID = @ModuleId '
	END
END

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #LocalizedCategories (Id INT PRIMARY KEY, Name NVARCHAR(200), CategoryText NVARCHAR(MAX), CategoryURL NVARCHAR(1500));
	INSERT INTO #LocalizedCategories
	SELECT c.CategoryID AS Id,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryName ELSE cl.Title END AS Name,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryText ELSE cl.CategoryText END AS CategoryText,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryURL ELSE cl.CategoryURL END AS CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.CategoryID = cl.CategoryID AND cl.LocaleCode = @LocaleCode
	WHERE c.CategoryID IN (SELECT CategoryID FROM #ViewCategories) '

SET @sqlcommand = @sqlcommand  + N'
IF @RowCount = 0 OR @RowCount > 100
	SET @RowCount = 100;

;WITH MainFilters AS(
	SELECT DISTINCT na.[ArticleID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #FilterCategories) '
	IF @HideUnlocalizedItems = 1 SET @sqlcommand = @sqlcommand  + N' INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl ON ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode '
	IF @FilterByDNNGroupID <> 0 
		SET @sqlcommand = @sqlcommand  + N'
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserId, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey '
	ELSE IF @FilterByDNNUserID <> 0
		SET @sqlcommand = @sqlcommand  + N'
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss ON nss.ArticleID = na.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserId, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey '
	SET @sqlcommand = @sqlcommand  + N'
	WHERE ' + @sqlSharingPortal + N'
		AND na.EventArticle = 1
		AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '
		IF @LocaleCode IS NULL SET @sqlcommand = @sqlcommand  + N' AND na.HideDefaultLocale = 0 '
		IF @FilterByDNNUserID <> 0 SET @sqlcommand = @sqlcommand  + N' AND na.UserID = @FilterByDNNUserID '
		ELSE IF @ShowAllAuthors = 0 SET @sqlcommand = @sqlcommand  + N' AND na.UserID IN (SELECT UserID FROM @TempAuthorsIDList) '
	SET @sqlcommand = @sqlcommand  + N'
)'

SET @sqlcommand = @sqlcommand + N'
SELECT TOP (@RowCount)
alr.*,
CASE WHEN alr.RecurringID IS NULL
THEN
	NULL
ELSE
	(
		SELECT [Summary]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringContent]
		WHERE ArticleID = alr.ArticleID AND RecurringID = alr.RecurringID AND LocaleCode = @EventsLocaleCode
	)
END AS CustomSummary,
categories.CssCategoryClasses,
maps.GoogleMapData, '

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color", c.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.CategoryID = ci.CategoryID
	WHERE ci.ArticleID = alr.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategories)
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '
ELSE
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", lc.Name AS "@name", lc.CategoryURL AS "@url", c.Color AS "@color", lc.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #LocalizedCategories AS lc ON c.CategoryID = lc.Id
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON ci.CategoryID = c.CategoryID
	WHERE ci.ArticleID = alr.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '

If @CategoryFilterType <> 0
		SET @sqlcommand = @sqlcommand  + N'link.LinkTabId, link.LinkModuleId '
ELSE
	SET @sqlcommand = @sqlcommand  + N'NULL AS LinkTabId, NULL AS LinkModuleId'

SET @sqlcommand = @sqlcommand  + N'
FROM ( '
IF @LocaleCode IS NULL
	SET @sqlcommand = @sqlcommand  + N'
	SELECT na.[ArticleID],na.[PortalID],na.[UserID],na.[Title],na.[SubTitle],na.[Summary],na.[Article],na.[ArticleImage],na.[DateAdded],na.[LastModified],na.[PublishDate]
		,na.[ExpireDate],na.[Approved],na.[Featured],na.[NumberOfViews],na.[RatingValue],na.[RatingCount],na.[AllowComments],na.[Active]
		,na.[TitleLink],na.[DetailType],na.[DetailTypeData],na.[DetailsTemplate],na.[DetailsTheme],na.[GalleryPosition],na.[GalleryDisplayType]
		,na.[ShowMainImage],na.[ShowMainImageFront],na.[CommentsTheme],na.[ArticleImageFolder],na.[NumberOfComments]
		,na.[ArticleImageSet],na.[MetaDecription],na.[MetaKeywords],na.[DisplayStyle],na.[DetailTarget]
		,na.[ArticleFromRSS],na.[HasPermissions],na.[EventArticle],na.[DetailMediaType],na.[DetailMediaData],na.[AuthorAliasName],na.[ShowGallery],na.[ArticleGalleryID]
		,na.[MainImageTitle],na.[MainImageDescription],na.[CFGroupeID],na.[ContactEmail],ne.[WhloeDay],ne.[ShowEndDate],
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[StartDateTime] ELSE ne.[StartDate] END AS StartDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[EndDateTime] ELSE ne.[EndDate] END AS EndDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[RecurringID] ELSE NULL END AS RecurringID '
ELSE
	SET @sqlcommand = @sqlcommand + N'
	SELECT na.[ArticleID],na.[PortalID],na.[UserID]
		,CASE WHEN cl.ArticleID IS NULL THEN na.[Title] ELSE cl.[Title] END AS Title
		,CASE WHEN cl.ArticleID IS NULL THEN na.[SubTitle] ELSE cl.[SubTitle] END AS SubTitle
		,CASE WHEN cl.ArticleID IS NULL THEN na.[Summary] ELSE cl.[Summary] END AS Summary
		,CASE WHEN cl.ArticleID IS NULL THEN na.[Article] ELSE cl.[Article] END AS Article
		,na.[ArticleImage],na.[DateAdded],na.[LastModified],na.[PublishDate]
		,na.[ExpireDate],na.[Approved],na.[Featured],na.[NumberOfViews],na.[RatingValue],na.[RatingCount],na.[AllowComments],na.[Active]
		,CASE WHEN cl.ArticleID IS NULL THEN na.[TitleLink] ELSE cl.[clTitleLink] END AS TitleLink
		,na.[DetailType]
		,CASE WHEN cl.ArticleID IS NULL THEN na.[DetailTypeData] ELSE cl.[DetailTypeData] END AS DetailTypeData
		,na.[DetailsTemplate],na.[DetailsTheme],na.[GalleryPosition],na.[GalleryDisplayType]
		,na.[ShowMainImage],na.[ShowMainImageFront],na.[CommentsTheme],na.[ArticleImageFolder],na.[NumberOfComments]
		,na.[ArticleImageSet]
		,CASE WHEN cl.ArticleID IS NULL THEN na.[MetaDecription] ELSE cl.[MetaDecription] END AS MetaDecription
		,CASE WHEN cl.ArticleID IS NULL THEN na.[MetaKeywords] ELSE cl.[MetaKeywords] END AS MetaKeywords
		,na.[DisplayStyle],na.[DetailTarget]
		,na.[ArticleFromRSS],na.[HasPermissions],na.[EventArticle],na.[DetailMediaType],na.[DetailMediaData],na.[AuthorAliasName],na.[ShowGallery],na.[ArticleGalleryID]
		,CASE WHEN cl.ArticleID IS NULL THEN na.[MainImageTitle] ELSE cl.[MainImageTitle] END AS MainImageTitle
		,CASE WHEN cl.ArticleID IS NULL THEN na.[MainImageDescription] ELSE cl.[MainImageDescription] END AS MainImageDescription
		,na.[CFGroupeID],na.[ContactEmail],ne.[WhloeDay],ne.[ShowEndDate],
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[StartDateTime] ELSE ne.[StartDate] END AS StartDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[EndDateTime] ELSE ne.[EndDate] END AS EndDate,
		CASE WHEN ne.[Recurring] = 1 THEN nerd.[RecurringID] ELSE NULL END AS RecurringID ';
SET @sqlcommand = @sqlcommand + N'
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON na.ArticleID = ne.ArticleID
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND
		((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.StartDateTime)) OR
		(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.StartDateTime))) ' 
IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON na.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';

SET @sqlcommand = @sqlcommand + N'
	WHERE na.ArticleID IN (
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
		WHERE na.HasPermissions = 0
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate)) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
		SET @sqlcommand = @sqlcommand + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND
			((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.StartDateTime)) OR
			(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.StartDateTime))) '
		SET @sqlcommand = @sqlcommand + N'
		WHERE na.HasPermissions = 0
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
		SET @sqlcommand = @sqlcommand + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate)) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand + N' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
				IF @UserId = -1 SET @sqlcommand = @sqlcommand + N' AND aup.UserID IS NULL '
				ELSE SET @sqlcommand = @sqlcommand + N' AND aup.UserID = @UserId '
			END
		SET @sqlcommand = @sqlcommand + N'
		UNION ALL
		SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND
			((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.StartDateTime)) OR
			(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.StartDateTime)))
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0
			BEGIN
				SET @sqlcommand = @sqlcommand + N' AND aup.Show = 1 AND na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) '
				IF @UserId = -1 SET @sqlcommand = @sqlcommand + N' AND aup.UserID IS NULL '
				ELSE SET @sqlcommand = @sqlcommand + N' AND aup.UserID = @UserId '
			END
		SET @sqlcommand = @sqlcommand + N'
		UNION
		SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM #FilterCategories)
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 0 '
	
		SET @sqlcommand = @sqlcommand + N'
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 0
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters)
			AND ((ne.StartDate >= @CurrentDate) OR (ne.StartDate <= @CurrentDate AND ne.EndDate >= @CurrentDate)) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND (na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles)) '
		SET @sqlcommand = @sqlcommand + N'
		UNION ALL
		SELECT DISTINCT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne ON ne.ArticleID = na.ArticleID AND ne.Recurring = 1
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ne.ArticleID = nerd.ArticleID AND ne.Recurring = 1 AND
			((ne.StartDate >= @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID ORDER BY erd.StartDateTime)) OR
			(ne.StartDate < @CurrentDate AND nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime >= @CurrentDate ORDER BY erd.StartDateTime))) '		
		SET @sqlcommand = @sqlcommand + N'
		WHERE na.HasPermissions = 1
			AND ne.Recurring = 1
			AND na.ArticleID IN (SELECT ArticleID FROM MainFilters) '
			IF @AdminOrSuperUser = 0 SET @sqlcommand = @sqlcommand + N' AND (na.Approved = 1 AND (na.Active = 1 OR na.UserID = @UserId) AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles)) '
		SET @sqlcommand = @sqlcommand + N'
	)
) AS alr
OUTER APPLY 
(
	SELECT c.CategoryID AS "@id", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #ViewCategories AS uvc ON c.CategoryID = uvc.CategoryID
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cl ON uvc.CategoryID = cl.CategoryID
	WHERE cl.ArticleID = alr.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')
) AS categories (CssCategoryClasses)
OUTER APPLY 
( 
	SELECT PointData AS GoogleMapData
	FROM {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS md
	INNER JOIN  {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS mc ON md.GoogleMapID = mc.GoogleMapID
	WHERE mc.ArticleID =  alr.ArticleID
) maps '

IF @CategoryFilterType <> 0
	SET @sqlcommand = @sqlcommand  + N'
	OUTER APPLY 
	( 
		SELECT TOP 1 tm.[TabID] AS LinkTabId, clink.NewsModuleID AS LinkModuleId
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl ON c.CategoryID = cl.CategoryID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] AS clink ON clink.CategoryID = cl.CategoryID AND clink.SourceModuleID = @ModuleId
		INNER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON clink.NewsModuleID = tm.ModuleID
		WHERE c.ArticleID = alr.ArticleID
			AND cl.' + @sqlSharingPortalAll + '
		ORDER BY cl.Position
	) link '

SET @sqlcommand = @sqlcommand  + N'
ORDER BY alr.StartDate; '

SET @sqlcommand = @sqlcommand + N'
IF OBJECT_ID(''tempdb..#UserInRoles'') IS NOT NULL
	DROP TABLE #UserInRoles;
IF OBJECT_ID(''tempdb..#ViewCategories'') IS NOT NULL
	DROP TABLE #ViewCategories;
IF OBJECT_ID(''tempdb..#ViewCategoriesWithFilter'') IS NOT NULL
	DROP TABLE #ViewCategoriesWithFilter;
IF OBJECT_ID(''tempdb..#FilterCategories'') IS NOT NULL
	DROP TABLE #FilterCategories; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#LocalizedCategories'') IS NOT NULL
		DROP TABLE #LocalizedCategories; '

IF @IsPortalSharing = 1
	SET @sqlcommand = @sqlcommand + N' DROP TABLE #SharingPortals;';

EXEC SP_EXECUTESQL @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalId = @PortalId
	,@UserId  = @UserId
	,@ModuleId = @ModuleId
	,@RowCount = @RowCount
	,@LocaleCode = @LocaleCode
	,@FilterByDNNUserID = @FilterByDNNUserID
	,@FilterByDNNGroupID = @FilterByDNNGroupID
	,@PermissionsModuleId = @PermissionsModuleId
	,@FilterCategoryId = @FilterCategoryId
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetEvents]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetEvents]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetArticles]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetArticles]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContent]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContent]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContent]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContent] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetAllContent]
	@PortalID INT,
	@ModuleID INT,
	@UserID INT,
	@OrderByColumnName NVARCHAR(30),
	@OrderByDirection NVARCHAR(4),
	@OrderByCustomFieldID INT = NULL,
	@ItemsFrom INT,
	@ItemsTo INT,
	@DateRange BIT = 0,
	@DateRangeType TINYINT = 0,
	@StartDate DATETIME = NULL,
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@eFromDate DATETIME = NULL,
	@eToDate DATETIME = NULL,
	@OnlyOneCategory INT = NULL,
	@Featured BIT = 0,
	@ShowAllAuthors BIT = 1,
	@FilterByAuthor INT = 0,
	@FilterByGroupID INT = 0,
	@FilterByTags BIT = 0,
	@FilterByArticles BIT = 0,
	@FilterByDNNUserID INT = 0,
	@FilterByDNNGroupID INT = 0,
	@EditOnlyAsOwner BIT = 0,
	@UserCanApprove BIT = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,	
	@FirstOrderBy NVARCHAR(20) = NULL,
	@Perm_ViewAllCategores BIT = 0,
	@Perm_EditAllCategores BIT = 0,
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 1,
	@PermissionSettingsSource BIT = 1,
	@FillterSettingsSource BIT = 1,
	@OuterModuleID INT = NULL,
	@HideUnlocalizedItems BIT = 0,
	@NewsFilterCategories NVARCHAR(1000) = NULL,
	@NewsFilterAuthors NVARCHAR(1000) = NULL,
	@NewsFilterGroups NVARCHAR(1000) = NULL,
	@ListArchive BIT = 0,
	@FilterByTagID INT = NULL,
	@RestrictionByDateRange SMALLINT = NULL,
	@AdminFuturePostsVisible BIT = 0,
	@UseAndOperator BIT = NULL,
	@GoogleMapsFilter TINYINT = NULL,
	@FilterByCustomFields BIT = 0,
	@IsPortalSharing BIT = 0,
	@CanEditAllContent BIT = 0,
	@QueryPermissionsPerArticles BIT = 1,
	@QueryModulePermissions BIT = 1
--WITH RECOMPILE
AS
SET NOCOUNT ON;
DECLARE @SecondOrderBy NVARCHAR(30);
SET @SecondOrderBy = N', inner_n.ArticleID ';
DECLARE @paramList NVARCHAR(2000);
SET @paramList = N'
	 @PortalID INT
	,@ModuleID INT
	,@UserID INT
	,@OrderByCustomFieldID INT
	,@ItemsFrom INT
	,@ItemsTo INT
	,@DateRange BIT
	,@DateRangeType TINYINT
	,@StartDate DATETIME
	,@FromDate DATETIME
	,@ToDate DATETIME
	,@eFromDate DATETIME
	,@eToDate DATETIME
	,@OnlyOneCategory INT
	,@Featured BIT
	,@ShowAllAuthors BIT
	,@FilterByAuthor INT
	,@FilterByGroupID INT
	,@FilterByArticles BIT
	,@FilterByDNNUserID INT
	,@FilterByDNNGroupID INT
	,@EditOnlyAsOwner BIT
	,@UserCanApprove BIT
	,@LocaleCode NVARCHAR(20)
	,@IsSocialInstance BIT
	,@FirstOrderBy NVARCHAR(20)
	,@Perm_ViewAllCategores BIT
	,@Perm_EditAllCategores BIT
	,@AdminOrSuperUser BIT
	,@CategoryFilterType TINYINT
	,@PermissionSettingsSource BIT
	,@FillterSettingsSource BIT
	,@OuterModuleID INT
	,@HideUnlocalizedItems BIT
	,@NewsFilterCategories NVARCHAR(1000)
	,@NewsFilterAuthors NVARCHAR(1000)
	,@NewsFilterGroups NVARCHAR(1000)
	,@ListArchive BIT
	,@FilterByTagID INT
	,@RestrictionByDateRange SMALLINT
	,@IsPortalSharing BIT
	,@CanEditAllContent BIT
	,@QueryPermissionsPerArticles BIT
	,@QueryModulePermissions BIT';

DECLARE @sqlCommand NVARCHAR(MAX);
DECLARE @MainContentFilter NVARCHAR(MAX);
DECLARE @TopInnerFilter NVARCHAR(MAX);
DECLARE @sqlSharingPortal NVARCHAR(300);
DECLARE @sqlSharingPortalAll NVARCHAR(300);

SET @sqlCommand = N'
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

CREATE TABLE #UserInRoles (RoleID INT PRIMARY KEY);
CREATE TABLE #ViewCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #FilterCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #ViewCategoriesWithFilter (CategoryID INT PRIMARY KEY); '

IF @IsPortalSharing = 1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	CREATE TABLE #SharingPortals (PortalID INT NOT NULL PRIMARY KEY);
	INSERT INTO #SharingPortals
	SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID;';

	SET @sqlSharingPortal = N' EXISTS (SELECT PortalID FROM #SharingPortals AS sp WHERE sp.PortalID = na.PortalID) ';
	SET @sqlSharingPortalAll = N'PortalID IN (SELECT PortalID FROM #SharingPortals) ';
END
ELSE
BEGIN
	SET @sqlSharingPortal = N' na.PortalID = @PortalID ';
	SET @sqlSharingPortalAll = N'PortalID = @PortalID ';
END

IF @UserID <> -1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #UserInRoles '

	IF @IsPortalSharing = 0
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		WHERE r.PortalID = @PortalID
			AND ur.UserID = @UserID
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		WHERE r.PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID)
			AND ur.UserID = @UserID
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate) '
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategories '

IF @AdminOrSuperUser = 1 OR @Perm_ViewAllCategores = 1 OR @QueryModulePermissions = 0
BEGIN
	IF @IsPortalSharing = 1
		SET @sqlCommand = @sqlCommand + N'
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID); '
	ELSE
	SET @sqlCommand = @sqlCommand + N'
		SELECT c.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		WHERE c.PortalID = @PortalID; '
END
ELSE IF @UserID = -1
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal - ako je portal sharing to bi trebalo biti false
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		WHERE rpsc.PremissionSettingsID IN (
			SELECT PremissionSettingsID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			WHERE rps.PortalID = @PortalID
				AND rps.ModuleID IS NULL
				AND rps.RoleID IS NULL); '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		WHERE rpsc.PremissionSettingsID IN (
			SELECT PremissionSettingsID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			WHERE rps.PortalID = @PortalID
				AND rps.ModuleID = @ModuleID
				AND rps.RoleID IS NULL); '
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
		UNION
		SELECT upsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL; '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID 
		WHERE rps.ModuleID = @ModuleID
		UNION
		SELECT upsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.ModuleID = @ModuleID; '
	END
END

IF @NewsFilterCategories IS NOT NULL
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT fc.KeyID
	FROM {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterCategories) AS fc; '
ELSE IF @OnlyOneCategory IS NOT NULL -- filtrira se po jednoj kategoriji
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT @OnlyOneCategory; '
ELSE IF @CategoryFilterType = 0 -- 0 All categories
	IF @IsPortalSharing = 1
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID = @PortalID; '
ELSE IF @OuterModuleID IS NOT NULL
BEGIN
	IF @CategoryFilterType = 1 -- 1 - SELECTion
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
		WHERE ModuleID = @OuterModuleID; '
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		IF @IsPortalSharing = 1
			SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
					WHERE ci.ModuleID = @OuterModuleID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID)
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
		ELSE
		SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
					WHERE ci.ModuleID = @OuterModuleID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID = @PortalID
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
	END
END
ELSE
BEGIN
	IF @CategoryFilterType = 1 -- 1 - SELECTion
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
			SET @sqlCommand = @sqlCommand + N'
			INSERT INTO #FilterCategories
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems]
			WHERE PortalID = @PortalID; '
		ELSE -- module
			SET @sqlCommand = @sqlCommand + N'
			INSERT INTO #FilterCategories
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
			WHERE ModuleID = @ModuleID; '
	END
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
		BEGIN
			SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS ci
					WHERE ci.PortalID = @PortalID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID = @PortalID
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
		END
		ELSE -- module
		BEGIN
			IF @IsPortalSharing = 1
				SET @sqlCommand = @sqlCommand + N'
				;WITH hierarchy AS(
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE EXISTS (
						SELECT [CategoryID]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
						WHERE ci.ModuleID = @ModuleID
							AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
					)
					AND cl.PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID)
					UNION ALL
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
				)
				INSERT INTO #FilterCategories
				SELECT DISTINCT CategoryID
				FROM hierarchy; '
			ELSE
				SET @sqlCommand = @sqlCommand + N'
				;WITH hierarchy AS(
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE EXISTS (
						SELECT [CategoryID]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
						WHERE ci.ModuleID = @ModuleID
							AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
					)
					AND cl.PortalID = @PortalID
					UNION ALL
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
				)
				INSERT INTO #FilterCategories
				SELECT DISTINCT CategoryID
				FROM hierarchy; '
		END
	END
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategoriesWithFilter
SELECT vc.CategoryID
FROM #ViewCategories AS vc
INTERSECT
SELECT fc.CategoryID
FROM #FilterCategories AS fc; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #LocalizedCategories (Id INT PRIMARY KEY, Name NVARCHAR(200), CategoryText NVARCHAR(MAX), CategoryURL NVARCHAR(1500)); '

IF @CanEditAllContent = 0 AND @QueryModulePermissions = 1
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #UserEditCategories (CategoryID INT PRIMARY KEY);
	INSERT INTO #UserEditCategories
	SELECT CategoryID
	FROM {databaseOwner}[{objectQualifier}EDS_EditPermissions] (@PortalID,@ModuleID,@UserID,@AdminOrSuperUser,@Perm_EditAllCategores,@PermissionSettingsSource,@CurrentDate)

	DECLARE @HasEditCategories BIT;

	IF EXISTS (SELECT 1 FROM #UserEditCategories)
		SET @HasEditCategories = 1;
	ELSE
		SET @HasEditCategories = 0; '

IF @NewsFilterCategories IS NULL
BEGIN
	IF @OuterModuleID IS NULL AND @FilterByArticles = 1
	SET @sqlcommand = @sqlcommand + N' 
		DECLARE @FilterArticlesTable TABLE (ArticleID INT PRIMARY KEY);
		IF @FillterSettingsSource = 1
			INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByArticles] WHERE FilterPortalID = @PortalID;
		ELSE
			INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByArticles] WHERE FilterModuleID = @ModuleID; '

	IF @FilterByTagID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		DECLARE @FilterTagsTable TABLE (TagID INT PRIMARY KEY);
		INSERT INTO @FilterTagsTable SELECT @FilterByTagID '
		SET @FilterByTags = 1
	END
	ELSE IF @OuterModuleID IS NULL AND @FilterByTags = 1
		SET @sqlcommand = @sqlcommand + N' 
		DECLARE @FilterTagsTable TABLE (TagID INT PRIMARY KEY);
		IF @FillterSettingsSource = 1
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByTagID] WHERE FilterPortalID = @PortalID;
		ELSE
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] WHERE FilterModuleID = @ModuleID; '
END

DECLARE @sqlAuthors NVARCHAR(2000);

IF @NewsFilterAuthors IS NULL AND @NewsFilterGroups IS NULL
BEGIN
	IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0 AND @FilterByAuthor <> 0
			SET @sqlAuthors = N' 
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
				WHERE ap.[AuthorProfileID] = @FilterByAuthor; '
	END
	ELSE
	BEGIN
		IF @OuterModuleID IS NOT NULL AND @ShowAllAuthors = 0
			SET @sqlAuthors = N'
			SELECT mai.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai
			WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT ap.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID; '
		ELSE
		BEGIN
			IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0
			BEGIN
				IF @FillterSettingsSource = 1
					SET @sqlAuthors = N'
					SELECT pai.[UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai
					WHERE pai.PortalID = @PortalID
					UNION 
					SELECT [UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID; '
				ELSE
					SET @sqlAuthors = N'
					SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleID
					UNION 
					SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID; '
			END
			ELSE IF @FilterByAuthor <> 0
				SET @sqlAuthors = N'
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
				WHERE ap.[AuthorProfileID] = @FilterByAuthor; '
			ELSE IF @FilterByGroupID <> 0
				SET @sqlAuthors = N'
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID; '
		END
	END
END
ELSE
BEGIN
	IF @NewsFilterAuthors IS NOT NULL AND @NewsFilterGroups IS NOT NULL
		SET @sqlAuthors = N'
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID
		WHERE ap.' + @sqlSharingPortalAll + '
		UNION
		SELECT ap.[UserID] 
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.' + @sqlSharingPortalAll + ' '
	ELSE IF @NewsFilterAuthors IS NOT NULL
		SET @sqlAuthors = N' 
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID
		WHERE ap.' + @sqlSharingPortalAll + ' '
	ELSE IF @NewsFilterGroups IS NOT NULL
		SET @sqlAuthors = N' 
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.' + @sqlSharingPortalAll + ' '
END

IF @sqlAuthors IS NOT NULL
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CREATE TABLE #FilterAuthors (UserID INT NOT NULL PRIMARY KEY);
	INSERT INTO #FilterAuthors ' + @sqlAuthors
END

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	INSERT INTO #LocalizedCategories
	SELECT c.CategoryID AS Id,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryName ELSE cl.Title END AS Name,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryText ELSE cl.CategoryText END AS CategoryText,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryURL ELSE cl.CategoryURL END AS CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.CategoryID = cl.CategoryID AND cl.LocaleCode = @LocaleCode
	WHERE c.CategoryID IN (SELECT CategoryID FROM #ViewCategories) '
	
SET @sqlcommand = @sqlcommand + N' DECLARE @AllContentCount INT'

SET @TopInnerFilter = N' WHERE ' + @sqlSharingPortal;

	IF @GoogleMapsFilter = 2
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS gmc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS gmd ON gmd.GoogleMapID = gmc.GoogleMapID AND gmd.PointData <> N''''
			WHERE gmc.ArticleID = na.ArticleID
		) '
	ELSE IF @GoogleMapsFilter = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS gmc
			WHERE gmc.ArticleID = na.ArticleID
		) '

	IF @HideUnlocalizedItems = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl
			WHERE ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode
		) '

	IF @FilterByDNNGroupID <> 0 
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT nss.ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = nss.ArticleID
			WHERE nss.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		) '
	ELSE IF @FilterByDNNUserID <> 0
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT nss.ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE nss.ArticleID = na.ArticleID
		) '

	IF @FilterByTags = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti
			INNER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE ti.ArticleID = na.ArticleID
		) '

	IF @FilterByArticles = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM @FilterArticlesTable AS fba
			WHERE fba.ArticleID = na.ArticleID
		) '

	IF @AdminFuturePostsVisible = 1 AND @QueryModulePermissions = 1
	BEGIN
		IF @RestrictionByDateRange IS NOT NULL 
			SET @TopInnerFilter = @TopInnerFilter + N' AND na.PublishDate >= DATEADD(day,-@RestrictionByDateRange,@CurrentDate) AND na.[ExpireDate] >= @CurrentDate '
		ELSE
			SET @TopInnerFilter = @TopInnerFilter + N' AND @CurrentDate <= na.[ExpireDate] '
	END
	ELSE IF @RestrictionByDateRange IS NOT NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.PublishDate BETWEEN DATEADD(day,-@RestrictionByDateRange,@CurrentDate) AND @CurrentDate AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '
	ELSE
		SET @TopInnerFilter = @TopInnerFilter + N' AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '

	IF @LocaleCode IS NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.HideDefaultLocale = 0 '
	IF @Featured = 1
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.Featured = 1 '

	IF @FilterByDNNUserID <> 0
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.UserID = @FilterByDNNUserID '
	ELSE IF @sqlAuthors IS NOT NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.UserID IN (SELECT UserID FROM #FilterAuthors) '

	IF @QueryModulePermissions = 0
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.Approved = 1 AND na.Active = 1 '
	ELSE IF @CanEditAllContent = 0
	BEGIN
		IF @UserCanApprove = 0
			SET @TopInnerFilter = @TopInnerFilter + N' AND (na.UserID = @UserID OR (na.Active = 1 AND na.Approved = 1)) '
		ELSE
			SET @TopInnerFilter = @TopInnerFilter + N' AND (na.UserID = @UserID OR na.Active = 1) '
	END

DECLARE @CleanOrderColumnWithDirection NVARCHAR(35);

IF @OrderByCustomFieldID IS NOT NULL
BEGIN
	DECLARE @ControlTypeID INT;
	SELECT @ControlTypeID = [ControlTypeID] FROM {databaseOwner}[{objectQualifier}EasyDNNfields] WHERE CustomFieldID = @OrderByCustomFieldID AND IsOrderable = 1;
	IF @ControlTypeID IS NOT NULL
	BEGIN
		SELECT @OrderByColumnName =
			CASE @ControlTypeID
				WHEN 1 THEN N'[Text]'
				WHEN 3 THEN N'[Int]'
				WHEN 4 THEN N'[Decimal]'
				WHEN 5 THEN N'[Decimal]'
				WHEN 6 THEN N'[Text]'
				WHEN 9 THEN N'[DateTime]'
				WHEN 10 THEN N'[Text]'
				ELSE NULL
			END
		IF @OrderByColumnName IS NULL
		BEGIN
			SET @OrderByCustomFieldID = NULL;
			SET @OrderByColumnName = N'[PublishDate]';
		END
	END
	ELSE
	BEGIN
		SET @OrderByCustomFieldID = NULL;
		SET @OrderByColumnName = N'[PublishDate]';
	END
END
IF @OrderByColumnName = N'NEWID()'
	SET @CleanOrderColumnWithDirection = @OrderByColumnName
ELSE
	SET @CleanOrderColumnWithDirection = @OrderByColumnName + N' ' + @OrderByDirection;

IF @FilterByCustomFields = 1
BEGIN
	DECLARE @CFFilterQuery NVARCHAR(MAX);
	DECLARE @FiltersCountSimple INT;
	DECLARE @FiltersCountMulti INT;

	DECLARE @CFFilterTableSimple TABLE(
		RowID INT PRIMARY KEY IDENTITY(1,1),
		CFWhereRoule NVARCHAR(630)
	)
	DECLARE @CFFilterTableMulti TABLE(
		RowID INT PRIMARY KEY IDENTITY(1,1),
		ElementsCount INT NOT NULL ,
		LogicalOperator NVARCHAR(10) NOT NULL,
		CFWhereRoule NVARCHAR(MAX) NOT NULL
	)

	IF @FillterSettingsSource = 1
	BEGIN
		INSERT INTO @CFFilterTableSimple
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] WHERE PortalID = @PortalID;
		SET @FiltersCountSimple = @@ROWCOUNT;
		
		INSERT INTO @CFFilterTableMulti
		SELECT ElementsCount,LogicalOperator, CFQueryRoule FROM (
			SELECT mv.Id,mv.LogicalOperator,(SELECT COUNT(FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id]) AS ElementsCount, 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND cf.FieldElementID IN (' + STUFF((SELECT ',' + STR(fme.FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id] FOR XML PATH('')), 1, 1, '') + ')' AS CFQueryRoule
			FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] AS mv
			WHERE mv.[PortalID] = @PortalID
		) AS AllCfData WHERE EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.MultiCFId = AllCfData.Id)
		SET @FiltersCountMulti = @@ROWCOUNT;
	END
	ELSE
	BEGIN
		INSERT INTO @CFFilterTableSimple
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] WHERE ModuleID = @ModuleID;
		SET @FiltersCountSimple = @@ROWCOUNT;
		
		INSERT INTO @CFFilterTableMulti
		SELECT ElementsCount,LogicalOperator, CFQueryRoule FROM (
			SELECT mv.Id,mv.LogicalOperator,(SELECT COUNT(FieldElementID)
				FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme
				WHERE fme.[MultiCFId] = mv.[Id]) AS ElementsCount, 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND cf.FieldElementID IN (' + STUFF((SELECT ',' + STR(fme.FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id] FOR XML PATH('')), 1, 1, '') + ')' AS CFQueryRoule
			FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] AS mv
			WHERE mv.[ModuleID] = @ModuleID
		) AS AllCfData WHERE EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.MultiCFId = AllCfData.Id)
		SET @FiltersCountMulti = @@ROWCOUNT;
	END
	
	IF @FiltersCountMulti > 0 OR @FiltersCountSimple > 0
	BEGIN
		DECLARE @CurrentRow INT;
		DECLARE @ElementsCount INT;
		DECLARE @LogicalOperator NVARCHAR(10);

		SET @CFFilterQuery = N'SELECT CFFilteredArticles.ArticleID FROM (';
	
		IF @FiltersCountMulti > 0
		BEGIN	
			SET @CurrentRow = 0;
			DECLARE @FilterValueMulti NVARCHAR(MAX);
			WHILE @CurrentRow < @FiltersCountMulti
			BEGIN
				SET @CurrentRow = @CurrentRow + 1;
				SELECT @ElementsCount = ElementsCount, @LogicalOperator = LogicalOperator, @FilterValueMulti = CFWhereRoule FROM @CFFilterTableMulti WHERE RowID = @CurrentRow;

				IF @LogicalOperator = N'AND'
				BEGIN
					SET @CFFilterQuery = @CFFilterQuery +
N'SELECT ArticleID FROM (
	  SELECT ArticleID, ROW_NUMBER() OVER (PARTITION BY cf.[ArticleID] ORDER BY cf.[ArticleID] DESC ) AS Recency
	  FROM {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] AS cf
	  WHERE ' + @FilterValueMulti + '
) AS OnlyWithGoogleMaps
WHERE Recency >= ' + STR(@ElementsCount) + ' '
				END
				ELSE
				BEGIN
					SET @CFFilterQuery = @CFFilterQuery +
N'SELECT n.[ArticleID]
FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] AS cf ON cf.ArticleID = n.ArticleID
WHERE ' + @FilterValueMulti + ' '
				END
				
			IF @CurrentRow < @FiltersCountMulti OR @FiltersCountSimple > 0
				SET @CFFilterQuery = @CFFilterQuery + N' INTERSECT '
			END
		END
	
		IF @FiltersCountSimple > 0
		BEGIN
			SET @CurrentRow = 0;
			DECLARE @FilterValueSimple NVARCHAR(630);
			WHILE @CurrentRow < @FiltersCountSimple
			BEGIN
				SET @CurrentRow = @CurrentRow + 1;
				SELECT @FilterValueSimple = CFWhereRoule FROM @CFFilterTableSimple WHERE RowID = @CurrentRow;

				SET @CFFilterQuery = @CFFilterQuery +
N'SELECT n.[ArticleID]
FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS cf ON cf.ArticleID = n.ArticleID
WHERE ' + @FilterValueSimple + ' '

			IF @CurrentRow < @FiltersCountSimple
				SET @CFFilterQuery = @CFFilterQuery + N' INTERSECT '
			END

		END

		SET @CFFilterQuery = @CFFilterQuery + N') AS CFFilteredArticles'
	END

	IF @CFFilterQuery IS NULL
		SET @FilterByCustomFields = 0;
END

SET @MainContentFilter = N'
;WITH AllContent AS( '

	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		SELECT ArticleID, CommentedDate,RecurringID,StartDate FROM (
		SELECT nc.[ArticleID]
			,nc.[DateAdded] AS CommentedDate
			,inner_all.RecurringID
			,inner_all.StartDate
			,ROW_NUMBER() OVER(PARTITION BY nc.[ArticleID], inner_all.RecurringID ORDER BY '
			
			IF @FirstOrderBy = 'Featured DESC' SET @MainContentFilter = @MainContentFilter + N'inner_all.Featured DESC, '
			
			SET @MainContentFilter = @MainContentFilter + N' nc.[DateAdded] ' + @OrderByDirection + ') AS OnlyFirstOccurance
			
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsComments] AS nc
		INNER JOIN (';
	END
	
	SET @MainContentFilter = @MainContentFilter + N'
	SELECT n.ArticleID,n.Featured,
		CASE WHEN n.EventArticle = 0 THEN n.PublishDate ELSE CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END END AS StartDate,
		CASE WHEN n.EventArticle = 1 AND ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS RecurringID
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ned.ArticleID = nerd.ArticleID AND ned.ArticleID IS NOT NULL AND ned.Recurring = 1 AND '
	IF @DateRangeType = 3
		SET @MainContentFilter = @MainContentFilter + N' nerd.EndDateTime < @CurrentDate'
	ELSE IF @DateRangeType = 2
		SET @MainContentFilter = @MainContentFilter + N'
		((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
			 OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
	ELSE IF @DateRangeType = 1
		BEGIN
			IF @ListArchive = 0
				SET @MainContentFilter = @MainContentFilter + N' nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate '
			ELSE
				SET @MainContentFilter = @MainContentFilter + N' nerd.StartDateTime <= @CurrentDate AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate AND nerd.EndDateTime < @CurrentDate '
		END
	ELSE IF @DateRangeType = 0
		SET @MainContentFilter = @MainContentFilter + N' (nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
	ELSE
		SET @MainContentFilter = @MainContentFilter + N' 1 = 0'
	
	SET @MainContentFilter = @MainContentFilter + N'
	WHERE n.ArticleID IN( '
	 
	 -- tu bi trebal staviti okolo da se filtrira po and !!!
	 
	IF @UseAndOperator IS NOT NULL AND @NewsFilterCategories IS NOT NULL
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		SELECT DISTINCT [ArticleID] FROM (
			SELECT na.[ArticleID], ROW_NUMBER() OVER (PARTITION BY na.[ArticleID] ORDER BY na.[ArticleID] DESC ) AS Recency
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN #FilterCategories AS fbc ON fbc.CategoryID = cat.CategoryID
			WHERE na.ArticleID IN ( ';
	END
	 
	IF @FilterByCustomFields = 1
		SET @MainContentFilter = @MainContentFilter + N' SELECT ArticleID FROM ('
	 
	SET @MainContentFilter = @MainContentFilter + N'
		SELECT [ArticleID] FROM (
			SELECT na.[ArticleID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na ' -- only article normal permissions	
				SET @MainContentFilter = @MainContentFilter + @TopInnerFilter + N'
				AND EXISTS (
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
					WHERE c.ArticleID = na.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)
				)
				AND na.EventArticle = 0 '

				IF @QueryPermissionsPerArticles = 1 SET @MainContentFilter = @MainContentFilter + N' AND na.HasPermissions = 0 '

				IF @DateRange <> 0 AND @RestrictionByDateRange IS NULL SET @MainContentFilter = @MainContentFilter + N' AND na.PublishDate BETWEEN @FromDate AND @ToDate '
			
			SET @MainContentFilter = @MainContentFilter + N'
			UNION ALL
			SELECT na.[ArticleID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na ' -- normal and recurring event normal permissions
				SET @MainContentFilter = @MainContentFilter + @TopInnerFilter + N'
				AND EXISTS (
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
					WHERE c.ArticleID = na.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)
				)
				AND EXISTS (
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
					WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 0 '
					IF @DateRangeType = 3
						SET @MainContentFilter = @MainContentFilter + N' AND ne.EndDate < @CurrentDate'
					ELSE IF @DateRangeType = 1
					BEGIN
						IF @ListArchive = 0
							SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate '
						ELSE
							SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate AND ne.EndDate < @CurrentDate '
					END
					ELSE IF @DateRangeType = 2
						SET @MainContentFilter = @MainContentFilter + N' AND (ne.StartDate >= @StartDate OR (ne.StartDate < @StartDate AND ne.EndDate >= @StartDate)) '

				SET @MainContentFilter = @MainContentFilter + N'
					UNION ALL
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
					WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 1
						AND EXISTS (
							SELECT ArticleID
							FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd
							WHERE nerd.ArticleID = ne.ArticleID '
							IF @DateRangeType = 3
								SET @MainContentFilter = @MainContentFilter + N' AND nerd.EndDateTime < @CurrentDate'
							ELSE IF @DateRangeType = 2
							SET @MainContentFilter = @MainContentFilter + N'
							AND ((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
									OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
							ELSE IF @DateRangeType = 1
								BEGIN
									IF @ListArchive = 0
										SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate '
									ELSE
										SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @CurrentDate AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate AND nerd.EndDateTime < @CurrentDate '
								END
							ELSE IF @DateRangeType = 0
								SET @MainContentFilter = @MainContentFilter + N' AND (nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
						
						SET @MainContentFilter = @MainContentFilter + N'
						)
				) '

				IF @QueryPermissionsPerArticles = 1 SET @MainContentFilter = @MainContentFilter + N' AND na.HasPermissions = 0 '

		IF @QueryPermissionsPerArticles = 1
		BEGIN
			SET @MainContentFilter = @MainContentFilter + N'
			UNION ALL
			SELECT na.[ArticleID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na ' -- only article user/role permissions
				SET @MainContentFilter = @MainContentFilter + @TopInnerFilter + N'
				AND EXISTS (
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
					WHERE c.ArticleID = na.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #FilterCategories)
				)
				AND EXISTS (
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
					WHERE aup.ArticleID = na.ArticleID '
					IF @CanEditAllContent = 0
					BEGIN
						SET @MainContentFilter = @MainContentFilter + N' AND aup.Show = 1 '
						IF @UserID = -1 SET @MainContentFilter = @MainContentFilter + N' AND aup.UserID IS NULL '
						ELSE SET @MainContentFilter = @MainContentFilter + N' AND aup.UserID = @UserID '
					END
					IF @UserID <> -1
					BEGIN
						SET @MainContentFilter = @MainContentFilter + N'
						UNION
						SELECT ArticleID
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
						WHERE arp.ArticleID = na.ArticleID '
						IF @CanEditAllContent = 0
						BEGIN
							SET @MainContentFilter = @MainContentFilter + N' AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
						END
					END
				SET @MainContentFilter = @MainContentFilter + N'
				)
				AND na.EventArticle = 0 '
				
				IF @DateRange <> 0 AND @RestrictionByDateRange IS NULL SET @MainContentFilter = @MainContentFilter + N' AND na.PublishDate BETWEEN @FromDate AND @ToDate '
			
			SET @MainContentFilter = @MainContentFilter + N'
			UNION ALL
			SELECT na.[ArticleID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na ' -- normal and recurring events user/role permissions
				SET @MainContentFilter = @MainContentFilter + @TopInnerFilter + N'
				AND EXISTS (
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
					WHERE c.ArticleID = na.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #FilterCategories)
				)
				AND EXISTS (
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
					WHERE aup.ArticleID = na.ArticleID '
					IF @CanEditAllContent = 0
					BEGIN
						SET @MainContentFilter = @MainContentFilter + N' AND aup.Show = 1 '
						IF @UserID = -1 SET @MainContentFilter = @MainContentFilter + N' AND aup.UserID IS NULL '
						ELSE SET @MainContentFilter = @MainContentFilter + N' AND aup.UserID = @UserID '
					END
					IF @UserID <> -1
					BEGIN
						SET @MainContentFilter = @MainContentFilter + N'
						UNION
						SELECT ArticleID
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
						WHERE arp.ArticleID = na.ArticleID '
						IF @CanEditAllContent = 0
						BEGIN
							SET @MainContentFilter = @MainContentFilter + N' AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
						END
					END
				
				SET @MainContentFilter = @MainContentFilter + N'
				)
				AND EXISTS (
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
					WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 0 '
					IF @DateRangeType = 3
						SET @MainContentFilter = @MainContentFilter + N' AND ne.EndDate < @CurrentDate'
					ELSE IF @DateRangeType = 1
					BEGIN
						IF @ListArchive = 0
							SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate '
						ELSE
							SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate AND ne.EndDate < @CurrentDate '
					END
					ELSE IF @DateRangeType = 2
						SET @MainContentFilter = @MainContentFilter + N' AND (ne.StartDate >= @StartDate OR (ne.StartDate < @StartDate AND ne.EndDate >= @StartDate)) '

				SET @MainContentFilter = @MainContentFilter + N'
					UNION ALL
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
					WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 1
						AND EXISTS (
							SELECT ArticleID
							FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd
							WHERE nerd.ArticleID = ne.ArticleID '
							IF @DateRangeType = 3
								SET @MainContentFilter = @MainContentFilter + N' AND nerd.EndDateTime < @CurrentDate'
							ELSE IF @DateRangeType = 2
							SET @MainContentFilter = @MainContentFilter + N'
							AND ((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
									OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
							ELSE IF @DateRangeType = 1
								BEGIN
									IF @ListArchive = 0
										SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate '
									ELSE
										SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @CurrentDate AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate AND nerd.EndDateTime < @CurrentDate '
								END
							ELSE IF @DateRangeType = 0
								SET @MainContentFilter = @MainContentFilter + N' AND (nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
						
						SET @MainContentFilter = @MainContentFilter + N'
						)
				) '
		END

		SET @MainContentFilter = @MainContentFilter + N'
		) AS AllPermissions '
	
	-- treba desti ako se koristi AND operator
	
	IF @FilterByCustomFields = 1
		SET @MainContentFilter = @MainContentFilter + N') AllBeforeFilters INTERSECT ' + @CFFilterQuery
	
	IF @UseAndOperator IS NOT NULL AND @NewsFilterCategories IS NOT NULL
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
			)
		) AS OnlyWithGoogleMaps
		WHERE Recency >= (SELECT COUNT(*) FROM #FilterCategories) ';
	END
	
	SET @MainContentFilter = @MainContentFilter + N' 
	) '
	
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N') AS inner_all ON nc.ArticleID = inner_all.ArticleID AND nc.Approved = ''True'' AND nc.' + @sqlSharingPortalAll + '
		) AS OnlyFirstRows
	WHERE OnlyFirstOccurance = 1'
	END
	
SET @MainContentFilter = @MainContentFilter + N' 
) '

SET @sqlcommand = @sqlcommand + @MainContentFilter + N' SELECT @AllContentCount = COUNT(ArticleID) FROM AllContent '

SET @sqlcommand = @sqlcommand + @MainContentFilter

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
SELECT n.[ArticleID],n.[PortalID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
	,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
	,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
	,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
	,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
	,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID]
	,e_fsd.StartDate,e_fsd.RecurringID,n.[ContactEmail], '
ELSE
SET @sqlcommand = @sqlcommand + N'
SELECT n.[ArticleID],n.[PortalID],n.[UserID]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Title] ELSE cl.[Title] END AS Title
	,CASE WHEN cl.ArticleID IS NULL THEN n.[SubTitle] ELSE cl.[SubTitle] END AS SubTitle
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Summary] ELSE cl.[Summary] END AS Summary
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Article] ELSE cl.[Article] END AS Article
	,n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
	,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[TitleLink] ELSE cl.[clTitleLink] END AS TitleLink
	,n.[DetailType]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[DetailTypeData] ELSE cl.[DetailTypeData] END AS DetailTypeData
	,n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
	,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
	,n.[ArticleImageSet]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaDecription] ELSE cl.[MetaDecription] END AS MetaDecription
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaKeywords] ELSE cl.[MetaKeywords] END AS MetaKeywords
	,n.[DisplayStyle],n.[DetailTarget]
	,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageTitle] ELSE cl.[MainImageTitle] END AS MainImageTitle
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageDescription] ELSE cl.[MainImageDescription] END AS MainImageDescription
	,n.[CFGroupeID],e_fsd.StartDate,e_fsd.RecurringID,n.[ContactEmail], ';

IF @QueryModulePermissions = 0
	SET @sqlcommand = @sqlcommand + N'0 AS CanEdit, '
ELSE IF @CanEditAllContent = 1
	SET @sqlcommand = @sqlcommand + N'1 AS CanEdit, '
ELSE
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CASE WHEN @HasEditCategories = 0
	THEN 
		CASE WHEN EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
			WHERE arp.ArticleID = n.ArticleID AND arp.Edit = 1 AND arp.RoleID IN (SELECT RoleID FROM #UserInRoles)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
			WHERE aup.ArticleID = n.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID
		)
		THEN 1 ELSE 0
		END
	ELSE
		CASE WHEN EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
			WHERE '
			IF @EditOnlyAsOwner = 1
				SET @sqlcommand = @sqlcommand + N' n.UserID = @UserID AND '

			SET @sqlcommand = @sqlcommand + N' c.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #UserEditCategories)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
			WHERE arp.ArticleID = n.ArticleID AND arp.Edit = 1 AND arp.RoleID IN (SELECT RoleID FROM #UserInRoles)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
			WHERE aup.ArticleID = n.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID
		)
		THEN 1 ELSE 0
		END
	END
	AS CanEdit, '
END

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color", c.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.CategoryID = ci.CategoryID
	WHERE ci.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategories)
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '
ELSE
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", lc.Name AS "@name", lc.CategoryURL AS "@url", c.Color AS "@color", lc.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #LocalizedCategories AS lc ON c.CategoryID = lc.Id
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON ci.CategoryID = c.CategoryID
	WHERE ci.ArticleID = n.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '

IF @QueryModulePermissions = 0
	SET @sqlcommand = @sqlcommand + N' 0 AS Published, 0 AS Approve, '
ELSE
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CASE n.Active
		WHEN 1 THEN 0
		WHEN 0 THEN 1
	END AS Published, '
	IF @UserCanApprove = 0
		SET @sqlcommand = @sqlcommand + N'0 AS Approve, '
	ELSE
		SET @sqlcommand = @sqlcommand + N'
			CASE n.Approved
				WHEN 1 THEN 0
				WHEN 0 THEN n.Active
			END AS Approve, '
END

SET @sqlcommand = @sqlcommand + N' @AllContentCount AS ContentCount '

IF @LocaleCode IS NULL
BEGIN
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.CommentedDate
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,inner_ac.CommentedDate
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '

				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID ';
	END
	ELSE IF @OrderByCustomFieldID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N',e_fsd.' + @OrderByColumnName + ',(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END)
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.' + @OrderByColumnName + '
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,fv.' + @OrderByColumnName + '
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '

				IF @OrderByDirection = 'ASC' SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'

				SET @sqlcommand = @sqlcommand + N'fv.'+ @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON fv.ArticleID = inner_n.ArticleID AND fv.CustomFieldID = @OrderByCustomFieldID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID ';
	END
	ELSE
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
				
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID '
	END
END
ELSE
BEGIN
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.CommentedDate
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,inner_ac.CommentedDate
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
				
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
		END
	ELSE IF @OrderByCustomFieldID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.' + @OrderByColumnName + '
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,fv.' + @OrderByColumnName + '
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '

				IF @OrderByDirection = 'ASC'
					SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'
				
				SET @sqlcommand = @sqlcommand + N'fv.'+ @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON fv.ArticleID = inner_n.ArticleID AND fv.CustomFieldID = @OrderByCustomFieldID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
	END
	ELSE
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID
				,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
				
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
	END
END

SET @sqlcommand = @sqlcommand + N' ORDER BY ';
IF @FirstOrderBy = 'Featured DESC'
	SET @sqlcommand = @sqlcommand + N'Featured DESC, ';
IF @OrderByCustomFieldID IS NOT NULL AND @OrderByDirection = 'ASC'
	SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),';

SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + N',n.ArticleID';

SET @sqlcommand = @sqlcommand + N'
IF OBJECT_ID(''tempdb..#UserInRoles'') IS NOT NULL
	DROP TABLE #UserInRoles;
IF OBJECT_ID(''tempdb..#ViewCategories'') IS NOT NULL
	DROP TABLE #ViewCategories;
IF OBJECT_ID(''tempdb..#ViewCategoriesWithFilter'') IS NOT NULL
	DROP TABLE #ViewCategoriesWithFilter;
IF OBJECT_ID(''tempdb..#FilterCategories'') IS NOT NULL
	DROP TABLE #FilterCategories; '

IF @IsPortalSharing = 1
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#SharingPortals'') IS NOT NULL
		DROP TABLE #SharingPortals; '

IF @CanEditAllContent = 0 AND @QueryModulePermissions = 1
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#UserEditCategories'') IS NOT NULL
		DROP TABLE #UserEditCategories; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#LocalizedCategories'') IS NOT NULL
		DROP TABLE #LocalizedCategories; '

IF @sqlAuthors IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#FilterAuthors'') IS NOT NULL
		DROP TABLE #FilterAuthors; '

EXEC SP_EXECUTESQL @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalID = @PortalID
	,@ModuleID = @ModuleID
	,@UserID = @UserID
	,@OrderByCustomFieldID = @OrderByCustomFieldID
	,@ItemsFrom = @ItemsFrom
	,@ItemsTo = @ItemsTo
	,@DateRange = @DateRange
	,@DateRangeType = @DateRangeType
	,@StartDate = @StartDate
	,@FromDate = @FromDate
	,@ToDate = @ToDate
	,@eFromDate = @eFromDate
	,@eToDate = @eToDate
	,@OnlyOneCategory = @OnlyOneCategory
	,@Featured = @Featured
	,@ShowAllAuthors = @ShowAllAuthors
	,@FilterByAuthor = @FilterByAuthor
	,@FilterByGroupID = @FilterByGroupID
	,@FilterByArticles = @FilterByArticles
	,@FilterByDNNUserID = @FilterByDNNUserID
	,@FilterByDNNGroupID = @FilterByDNNGroupID
	,@EditOnlyAsOwner = @EditOnlyAsOwner
	,@UserCanApprove = @UserCanApprove
	,@LocaleCode = @LocaleCode
	,@IsSocialInstance = @IsSocialInstance
	,@FirstOrderBy = @FirstOrderBy
	,@Perm_ViewAllCategores = @Perm_ViewAllCategores
	,@Perm_EditAllCategores = @Perm_EditAllCategores
	,@AdminOrSuperUser = @AdminOrSuperUser
	,@CategoryFilterType = @CategoryFilterType
	,@PermissionSettingsSource = @PermissionSettingsSource
	,@FillterSettingsSource = @FillterSettingsSource
	,@OuterModuleID = @OuterModuleID
	,@HideUnlocalizedItems = @HideUnlocalizedItems
	,@NewsFilterCategories = @NewsFilterCategories
	,@NewsFilterAuthors = @NewsFilterAuthors
	,@NewsFilterGroups = @NewsFilterGroups
	,@ListArchive = @ListArchive
	,@FilterByTagID = @FilterByTagID
	,@RestrictionByDateRange = @RestrictionByDateRange
	,@IsPortalSharing = @IsPortalSharing
	,@CanEditAllContent = @CanEditAllContent
	,@QueryPermissionsPerArticles = @QueryPermissionsPerArticles
	,@QueryModulePermissions = @QueryModulePermissions
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetArticles]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetArticles] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetArticles]
	@PortalID INT,
	@ModuleID INT,
	@UserID INT,
	@OrderByColumnName NVARCHAR(30),
	@OrderByDirection NVARCHAR(4),
	@OrderByCustomFieldID INT = NULL,
	@ItemsFrom INT,
	@ItemsTo INT,
	@DateRange TINYINT = 0,
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@OnlyOneCategory INT = NULL,
	@Featured BIT = 0,
	@ShowAllAuthors BIT = 1,
	@FilterByAuthor INT = 0,
	@FilterByGroupID INT = 0,
	@FilterByTags BIT = 0,
	@FilterByArticles BIT = 0,
	@FilterByDNNUserID INT = 0,
	@FilterByDNNGroupID INT = 0,
	@EditOnlyAsOwner BIT = 0,
	@UserCanApprove BIT = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FirstOrderBy NVARCHAR(20) = NULL,
	@Perm_ViewAllCategores BIT = 0,
	@Perm_EditAllCategores BIT = 0,
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 1,
	@PermissionSettingsSource BIT = 1,
	@FillterSettingsSource BIT = 1,
	@OuterModuleID INT = NULL,
	@HideUnlocalizedItems BIT = 0,
	@NewsFilterCategories NVARCHAR(1000) = NULL,
	@NewsFilterAuthors NVARCHAR(1000) = NULL,
	@NewsFilterGroups NVARCHAR(1000) = NULL,
	@FilterByTagID INT = NULL,
	@AdminFuturePostsVisible BIT = 0,
	@UseAndOperator BIT = NULL,
	@GoogleMapsFilter TINYINT = NULL,
	@FilterByCustomFields BIT = 0,
	@IsPortalSharing BIT = 0,
	@CanEditAllContent BIT = 0,
	@QueryPermissionsPerArticles BIT = 1,
	@QueryModulePermissions BIT = 1
--WITH RECOMPILE
AS
SET NOCOUNT ON;
DECLARE @SecondOrderBy NVARCHAR(30);
SET @SecondOrderBy = N', inner_n.ArticleID ';
DECLARE @paramList NVARCHAR(2000);
SET @paramList = N'
	 @PortalID INT
	,@ModuleID INT
	,@UserID INT
	,@OrderByCustomFieldID INT
	,@ItemsFrom INT
	,@ItemsTo INT
	,@DateRange TINYINT
	,@FromDate DATETIME
	,@ToDate DATETIME
	,@OnlyOneCategory INT
	,@FilterByAuthor INT
	,@FilterByGroupID INT
	,@FilterByArticles BIT
	,@FilterByDNNUserID INT
	,@FilterByDNNGroupID INT
	,@LocaleCode NVARCHAR(20)
	,@Perm_EditAllCategores BIT
	,@AdminOrSuperUser BIT
	,@PermissionSettingsSource BIT
	,@FillterSettingsSource BIT
	,@OuterModuleID INT
	,@NewsFilterCategories NVARCHAR(1000)
	,@NewsFilterAuthors NVARCHAR(1000)
	,@NewsFilterGroups NVARCHAR(1000)
	,@FilterByTagID INT
	,@IsPortalSharing BIT
	,@CanEditAllContent BIT
	,@QueryPermissionsPerArticles BIT
	,@QueryModulePermissions BIT';

DECLARE @sqlCommand NVARCHAR(MAX);
DECLARE @MainContentFilter NVARCHAR(MAX);
DECLARE @TopInnerFilter NVARCHAR(MAX);
DECLARE @sqlSharingPortal NVARCHAR(300);
DECLARE @sqlSharingPortalAll NVARCHAR(300);

SET @sqlCommand = N'
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

CREATE TABLE #UserInRoles (RoleID INT PRIMARY KEY);
CREATE TABLE #ViewCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #FilterCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #ViewCategoriesWithFilter (CategoryID INT PRIMARY KEY); '

IF @IsPortalSharing = 1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	CREATE TABLE #SharingPortals (PortalID INT PRIMARY KEY);
	INSERT INTO #SharingPortals
	SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID;';

	SET @sqlSharingPortal = N' EXISTS (SELECT PortalID FROM #SharingPortals AS sp WHERE sp.PortalID = na.PortalID) ';
	SET @sqlSharingPortalAll = N'PortalID IN (SELECT PortalID FROM #SharingPortals) ';
END
ELSE
BEGIN
	SET @sqlSharingPortal = N' na.PortalID = @PortalID ';
	SET @sqlSharingPortalAll = N'PortalID = @PortalID ';
END

IF @UserID <> -1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #UserInRoles '

	IF @IsPortalSharing = 0
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		WHERE r.PortalID = @PortalID AND ur.UserID = @UserID
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] AS mp ON mp.SharingPortalID = r.PortalID
		WHERE mp.ModuleID = @ModuleID
			AND ur.UserID = @UserID
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategories '

IF @AdminOrSuperUser = 1 OR @Perm_ViewAllCategores = 1 OR @QueryModulePermissions = 0
BEGIN
	IF @IsPortalSharing = 1
		SET @sqlCommand = @sqlCommand + N'
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID); '
	ELSE
	SET @sqlCommand = @sqlCommand + N'
		SELECT c.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		WHERE c.PortalID = @PortalID; '
END
ELSE IF @UserID = -1
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal - ako je portal sharing to bi trebalo biti false
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		WHERE rpsc.PremissionSettingsID IN (
			SELECT PremissionSettingsID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			WHERE rps.PortalID = @PortalID
				AND rps.ModuleID IS NULL
				AND rps.RoleID IS NULL); '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		WHERE rpsc.PremissionSettingsID IN (
			SELECT PremissionSettingsID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			WHERE rps.PortalID = @PortalID
				AND rps.ModuleID = @ModuleID
				AND rps.RoleID IS NULL); '
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
		UNION
		SELECT upsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL; '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID 
		WHERE rps.ModuleID = @ModuleID
		UNION
		SELECT upsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.ModuleID = @ModuleID; '
	END
END

IF @NewsFilterCategories IS NOT NULL
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT fc.KeyID
	FROM {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterCategories) AS fc; '
ELSE IF @OnlyOneCategory IS NOT NULL -- filtrira se po jednoj kategoriji
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT @OnlyOneCategory; '
ELSE IF @CategoryFilterType = 0 -- 0 All categories
	IF @IsPortalSharing = 1
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID = @PortalID; '
ELSE IF @OuterModuleID IS NOT NULL
BEGIN
	IF @CategoryFilterType = 1 -- 1 - SELECTion
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
		WHERE ModuleID = @OuterModuleID; '
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		IF @IsPortalSharing = 1
			SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
					WHERE ci.ModuleID = @OuterModuleID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID)
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
		ELSE
		SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
					WHERE ci.ModuleID = @OuterModuleID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID = @PortalID
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
	END
END
ELSE
BEGIN
	IF @CategoryFilterType = 1 -- 1 - SELECTion
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
			SET @sqlCommand = @sqlCommand + N'
			INSERT INTO #FilterCategories
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems]
			WHERE PortalID = @PortalID; '
		ELSE -- module
			SET @sqlCommand = @sqlCommand + N'
			INSERT INTO #FilterCategories
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
			WHERE ModuleID = @ModuleID; '
	END
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
		BEGIN
			SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS ci
					WHERE ci.PortalID = @PortalID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID = @PortalID
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
		END
		ELSE -- module
		BEGIN
			IF @IsPortalSharing = 1
				SET @sqlCommand = @sqlCommand + N'
				;WITH hierarchy AS(
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE EXISTS (
						SELECT [CategoryID]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
						WHERE ci.ModuleID = @ModuleID
							AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
					)
					AND cl.PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID)
					UNION ALL
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
				)
				INSERT INTO #FilterCategories
				SELECT DISTINCT CategoryID
				FROM hierarchy; '
			ELSE
				SET @sqlCommand = @sqlCommand + N'
				;WITH hierarchy AS(
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE EXISTS (
						SELECT [CategoryID]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
						WHERE ci.ModuleID = @ModuleID
							AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
					)
					AND cl.PortalID = @PortalID
					UNION ALL
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
				)
				INSERT INTO #FilterCategories
				SELECT DISTINCT CategoryID
				FROM hierarchy; '
		END
	END
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategoriesWithFilter
SELECT vc.CategoryID
FROM #ViewCategories AS vc
INTERSECT
SELECT fc.CategoryID
FROM #FilterCategories AS fc; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #LocalizedCategories (Id INT PRIMARY KEY, Name NVARCHAR(200), CategoryText NVARCHAR(MAX), CategoryURL NVARCHAR(1500)); '

IF @CanEditAllContent = 0 AND @QueryModulePermissions = 1
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #UserEditCategories (CategoryID INT PRIMARY KEY);
	INSERT INTO #UserEditCategories
	SELECT CategoryID
	FROM {databaseOwner}[{objectQualifier}EDS_EditPermissions] (@PortalID,@ModuleID,@UserID,@AdminOrSuperUser,@Perm_EditAllCategores,@PermissionSettingsSource,@CurrentDate)

	DECLARE @HasEditCategories BIT;

	IF EXISTS (SELECT 1 FROM #UserEditCategories)
		SET @HasEditCategories = 1;
	ELSE
		SET @HasEditCategories = 0; '

IF @NewsFilterCategories IS NULL
BEGIN
	IF @OuterModuleID IS NULL AND @FilterByArticles = 1
	SET @sqlcommand = @sqlcommand + N' 
		DECLARE @FilterArticlesTable TABLE (ArticleID INT PRIMARY KEY);
		IF @FillterSettingsSource = 1
			INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByArticles] WHERE FilterPortalID = @PortalID;
		ELSE
			INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByArticles] WHERE FilterModuleID = @ModuleID; '

	IF @FilterByTagID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		DECLARE @FilterTagsTable TABLE (TagID INT PRIMARY KEY);
		INSERT INTO @FilterTagsTable SELECT @FilterByTagID '
		SET @FilterByTags = 1
	END
	ELSE IF @OuterModuleID IS NULL AND @FilterByTags = 1
		SET @sqlcommand = @sqlcommand + N' 
		DECLARE @FilterTagsTable TABLE (TagID INT PRIMARY KEY);
		IF @FillterSettingsSource = 1
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByTagID] WHERE FilterPortalID = @PortalID;
		ELSE
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] WHERE FilterModuleID = @ModuleID; '
END

DECLARE @sqlAuthors NVARCHAR(2000);

IF @NewsFilterAuthors IS NULL AND @NewsFilterGroups IS NULL
BEGIN
	IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0 AND @FilterByAuthor <> 0
			SET @sqlAuthors = N' 
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
				WHERE ap.[AuthorProfileID] = @FilterByAuthor; '
	END
	ELSE
	BEGIN
		IF @OuterModuleID IS NOT NULL AND @ShowAllAuthors = 0
			SET @sqlAuthors = N'
			SELECT mai.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai
			WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT ap.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID; '
		ELSE
		BEGIN
			IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0
			BEGIN
				IF @FillterSettingsSource = 1
					SET @sqlAuthors = N'
					SELECT pai.[UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai
					WHERE pai.PortalID = @PortalID
					UNION 
					SELECT [UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID; '
				ELSE
					SET @sqlAuthors = N'
					SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleID
					UNION 
					SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID; '
			END
			ELSE IF @FilterByAuthor <> 0
				SET @sqlAuthors = N'
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
				WHERE ap.[AuthorProfileID] = @FilterByAuthor; '
			ELSE IF @FilterByGroupID <> 0
				SET @sqlAuthors = N'
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID; '
		END
	END
END
ELSE
BEGIN
	IF @NewsFilterAuthors IS NOT NULL AND @NewsFilterGroups IS NOT NULL
		SET @sqlAuthors = N'
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID
		WHERE ap.' + @sqlSharingPortalAll + '
		UNION
		SELECT ap.[UserID] 
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.' + @sqlSharingPortalAll + ' '
	ELSE IF @NewsFilterAuthors IS NOT NULL
		SET @sqlAuthors = N' 
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID
		WHERE ap.' + @sqlSharingPortalAll + ' '
	ELSE IF @NewsFilterGroups IS NOT NULL
		SET @sqlAuthors = N' 
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.' + @sqlSharingPortalAll + ' '
END

IF @sqlAuthors IS NOT NULL
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CREATE TABLE #FilterAuthors (UserID INT PRIMARY KEY);
	INSERT INTO #FilterAuthors ' + @sqlAuthors
END

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	INSERT INTO #LocalizedCategories
	SELECT c.CategoryID AS Id,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryName ELSE cl.Title END AS Name,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryText ELSE cl.CategoryText END AS CategoryText,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryURL ELSE cl.CategoryURL END AS CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.CategoryID = cl.CategoryID AND cl.LocaleCode = @LocaleCode
	WHERE c.CategoryID IN (SELECT CategoryID FROM #ViewCategories) '
	
SET @sqlcommand = @sqlcommand + N' DECLARE @AllContentCount INT'

SET @TopInnerFilter = N' WHERE ' + @sqlSharingPortal;

	IF @GoogleMapsFilter = 2
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS gmc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS gmd ON gmd.GoogleMapID = gmc.GoogleMapID AND gmd.PointData <> N''''
			WHERE gmc.ArticleID = na.ArticleID
		) '
	ELSE IF @GoogleMapsFilter = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS gmc
			WHERE gmc.ArticleID = na.ArticleID
		) '

	IF @HideUnlocalizedItems = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl
			WHERE ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode
		) '

	IF @FilterByDNNGroupID <> 0 
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT nss.ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = nss.ArticleID
			WHERE nss.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		) '
	ELSE IF @FilterByDNNUserID <> 0
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT nss.ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE nss.ArticleID = na.ArticleID
		) '

	IF @FilterByTags = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti
			INNER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE ti.ArticleID = na.ArticleID
		) '
	
	IF @FilterByArticles = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM @FilterArticlesTable AS fba
			WHERE fba.ArticleID = na.ArticleID
		) '

	SET @TopInnerFilter = @TopInnerFilter + N' AND na.EventArticle = 0 '

	IF @AdminFuturePostsVisible = 1 AND @QueryModulePermissions = 1
	BEGIN
		IF @DateRange = 2
			SET @TopInnerFilter = @TopInnerFilter + N' AND na.PublishDate >= @FromDate AND na.[ExpireDate] >= @CurrentDate '
		ELSE
			SET @TopInnerFilter = @TopInnerFilter + N' AND @CurrentDate <= na.[ExpireDate] '
	END
	ELSE IF @DateRange > 0
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.PublishDate BETWEEN @FromDate AND @ToDate AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '
	ELSE
		SET @TopInnerFilter = @TopInnerFilter + N' AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '

	IF @LocaleCode IS NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.HideDefaultLocale = 0 '
	IF @Featured = 1
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.Featured = 1 '

	IF @FilterByDNNUserID <> 0
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.UserID = @FilterByDNNUserID '
	ELSE IF @sqlAuthors IS NOT NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.UserID IN (SELECT UserID FROM #FilterAuthors) '
	
	IF @QueryModulePermissions = 0
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.Approved = 1 AND na.Active = 1 '
	ELSE IF @CanEditAllContent = 0
	BEGIN
		IF @UserCanApprove = 0
			SET @TopInnerFilter = @TopInnerFilter + N' AND (na.UserID = @UserID OR (na.Active = 1 AND na.Approved = 1)) '
		ELSE
			SET @TopInnerFilter = @TopInnerFilter + N' AND (na.UserID = @UserID OR na.Active = 1) '
	END

DECLARE @CleanOrderColumnWithDirection NVARCHAR(35);

IF @OrderByCustomFieldID IS NOT NULL
BEGIN
	DECLARE @ControlTypeID INT;
	SELECT @ControlTypeID = [ControlTypeID] FROM {databaseOwner}[{objectQualifier}EasyDNNfields] WHERE CustomFieldID = @OrderByCustomFieldID AND IsOrderable = 1;
	IF @ControlTypeID IS NOT NULL
	BEGIN
		SELECT @OrderByColumnName =
			CASE @ControlTypeID
				WHEN 1 THEN N'[Text]'
				WHEN 3 THEN N'[Int]'
				WHEN 4 THEN N'[Decimal]'
				WHEN 5 THEN N'[Decimal]'
				WHEN 6 THEN N'[Text]'
				WHEN 9 THEN N'[DateTime]'
				WHEN 10 THEN N'[Text]'
				ELSE NULL
			END
		IF @OrderByColumnName IS NULL
		BEGIN
			SET @OrderByCustomFieldID = NULL;
			SET @OrderByColumnName = N'[PublishDate]';
		END
	END
	ELSE
	BEGIN
		SET @OrderByCustomFieldID = NULL;
		SET @OrderByColumnName = N'[PublishDate]';
	END
END
IF @OrderByColumnName = N'NEWID()'
	SET @CleanOrderColumnWithDirection = @OrderByColumnName
ELSE
	SET @CleanOrderColumnWithDirection = @OrderByColumnName + N' ' + @OrderByDirection;

IF @FilterByCustomFields = 1
BEGIN
	DECLARE @CFFilterQuery NVARCHAR(MAX);
	DECLARE @FiltersCountSimple INT;
	DECLARE @FiltersCountMulti INT;

	DECLARE @CFFilterTableSimple TABLE(
		RowID INT PRIMARY KEY IDENTITY(1,1),
		CFWhereRoule NVARCHAR(630)
	)
	DECLARE @CFFilterTableMulti TABLE(
		RowID INT PRIMARY KEY IDENTITY(1,1),
		ElementsCount INT NOT NULL ,
		LogicalOperator NVARCHAR(10) NOT NULL,
		CFWhereRoule NVARCHAR(MAX) NOT NULL
	)

	IF @FillterSettingsSource = 1
	BEGIN
		INSERT INTO @CFFilterTableSimple
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] WHERE PortalID = @PortalID;
		SET @FiltersCountSimple = @@ROWCOUNT;
		
		INSERT INTO @CFFilterTableMulti
		SELECT ElementsCount,LogicalOperator, CFQueryRoule FROM (
			SELECT mv.Id,mv.LogicalOperator,(SELECT COUNT(FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id]) AS ElementsCount, 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND cf.FieldElementID IN (' + STUFF((SELECT ',' + STR(fme.FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id] FOR XML PATH('')), 1, 1, '') + ')' AS CFQueryRoule
			FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] AS mv
			WHERE mv.[PortalID] = @PortalID
		) AS AllCfData WHERE EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.MultiCFId = AllCfData.Id)
		SET @FiltersCountMulti = @@ROWCOUNT;
	END
	ELSE
	BEGIN
		INSERT INTO @CFFilterTableSimple
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] WHERE ModuleID = @ModuleID;
		SET @FiltersCountSimple = @@ROWCOUNT;
		
		INSERT INTO @CFFilterTableMulti
		SELECT ElementsCount,LogicalOperator, CFQueryRoule FROM (
			SELECT mv.Id,mv.LogicalOperator,(SELECT COUNT(FieldElementID)
				FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme
				WHERE fme.[MultiCFId] = mv.[Id]) AS ElementsCount, 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND cf.FieldElementID IN (' + STUFF((SELECT ',' + STR(fme.FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id] FOR XML PATH('')), 1, 1, '') + ')' AS CFQueryRoule
			FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] AS mv
			WHERE mv.[ModuleID] = @ModuleID
		) AS AllCfData WHERE EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.MultiCFId = AllCfData.Id)
		SET @FiltersCountMulti = @@ROWCOUNT;
	END
	
	IF @FiltersCountMulti > 0 OR @FiltersCountSimple > 0
	BEGIN
		DECLARE @CurrentRow INT;
		DECLARE @ElementsCount INT;
		DECLARE @LogicalOperator NVARCHAR(10);

		SET @CFFilterQuery = N'SELECT CFFilteredArticles.ArticleID FROM (';
	
		IF @FiltersCountMulti > 0
		BEGIN	
			SET @CurrentRow = 0;
			DECLARE @FilterValueMulti NVARCHAR(MAX);
			WHILE @CurrentRow < @FiltersCountMulti
			BEGIN
				SET @CurrentRow = @CurrentRow + 1;
				SELECT @ElementsCount = ElementsCount, @LogicalOperator = LogicalOperator, @FilterValueMulti = CFWhereRoule FROM @CFFilterTableMulti WHERE RowID = @CurrentRow;

				IF @LogicalOperator = N'AND'
				BEGIN
					SET @CFFilterQuery = @CFFilterQuery +
N'SELECT ArticleID FROM (
	  SELECT ArticleID, ROW_NUMBER() OVER (PARTITION BY cf.[ArticleID] ORDER BY cf.[ArticleID] DESC ) AS Recency
	  FROM {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] AS cf
	  WHERE ' + @FilterValueMulti + '
) AS OnlyWithGoogleMaps
WHERE Recency >= ' + STR(@ElementsCount) + ' '
				END
				ELSE
				BEGIN
					SET @CFFilterQuery = @CFFilterQuery +
N'SELECT n.[ArticleID]
FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] AS cf ON cf.ArticleID = n.ArticleID
WHERE ' + @FilterValueMulti + ' '
				END
				
			IF @CurrentRow < @FiltersCountMulti OR @FiltersCountSimple > 0
				SET @CFFilterQuery = @CFFilterQuery + N' INTERSECT '
			END
		END
	
		IF @FiltersCountSimple > 0
		BEGIN
			SET @CurrentRow = 0;
			DECLARE @FilterValueSimple NVARCHAR(630);
			WHILE @CurrentRow < @FiltersCountSimple
			BEGIN
				SET @CurrentRow = @CurrentRow + 1;
				SELECT @FilterValueSimple = CFWhereRoule FROM @CFFilterTableSimple WHERE RowID = @CurrentRow;

				SET @CFFilterQuery = @CFFilterQuery +
N'SELECT n.[ArticleID]
FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS cf ON cf.ArticleID = n.ArticleID
WHERE ' + @FilterValueSimple + ' '

			IF @CurrentRow < @FiltersCountSimple
				SET @CFFilterQuery = @CFFilterQuery + N' INTERSECT '
			END

		END

		SET @CFFilterQuery = @CFFilterQuery + N') AS CFFilteredArticles'
	END

	IF @CFFilterQuery IS NULL
		SET @FilterByCustomFields = 0;
END

SET @MainContentFilter = N'
;WITH AllContent AS( '
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		SELECT ArticleID, CommentedDate FROM (
		SELECT nc.[ArticleID]
			,nc.[DateAdded] AS CommentedDate
			,ROW_NUMBER() OVER(PARTITION BY nc.[ArticleID] ORDER BY '
			
			IF @FirstOrderBy = 'Featured DESC' SET @MainContentFilter = @MainContentFilter + N'n.Featured DESC, '
			
			SET @MainContentFilter = @MainContentFilter + N' nc.[DateAdded] ' + @OrderByDirection + ') AS OnlyFirstOccurance
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsComments] AS nc ON nc.ArticleID = n.ArticleID AND nc.Approved = ''True'' AND nc.' + @sqlSharingPortalAll + '
		WHERE nc.ArticleID IN (';
	END
	
	IF @UseAndOperator IS NOT NULL AND @NewsFilterCategories IS NOT NULL
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		SELECT DISTINCT [ArticleID] FROM (
			SELECT na.[ArticleID], ROW_NUMBER() OVER (PARTITION BY na.[ArticleID] ORDER BY na.[ArticleID] DESC ) AS Recency
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN #FilterCategories AS fbc ON fbc.CategoryID = cat.CategoryID
			WHERE na.ArticleID IN ( ';
	END
	
	IF @FilterByCustomFields = 1
		SET @MainContentFilter = @MainContentFilter + N' SELECT ArticleID FROM ('
	
	SET @MainContentFilter = @MainContentFilter + N'
	SELECT na.[ArticleID]
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na '
		SET @MainContentFilter = @MainContentFilter + @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
			WHERE c.ArticleID = na.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)
		) '

	IF @QueryPermissionsPerArticles = 1
		SET @MainContentFilter = @MainContentFilter + N'
		AND na.HasPermissions = 0 ' 

	IF @QueryPermissionsPerArticles = 1
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		UNION ALL
		SELECT ArticleID FROM (
			SELECT ArticleID FROM (
			SELECT aup.ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup '
				IF @CanEditAllContent = 0
				BEGIN
					SET @MainContentFilter = @MainContentFilter + N' WHERE aup.Show = 1 '
					IF @UserID = -1 SET @MainContentFilter = @MainContentFilter + N' AND aup.UserID IS NULL '
					ELSE SET @MainContentFilter = @MainContentFilter + N' AND aup.UserID = @UserID '
				END
			IF @UserID <> -1
			BEGIN
				SET @MainContentFilter = @MainContentFilter + N'
				UNION
				SELECT arp.ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp '
					IF @CanEditAllContent = 0
					BEGIN
						SET @MainContentFilter = @MainContentFilter + N' WHERE arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
					END
			END
			SET @MainContentFilter = @MainContentFilter + N'
			) AS PermissionsByArticle
			INTERSECT
			SELECT na.[ArticleID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na '
			SET @MainContentFilter = @MainContentFilter + @TopInnerFilter + N'
			AND EXISTS (
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
				WHERE c.ArticleID = na.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #FilterCategories)
			)
			AND na.HasPermissions = 1
		) AS HasPermissionsTrue '
	END
	
	IF @FilterByCustomFields = 1
		SET @MainContentFilter = @MainContentFilter + N') AllBeforeFilters INTERSECT ' + @CFFilterQuery
	
	IF @UseAndOperator IS NOT NULL AND @NewsFilterCategories IS NOT NULL
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
			)
		) AS OnlyWithGoogleMaps
		WHERE Recency >= (SELECT COUNT(*) FROM #FilterCategories) ';
	END
	
	IF @OrderByColumnName = N'CommentedDate'
	SET @MainContentFilter = @MainContentFilter + N'
		)
	) AS OnlyFirstRows
	WHERE OnlyFirstOccurance = 1
	'
SET @MainContentFilter = @MainContentFilter + N'
) '
SET @sqlcommand = @sqlcommand + @MainContentFilter + N' SELECT @AllContentCount = COUNT(ArticleID) FROM AllContent '

SET @sqlcommand = @sqlcommand + @MainContentFilter

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
SELECT n.[ArticleID],n.[PortalID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
	,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
	,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
	,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
	,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
	,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID],n.[ContactEmail], ';
ELSE
SET @sqlcommand = @sqlcommand + N'
SELECT n.[ArticleID],n.[PortalID],n.[UserID]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Title] ELSE cl.[Title] END AS Title
	,CASE WHEN cl.ArticleID IS NULL THEN n.[SubTitle] ELSE cl.[SubTitle] END AS SubTitle
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Summary] ELSE cl.[Summary] END AS Summary
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Article] ELSE cl.[Article] END AS Article
	,n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
	,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[TitleLink] ELSE cl.[clTitleLink] END AS TitleLink
	,n.[DetailType]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[DetailTypeData] ELSE cl.[DetailTypeData] END AS DetailTypeData
	,n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
	,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
	,n.[ArticleImageSet]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaDecription] ELSE cl.[MetaDecription] END AS MetaDecription
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaKeywords] ELSE cl.[MetaKeywords] END AS MetaKeywords
	,n.[DisplayStyle],n.[DetailTarget]
	,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageTitle] ELSE cl.[MainImageTitle] END AS MainImageTitle
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageDescription] ELSE cl.[MainImageDescription] END AS MainImageDescription
	,n.[CFGroupeID],n.[ContactEmail], ';

IF @QueryModulePermissions = 0
	SET @sqlcommand = @sqlcommand + N'0 AS CanEdit, '
ELSE IF @CanEditAllContent = 1
	SET @sqlcommand = @sqlcommand + N'1 AS CanEdit, '
ELSE
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CASE WHEN @HasEditCategories = 0
	THEN 
		CASE WHEN EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
			WHERE arp.ArticleID = n.ArticleID AND arp.Edit = 1 AND arp.RoleID IN (SELECT RoleID FROM #UserInRoles)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
			WHERE aup.ArticleID = n.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID
		)
		THEN 1 ELSE 0
		END
	ELSE
		CASE WHEN EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
			WHERE '
			IF @EditOnlyAsOwner = 1
				SET @sqlcommand = @sqlcommand + N' n.UserID = @UserID AND '

			SET @sqlcommand = @sqlcommand + N' c.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #UserEditCategories)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
			WHERE arp.ArticleID = n.ArticleID AND arp.Edit = 1 AND arp.RoleID IN (SELECT RoleID FROM #UserInRoles)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
			WHERE aup.ArticleID = n.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID
		)
		THEN 1 ELSE 0
		END
	END
	AS CanEdit, '
END

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color", c.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	WHERE EXISTS (
		SELECT ci.CategoryID
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci
		WHERE c.CategoryID = ci.CategoryID
			AND ci.ArticleID = n.ArticleID
			AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategories)
	)
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '
ELSE
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", lc.Name AS "@name", lc.CategoryURL AS "@url", c.Color AS "@color", lc.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #LocalizedCategories AS lc ON c.CategoryID = lc.Id
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON ci.CategoryID = c.CategoryID
	WHERE ci.ArticleID = n.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '

IF @QueryModulePermissions = 0
	SET @sqlcommand = @sqlcommand + N' 0 AS Published, 0 AS Approve, '
ELSE
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CASE n.Active
		WHEN 1 THEN 0
		WHEN 0 THEN 1
	END AS Published, '
	IF @UserCanApprove = 0
		SET @sqlcommand = @sqlcommand + N'0 AS Approve, '
	ELSE
		SET @sqlcommand = @sqlcommand + N'
			CASE n.Approved
				WHEN 1 THEN 0
				WHEN 0 THEN n.Active
			END AS Approve, '
END

SET @sqlcommand = @sqlcommand + N' @AllContentCount AS ContentCount '

IF @LocaleCode IS NULL
BEGIN
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.CommentedDate
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.CommentedDate
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
				
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID ';
	END
	ELSE IF @OrderByCustomFieldID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.' + @OrderByColumnName + '
			FROM (
				SELECT inner_n.[ArticleID],fv.' + @OrderByColumnName + ',ROW_NUMBER() OVER (ORDER BY ' IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
				IF @OrderByDirection = 'ASC'
					SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'
				
				SET @sqlcommand = @sqlcommand + N'fv.'+ @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
					INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON fv.ArticleID = inner_n.ArticleID AND fv.CustomFieldID = @OrderByCustomFieldID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID ';
	END
	ELSE
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		WHERE n.ArticleID IN (
			SELECT finalSelection.ArticleID FROM (
				SELECT inner_n.ArticleID, ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
				
				SET @sqlcommand = @sqlcommand + N' ' + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				WHERE inner_n.ArticleID IN (
					SELECT ArticleID FROM AllContent
					)
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		)';
	END
END
ELSE
BEGIN
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.CommentedDate
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.CommentedDate,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
				
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
	END
	ELSE IF @OrderByCustomFieldID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.' + @OrderByColumnName + '
			FROM (
				SELECT inner_n.[ArticleID],fv.' + @OrderByColumnName + '
				,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, fv.'
				
				IF @OrderByDirection = 'ASC'
					SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'
				
				SET @sqlcommand = @sqlcommand + N'fv.'+ @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
					FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
					INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
					LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON fv.ArticleID = inner_n.ArticleID AND fv.CustomFieldID = @OrderByCustomFieldID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
	END
	ELSE
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode
		WHERE n.ArticleID IN (
			SELECT finalSelection.ArticleID FROM (
				SELECT inner_n.ArticleID, ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '

				SET @sqlcommand = @sqlcommand + N' ' + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				WHERE inner_n.ArticleID IN (SELECT ArticleID FROM AllContent)
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		)';
	END
END

SET @sqlcommand = @sqlcommand + N' ORDER BY ';
IF @FirstOrderBy = 'Featured DESC'
	SET @sqlcommand = @sqlcommand + N'n.Featured DESC, ';
IF @OrderByCustomFieldID IS NOT NULL AND @OrderByDirection = 'ASC'
	SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),';

SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + N',n.ArticleID';

SET @sqlcommand = @sqlcommand + N'
IF OBJECT_ID(''tempdb..#UserInRoles'') IS NOT NULL
	DROP TABLE #UserInRoles;
IF OBJECT_ID(''tempdb..#ViewCategories'') IS NOT NULL
	DROP TABLE #ViewCategories;
IF OBJECT_ID(''tempdb..#ViewCategoriesWithFilter'') IS NOT NULL
	DROP TABLE #ViewCategoriesWithFilter;
IF OBJECT_ID(''tempdb..#FilterCategories'') IS NOT NULL
	DROP TABLE #FilterCategories; '

IF @IsPortalSharing = 1
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#SharingPortals'') IS NOT NULL
		DROP TABLE #SharingPortals; '

IF @CanEditAllContent = 0 AND @QueryModulePermissions = 1
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#UserEditCategories'') IS NOT NULL
		DROP TABLE #UserEditCategories; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#LocalizedCategories'') IS NOT NULL
		DROP TABLE #LocalizedCategories; '

IF @sqlAuthors IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#FilterAuthors'') IS NOT NULL
		DROP TABLE #FilterAuthors; '

EXEC SP_EXECUTESQL @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalID = @PortalID
	,@ModuleID = @ModuleID
	,@UserID = @UserID
	,@OrderByCustomFieldID = @OrderByCustomFieldID
	,@ItemsFrom = @ItemsFrom
	,@ItemsTo = @ItemsTo
	,@DateRange = @DateRange
	,@FromDate = @FromDate
	,@ToDate = @ToDate
	,@OnlyOneCategory = @OnlyOneCategory
	,@FilterByAuthor = @FilterByAuthor
	,@FilterByGroupID = @FilterByGroupID
	,@FilterByArticles = @FilterByArticles
	,@FilterByDNNUserID = @FilterByDNNUserID
	,@FilterByDNNGroupID = @FilterByDNNGroupID
	,@LocaleCode = @LocaleCode
	,@Perm_EditAllCategores = @Perm_EditAllCategores
	,@AdminOrSuperUser = @AdminOrSuperUser
	,@PermissionSettingsSource = @PermissionSettingsSource
	,@FillterSettingsSource = @FillterSettingsSource
	,@OuterModuleID = @OuterModuleID
	,@NewsFilterCategories = @NewsFilterCategories
	,@NewsFilterAuthors = @NewsFilterAuthors
	,@NewsFilterGroups = @NewsFilterGroups
	,@FilterByTagID = @FilterByTagID
	,@IsPortalSharing = @IsPortalSharing
	,@CanEditAllContent = @CanEditAllContent
	,@QueryPermissionsPerArticles = @QueryPermissionsPerArticles
	,@QueryModulePermissions = @QueryModulePermissions

GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsGetEvents]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetEvents] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsGetEvents]
	@PortalID INT,
	@ModuleID INT,
	@UserID INT,
	@OrderByColumnName NVARCHAR(30),
	@OrderByDirection NVARCHAR(4),
	@OrderByCustomFieldID INT = NULL,
	@ItemsFrom INT = 1,
	@ItemsTo INT = 5,
	@DateRangeType TINYINT = 0,
	@FromDate DATETIME = NULL,
	@ToDate DATETIME = NULL,
	@OnlyOneCategory INT = NULL,
	@Featured BIT = 0,
	@ShowAllAuthors BIT = 1,
	@FilterByAuthor INT = 0,
	@FilterByGroupID INT = 0,
	@FilterByTags BIT = 0,
	@FilterByArticles BIT = 0,
	@FilterByDNNUserID INT = 0,
	@FilterByDNNGroupID INT = 0,
	@EditOnlyAsOwner BIT = 0,
	@UserCanApprove BIT = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@IsSocialInstance BIT = 0,
	@FirstOrderBy NVARCHAR(20) = NULL,
	@Perm_ViewAllCategores BIT = 0,
	@Perm_EditAllCategores BIT = 0,
	@AdminOrSuperUser BIT = 0,
	@CategoryFilterType TINYINT = 1,
	@PermissionSettingsSource BIT = 0,
	@FillterSettingsSource BIT = 0,
	@StartDate DATETIME = NULL,
	@OuterModuleID INT = NULL,
	@HideUnlocalizedItems BIT = 0,
	@NewsFilterCategories NVARCHAR(1000) = NULL,
	@NewsFilterAuthors NVARCHAR(1000) = NULL,
	@NewsFilterGroups NVARCHAR(1000) = NULL,
	@ListArchive BIT = 0,
	@FilterByTagID INT = NULL,
	@RestrictionByDateRange SMALLINT = NULL,
	@AdminFuturePostsVisible BIT = 0,
	@UseAndOperator BIT = NULL,
	@GoogleMapsFilter TINYINT = NULL,
	@FilterByCustomFields BIT = 0,
	@IsPortalSharing BIT = 0,
	@CanEditAllContent BIT = 0,
	@QueryPermissionsPerArticles BIT = 1,
	@QueryModulePermissions BIT = 1
--WITH RECOMPILE
AS
SET NOCOUNT ON;
DECLARE @SecondOrderBy NVARCHAR(30);
SET @SecondOrderBy = N', inner_n.ArticleID ';
DECLARE @paramList NVARCHAR(2000);
SET @paramList = N'
	 @PortalID INT
	,@ModuleID INT
	,@UserID INT
	,@OrderByCustomFieldID INT
	,@ItemsFrom INT
	,@ItemsTo INT
	,@DateRangeType TINYINT
	,@FromDate DATETIME
	,@ToDate DATETIME
	,@OnlyOneCategory INT
	,@Featured BIT
	,@ShowAllAuthors BIT
	,@FilterByAuthor INT
	,@FilterByGroupID INT
	,@FilterByArticles BIT
	,@FilterByDNNUserID INT
	,@FilterByDNNGroupID INT
	,@EditOnlyAsOwner BIT
	,@UserCanApprove BIT
	,@LocaleCode NVARCHAR(20)
	,@IsSocialInstance BIT
	,@FirstOrderBy NVARCHAR(20)
	,@Perm_ViewAllCategores BIT
	,@Perm_EditAllCategores BIT
	,@AdminOrSuperUser BIT
	,@CategoryFilterType TINYINT
	,@PermissionSettingsSource BIT
	,@FillterSettingsSource BIT
	,@StartDate DATETIME
	,@OuterModuleID INT
	,@HideUnlocalizedItems BIT
	,@NewsFilterCategories NVARCHAR(1000)
	,@NewsFilterAuthors NVARCHAR(1000)
	,@NewsFilterGroups NVARCHAR(1000)
	,@ListArchive BIT
	,@FilterByTagID INT
	,@RestrictionByDateRange SMALLINT
	,@IsPortalSharing BIT
	,@CanEditAllContent BIT
	,@QueryPermissionsPerArticles BIT
	,@QueryModulePermissions BIT';

DECLARE @sqlCommand NVARCHAR(MAX);
DECLARE @MainContentFilter NVARCHAR(MAX);
DECLARE @TopInnerFilter NVARCHAR(MAX);
DECLARE @sqlSharingPortal NVARCHAR(300);
DECLARE @sqlSharingPortalAll NVARCHAR(300);

SET @sqlCommand = N'
SET NOCOUNT ON;
SET DATEFIRST 1;
DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

CREATE TABLE #UserInRoles (RoleID INT PRIMARY KEY);
CREATE TABLE #ViewCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #FilterCategories (CategoryID INT PRIMARY KEY);
CREATE TABLE #ViewCategoriesWithFilter (CategoryID INT PRIMARY KEY); '

IF @IsPortalSharing = 1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	CREATE TABLE #SharingPortals (PortalID INT NOT NULL PRIMARY KEY);
	INSERT INTO #SharingPortals
	SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID;';

	SET @sqlSharingPortal = N' EXISTS (SELECT PortalID FROM #SharingPortals AS sp WHERE sp.PortalID = na.PortalID) ';
	SET @sqlSharingPortalAll = N'PortalID IN (SELECT PortalID FROM #SharingPortals) ';
END
ELSE
BEGIN
	SET @sqlSharingPortal = N' na.PortalID = @PortalID ';
	SET @sqlSharingPortalAll = N'PortalID = @PortalID ';
END

IF @UserID <> -1
BEGIN
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #UserInRoles '

	IF @IsPortalSharing = 0
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		WHERE r.PortalID = @PortalID AND ur.UserID = @UserID
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		SELECT DISTINCT r.[RoleID]
		FROM {databaseOwner}[{objectQualifier}Roles] AS r
		INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] AS mp ON mp.SharingPortalID = r.PortalID
		WHERE mp.ModuleID = @ModuleID
			AND ur.UserID = @UserID
			AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate)
			AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate); '
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategories '

IF @AdminOrSuperUser = 1 OR @Perm_ViewAllCategores = 1 OR @QueryModulePermissions = 0
BEGIN
	IF @IsPortalSharing = 1
		SET @sqlCommand = @sqlCommand + N'
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID); '
	ELSE
	SET @sqlCommand = @sqlCommand + N'
		SELECT c.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		WHERE c.PortalID = @PortalID; '
END
ELSE IF @UserID = -1
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal - ako je portal sharing to bi trebalo biti false
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		WHERE rpsc.PremissionSettingsID IN (
			SELECT PremissionSettingsID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			WHERE rps.PortalID = @PortalID
				AND rps.ModuleID IS NULL
				AND rps.RoleID IS NULL); '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		WHERE rpsc.PremissionSettingsID IN (
			SELECT PremissionSettingsID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
			WHERE rps.PortalID = @PortalID
				AND rps.ModuleID = @ModuleID
				AND rps.RoleID IS NULL); '
	END
END
ELSE -- registrirani korisnik
BEGIN
	IF @PermissionSettingsSource = 1 -- by portal
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
		WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
		UNION
		SELECT upsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL; '
	END
	ELSE -- by module
	BEGIN
		SET @sqlCommand = @sqlCommand + N'
		SELECT rpsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
		INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID 
		WHERE rps.ModuleID = @ModuleID
		UNION
		SELECT upsc.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
		WHERE ups.UserID = @UserID AND ups.ModuleID = @ModuleID; '
	END
END

IF @NewsFilterCategories IS NOT NULL
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT fc.KeyID
	FROM {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterCategories) AS fc; '
ELSE IF @OnlyOneCategory IS NOT NULL -- filtrira se po jednoj kategoriji
	SET @sqlCommand = @sqlCommand + N'
	INSERT INTO #FilterCategories
	SELECT @OnlyOneCategory; '
ELSE IF @CategoryFilterType = 0 -- 0 All categories
	IF @IsPortalSharing = 1
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID); '
	ELSE
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID = @PortalID; '
ELSE IF @OuterModuleID IS NOT NULL
BEGIN
	IF @CategoryFilterType = 1 -- 1 - SELECTion
		SET @sqlCommand = @sqlCommand + N'
		INSERT INTO #FilterCategories
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
		WHERE ModuleID = @OuterModuleID; '
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		IF @IsPortalSharing = 1
			SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
					WHERE ci.ModuleID = @OuterModuleID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID)
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
		ELSE
		SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
					WHERE ci.ModuleID = @OuterModuleID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID = @PortalID
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
	END
END
ELSE
BEGIN
	IF @CategoryFilterType = 1 -- 1 - SELECTion
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
			SET @sqlCommand = @sqlCommand + N'
			INSERT INTO #FilterCategories
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems]
			WHERE PortalID = @PortalID; '
		ELSE -- module
			SET @sqlCommand = @sqlCommand + N'
			INSERT INTO #FilterCategories
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems]
			WHERE ModuleID = @ModuleID; '
	END
	ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
	BEGIN
		IF @FillterSettingsSource = 1 -- portal
		BEGIN
			SET @sqlCommand = @sqlCommand + N'
			;WITH hierarchy AS(
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				WHERE EXISTS (
					SELECT [CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS ci
					WHERE ci.PortalID = @PortalID
						AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
				)
				AND cl.PortalID = @PortalID
				UNION ALL
				SELECT cl.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
				INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
			)
			INSERT INTO #FilterCategories
			SELECT DISTINCT CategoryID
			FROM hierarchy; '
		END
		ELSE -- module
		BEGIN
			IF @IsPortalSharing = 1
				SET @sqlCommand = @sqlCommand + N'
				;WITH hierarchy AS(
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE EXISTS (
						SELECT [CategoryID]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
						WHERE ci.ModuleID = @ModuleID
							AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
					)
					AND cl.PortalID IN (SELECT SharingPortalID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModulePortals] WHERE ModuleID = @ModuleID)
					UNION ALL
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
				)
				INSERT INTO #FilterCategories
				SELECT DISTINCT CategoryID
				FROM hierarchy; '
			ELSE
				SET @sqlCommand = @sqlCommand + N'
				;WITH hierarchy AS(
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE EXISTS (
						SELECT [CategoryID]
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS ci
						WHERE ci.ModuleID = @ModuleID
							AND (ci.CategoryID = cl.ParentCategory OR ci.CategoryID = cl.CategoryID)
					)
					AND cl.PortalID = @PortalID
					UNION ALL
					SELECT cl.[CategoryID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					INNER JOIN hierarchy AS p ON cl.ParentCategory = p.CategoryID
				)
				INSERT INTO #FilterCategories
				SELECT DISTINCT CategoryID
				FROM hierarchy; '
		END
	END
END

SET @sqlCommand = @sqlCommand + N'
INSERT INTO #ViewCategoriesWithFilter
SELECT vc.CategoryID
FROM #ViewCategories AS vc
INTERSECT
SELECT fc.CategoryID
FROM #FilterCategories AS fc; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #LocalizedCategories (Id INT PRIMARY KEY, Name NVARCHAR(200), CategoryText NVARCHAR(MAX), CategoryURL NVARCHAR(1500)); '

IF @CanEditAllContent = 0 AND @QueryModulePermissions = 1
	SET @sqlcommand = @sqlcommand + N' 
	CREATE TABLE #UserEditCategories (CategoryID INT PRIMARY KEY);
	INSERT INTO #UserEditCategories
	SELECT CategoryID
	FROM {databaseOwner}[{objectQualifier}EDS_EditPermissions] (@PortalID,@ModuleID,@UserID,@AdminOrSuperUser,@Perm_EditAllCategores,@PermissionSettingsSource,@CurrentDate)

	DECLARE @HasEditCategories BIT;

	IF EXISTS (SELECT 1 FROM #UserEditCategories)
		SET @HasEditCategories = 1;
	ELSE
		SET @HasEditCategories = 0; '

IF @NewsFilterCategories IS NULL
BEGIN
	IF @OuterModuleID IS NULL AND @FilterByArticles = 1
	SET @sqlcommand = @sqlcommand + N' 
		DECLARE @FilterArticlesTable TABLE (ArticleID INT PRIMARY KEY);
		IF @FillterSettingsSource = 1
			INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByArticles] WHERE FilterPortalID = @PortalID;
		ELSE
			INSERT INTO @FilterArticlesTable SELECT ArticleID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByArticles] WHERE FilterModuleID = @ModuleID; '

	IF @FilterByTagID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		DECLARE @FilterTagsTable TABLE (TagID INT PRIMARY KEY);
		INSERT INTO @FilterTagsTable SELECT @FilterByTagID '
		SET @FilterByTags = 1
	END
	ELSE IF @OuterModuleID IS NULL AND @FilterByTags = 1
		SET @sqlcommand = @sqlcommand + N' 
		DECLARE @FilterTagsTable TABLE (TagID INT PRIMARY KEY);
		IF @FillterSettingsSource = 1
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalFilterByTagID] WHERE FilterPortalID = @PortalID;
		ELSE
			INSERT INTO @FilterTagsTable SELECT TagID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsFilterByTagID] WHERE FilterModuleID = @ModuleID; '
END

DECLARE @sqlAuthors NVARCHAR(2000);

IF @NewsFilterAuthors IS NULL AND @NewsFilterGroups IS NULL
BEGIN
	IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0 AND @FilterByAuthor <> 0
			SET @sqlAuthors = N' 
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
				WHERE ap.[AuthorProfileID] = @FilterByAuthor; '
	END
	ELSE
	BEGIN
		IF @OuterModuleID IS NOT NULL AND @ShowAllAuthors = 0
			SET @sqlAuthors = N'
			SELECT mai.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai
			WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT ap.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID; '
		ELSE
		BEGIN
			IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0
			BEGIN
				IF @FillterSettingsSource = 1
					SET @sqlAuthors = N'
					SELECT pai.[UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai
					WHERE pai.PortalID = @PortalID
					UNION 
					SELECT [UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID; '
				ELSE
					SET @sqlAuthors = N'
					SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai WHERE mai.ModuleID = @ModuleID
					UNION 
					SELECT [UserID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID; '
			END
			ELSE IF @FilterByAuthor <> 0
				SET @sqlAuthors = N'
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
				WHERE ap.[AuthorProfileID] = @FilterByAuthor; '
			ELSE IF @FilterByGroupID <> 0
				SET @sqlAuthors = N'
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID; '
		END
	END
END
ELSE
BEGIN
	IF @NewsFilterAuthors IS NOT NULL AND @NewsFilterGroups IS NOT NULL
		SET @sqlAuthors = N'
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID
		WHERE ap.' + @sqlSharingPortalAll + '
		UNION
		SELECT ap.[UserID] 
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID
		WHERE ap.' + @sqlSharingPortalAll + ' '
	ELSE IF @NewsFilterAuthors IS NOT NULL
		SET @sqlAuthors = N' 
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID
		WHERE ap.' + @sqlSharingPortalAll + ' '
	ELSE IF @NewsFilterGroups IS NOT NULL
		SET @sqlAuthors = N' 
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID
		WHERE ap.' + @sqlSharingPortalAll + ' '
END

IF @sqlAuthors IS NOT NULL
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CREATE TABLE #FilterAuthors (UserID INT NOT NULL PRIMARY KEY);
	INSERT INTO #FilterAuthors ' + @sqlAuthors
END

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	INSERT INTO #LocalizedCategories
	SELECT c.CategoryID AS Id,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryName ELSE cl.Title END AS Name,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryText ELSE cl.CategoryText END AS CategoryText,
	CASE WHEN cl.CategoryID IS NULL THEN c.CategoryURL ELSE cl.CategoryURL END AS CategoryURL
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLocalization] AS cl ON c.CategoryID = cl.CategoryID AND cl.LocaleCode = @LocaleCode
	WHERE c.CategoryID IN (SELECT CategoryID FROM #ViewCategories) '
	
SET @sqlcommand = @sqlcommand + N' DECLARE @AllContentCount INT'

SET @TopInnerFilter = N' WHERE ' + @sqlSharingPortal;

	IF @GoogleMapsFilter = 2
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS gmc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNnewsGoogleMapsData] AS gmd ON gmd.GoogleMapID = gmc.GoogleMapID AND gmd.PointData <> N''''
			WHERE gmc.ArticleID = na.ArticleID
		) '
	ELSE IF @GoogleMapsFilter = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleGoogleMapConnection] AS gmc
			WHERE gmc.ArticleID = na.ArticleID
		) '

	IF @HideUnlocalizedItems = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS ncl
			WHERE ncl.ArticleID = na.ArticleID AND ncl.LocaleCode = @LocaleCode
		) '

	IF @FilterByDNNGroupID <> 0 
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT nss.ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsSocialGroupItems] AS sgi ON sgi.ArticleID = nss.ArticleID
			WHERE nss.ArticleID = na.ArticleID AND sgi.RoleID = @FilterByDNNGroupID
		) '
	ELSE IF @FilterByDNNUserID <> 0
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT nss.ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsSocialSecurity] AS nss
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@UserID, @FilterByDNNGroupID) AS t ON t.seckey = nss.SecurityKey
			WHERE nss.ArticleID = na.ArticleID
		) '

	IF @FilterByTags = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti
			INNER JOIN @FilterTagsTable AS fbt ON ti.TagID = fbt.TagID
			WHERE ti.ArticleID = na.ArticleID
		) '
	
	IF @FilterByArticles = 1
		SET @TopInnerFilter = @TopInnerFilter + N'
		AND EXISTS (
			SELECT ArticleID
			FROM @FilterArticlesTable AS fba
			WHERE fba.ArticleID = na.ArticleID
		) '

	IF @AdminFuturePostsVisible = 1 AND @QueryModulePermissions = 1
	BEGIN
		IF @RestrictionByDateRange IS NOT NULL 
			SET @TopInnerFilter = @TopInnerFilter + N' AND na.PublishDate >= DATEADD(day,-@RestrictionByDateRange,@CurrentDate) AND na.[ExpireDate] >= @CurrentDate '
		ELSE
			SET @TopInnerFilter = @TopInnerFilter + N' AND @CurrentDate <= na.[ExpireDate] '
	END
	ELSE IF @RestrictionByDateRange IS NOT NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.PublishDate BETWEEN DATEADD(day,-@RestrictionByDateRange,@CurrentDate) AND @CurrentDate AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '
	ELSE
		SET @TopInnerFilter = @TopInnerFilter + N' AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate] '
		
	IF @LocaleCode IS NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.HideDefaultLocale = 0 '
	IF @Featured = 1
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.Featured = 1 '

	IF @FilterByDNNUserID <> 0
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.UserID = @FilterByDNNUserID '
	ELSE IF @sqlAuthors IS NOT NULL
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.UserID IN (SELECT UserID FROM #FilterAuthors) '
	
	IF @QueryModulePermissions = 0
		SET @TopInnerFilter = @TopInnerFilter + N' AND na.Approved = 1 AND na.Active = 1 '
	ELSE IF @CanEditAllContent = 0
	BEGIN
		IF @UserCanApprove = 0
			SET @TopInnerFilter = @TopInnerFilter + N' AND (na.UserID = @UserID OR (na.Active = 1 AND na.Approved = 1)) '
		ELSE
			SET @TopInnerFilter = @TopInnerFilter + N' AND (na.UserID = @UserID OR na.Active = 1) '
	END

DECLARE @CleanOrderColumnWithDirection NVARCHAR(35);

IF @OrderByCustomFieldID IS NOT NULL
BEGIN
	DECLARE @ControlTypeID INT;
	SELECT @ControlTypeID = [ControlTypeID] FROM {databaseOwner}[{objectQualifier}EasyDNNfields] WHERE CustomFieldID = @OrderByCustomFieldID AND IsOrderable = 1;
	IF @ControlTypeID IS NOT NULL
	BEGIN
		SELECT @OrderByColumnName =
			CASE @ControlTypeID
				WHEN 1 THEN N'[Text]'
				WHEN 3 THEN N'[Int]'
				WHEN 4 THEN N'[Decimal]'
				WHEN 5 THEN N'[Decimal]'
				WHEN 6 THEN N'[Text]'
				WHEN 9 THEN N'[DateTime]'
				WHEN 10 THEN N'[Text]'
				ELSE NULL
			END
		IF @OrderByColumnName IS NULL
		BEGIN
			SET @OrderByCustomFieldID = NULL;
			SET @OrderByColumnName = N'[PublishDate]';
		END
	END
	ELSE
	BEGIN
		SET @OrderByCustomFieldID = NULL;
		SET @OrderByColumnName = N'[PublishDate]';
	END
END
IF @OrderByColumnName = N'NEWID()'
	SET @CleanOrderColumnWithDirection = @OrderByColumnName
ELSE
	SET @CleanOrderColumnWithDirection = @OrderByColumnName + N' ' + @OrderByDirection;

IF @FilterByCustomFields = 1
BEGIN
	DECLARE @CFFilterQuery NVARCHAR(MAX);
	DECLARE @FiltersCountSimple INT;
	DECLARE @FiltersCountMulti INT;

	DECLARE @CFFilterTableSimple TABLE(
		RowID INT PRIMARY KEY IDENTITY(1,1),
		CFWhereRoule NVARCHAR(630)
	)
	DECLARE @CFFilterTableMulti TABLE(
		RowID INT PRIMARY KEY IDENTITY(1,1),
		ElementsCount INT NOT NULL ,
		LogicalOperator NVARCHAR(10) NOT NULL,
		CFWhereRoule NVARCHAR(MAX) NOT NULL
	)

	IF @FillterSettingsSource = 1
	BEGIN
		INSERT INTO @CFFilterTableSimple
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] WHERE PortalID = @PortalID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] WHERE PortalID = @PortalID;
		SET @FiltersCountSimple = @@ROWCOUNT;
		
		INSERT INTO @CFFilterTableMulti
		SELECT ElementsCount,LogicalOperator, CFQueryRoule FROM (
			SELECT mv.Id,mv.LogicalOperator,(SELECT COUNT(FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id]) AS ElementsCount, 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND cf.FieldElementID IN (' + STUFF((SELECT ',' + STR(fme.FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id] FOR XML PATH('')), 1, 1, '') + ')' AS CFQueryRoule
			FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] AS mv
			WHERE mv.[PortalID] = @PortalID
		) AS AllCfData WHERE EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.MultiCFId = AllCfData.Id)
		SET @FiltersCountMulti = @@ROWCOUNT;
	END
	ELSE
	BEGIN
		INSERT INTO @CFFilterTableSimple
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFBit] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDateTime] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFDecimal] WHERE ModuleID = @ModuleID
		UNION ALL
		SELECT 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND ' + [QueryRule] FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByCFInteger] WHERE ModuleID = @ModuleID;
		SET @FiltersCountSimple = @@ROWCOUNT;
		
		INSERT INTO @CFFilterTableMulti
		SELECT ElementsCount,LogicalOperator, CFQueryRoule FROM (
			SELECT mv.Id,mv.LogicalOperator,(SELECT COUNT(FieldElementID)
				FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme
				WHERE fme.[MultiCFId] = mv.[Id]) AS ElementsCount, 'cf.[CustomFieldID] = ' + STR(CustomFieldID) + ' AND cf.FieldElementID IN (' + STUFF((SELECT ',' + STR(fme.FieldElementID) FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.[MultiCFId] = mv.[Id] FOR XML PATH('')), 1, 1, '') + ')' AS CFQueryRoule
			FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiCF] AS mv
			WHERE mv.[ModuleID] = @ModuleID
		) AS AllCfData WHERE EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNnewsFilterByMultiElements] AS fme WHERE fme.MultiCFId = AllCfData.Id)
		SET @FiltersCountMulti = @@ROWCOUNT;
	END
	
	IF @FiltersCountMulti > 0 OR @FiltersCountSimple > 0
	BEGIN
		DECLARE @CurrentRow INT;
		DECLARE @ElementsCount INT;
		DECLARE @LogicalOperator NVARCHAR(10);

		SET @CFFilterQuery = N'SELECT CFFilteredArticles.ArticleID FROM (';
	
		IF @FiltersCountMulti > 0
		BEGIN	
			SET @CurrentRow = 0;
			DECLARE @FilterValueMulti NVARCHAR(MAX);
			WHILE @CurrentRow < @FiltersCountMulti
			BEGIN
				SET @CurrentRow = @CurrentRow + 1;
				SELECT @ElementsCount = ElementsCount, @LogicalOperator = LogicalOperator, @FilterValueMulti = CFWhereRoule FROM @CFFilterTableMulti WHERE RowID = @CurrentRow;

				IF @LogicalOperator = N'AND'
				BEGIN
					SET @CFFilterQuery = @CFFilterQuery +
N'SELECT ArticleID FROM (
	  SELECT ArticleID, ROW_NUMBER() OVER (PARTITION BY cf.[ArticleID] ORDER BY cf.[ArticleID] DESC ) AS Recency
	  FROM {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] AS cf
	  WHERE ' + @FilterValueMulti + '
) AS OnlyWithGoogleMaps
WHERE Recency >= ' + STR(@ElementsCount) + ' '
				END
				ELSE
				BEGIN
					SET @CFFilterQuery = @CFFilterQuery +
N'SELECT n.[ArticleID]
FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsMultiSelected] AS cf ON cf.ArticleID = n.ArticleID
WHERE ' + @FilterValueMulti + ' '
				END
				
			IF @CurrentRow < @FiltersCountMulti OR @FiltersCountSimple > 0
				SET @CFFilterQuery = @CFFilterQuery + N' INTERSECT '
			END
		END
	
		IF @FiltersCountSimple > 0
		BEGIN
			SET @CurrentRow = 0;
			DECLARE @FilterValueSimple NVARCHAR(630);
			WHILE @CurrentRow < @FiltersCountSimple
			BEGIN
				SET @CurrentRow = @CurrentRow + 1;
				SELECT @FilterValueSimple = CFWhereRoule FROM @CFFilterTableSimple WHERE RowID = @CurrentRow;

				SET @CFFilterQuery = @CFFilterQuery +
N'SELECT n.[ArticleID]
FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS cf ON cf.ArticleID = n.ArticleID
WHERE ' + @FilterValueSimple + ' '

			IF @CurrentRow < @FiltersCountSimple
				SET @CFFilterQuery = @CFFilterQuery + N' INTERSECT '
			END

		END

		SET @CFFilterQuery = @CFFilterQuery + N') AS CFFilteredArticles'
	END

	IF @CFFilterQuery IS NULL
		SET @FilterByCustomFields = 0;
END

SET @MainContentFilter = N'
;WITH AllContent AS( '

	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		SELECT ArticleID, CommentedDate,RecurringID,StartDate FROM (
		SELECT nc.[ArticleID]
			,nc.[DateAdded] AS CommentedDate
			,inner_all.RecurringID
			,inner_all.StartDate
			,ROW_NUMBER() OVER(PARTITION BY nc.[ArticleID], inner_all.RecurringID ORDER BY '
			
			IF @FirstOrderBy = 'Featured DESC' SET @MainContentFilter = @MainContentFilter + N'inner_all.Featured DESC, '
			
			SET @MainContentFilter = @MainContentFilter + N' nc.[DateAdded] ' + @OrderByDirection + ') AS OnlyFirstOccurance
			
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsComments] AS nc
		INNER JOIN (';
	END
	
	SET @MainContentFilter = @MainContentFilter + N'
	SELECT n.ArticleID,n.Featured,
		CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END AS StartDate,
		CASE WHEN ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS RecurringID
	FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
	LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ned.ArticleID = nerd.ArticleID AND ned.Recurring = 1 AND '
	IF @DateRangeType = 3
		SET @MainContentFilter = @MainContentFilter + N' nerd.EndDateTime < @CurrentDate'
	ELSE IF @DateRangeType = 2
		SET @MainContentFilter = @MainContentFilter + N'
		((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
			 OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
	ELSE IF @DateRangeType = 1
		BEGIN
			IF @ListArchive = 0
				SET @MainContentFilter = @MainContentFilter + N' nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate '
			ELSE
				SET @MainContentFilter = @MainContentFilter + N' nerd.StartDateTime <= @CurrentDate AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate AND nerd.EndDateTime < @CurrentDate '
		END
	ELSE IF @DateRangeType = 0
		SET @MainContentFilter = @MainContentFilter + N' (nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
	ELSE
		SET @MainContentFilter = @MainContentFilter + N' 1 = 0'
	
	SET @MainContentFilter = @MainContentFilter + N'
	WHERE n.ArticleID IN( '
	 
	 -- tu bi trebal staviti okolo da se filtrira po and !!!
	 
	IF @UseAndOperator IS NOT NULL AND @NewsFilterCategories IS NOT NULL
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		SELECT DISTINCT [ArticleID] FROM (
			SELECT na.[ArticleID], ROW_NUMBER() OVER (PARTITION BY na.[ArticleID] ORDER BY na.[ArticleID] DESC ) AS Recency
			FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID
			INNER JOIN #FilterCategories AS fbc ON fbc.CategoryID = cat.CategoryID
			WHERE na.ArticleID IN ( ';
	END
	 
	IF @FilterByCustomFields = 1
		SET @MainContentFilter = @MainContentFilter + N' SELECT ArticleID FROM ('
	 
	SET @MainContentFilter = @MainContentFilter + N'
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na ' -- normal and recurring event normal permissions
			SET @MainContentFilter = @MainContentFilter + @TopInnerFilter + N'
			AND EXISTS (
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
				WHERE c.ArticleID = na.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategoriesWithFilter)
			)
			AND EXISTS (
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
				WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 0 '
				IF @DateRangeType = 3
					SET @MainContentFilter = @MainContentFilter + N' AND ne.EndDate < @CurrentDate'
				ELSE IF @DateRangeType = 1
				BEGIN
					IF @ListArchive = 0
						SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate '
					ELSE
						SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate AND ne.EndDate < @CurrentDate '
				END
				ELSE IF @DateRangeType = 2
					SET @MainContentFilter = @MainContentFilter + N' AND (ne.StartDate >= @StartDate OR (ne.StartDate < @StartDate AND ne.EndDate >= @StartDate)) '

			SET @MainContentFilter = @MainContentFilter + N'
				UNION ALL
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
				WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 1
					AND EXISTS (
						SELECT ArticleID
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd
						WHERE nerd.ArticleID = ne.ArticleID '
						IF @DateRangeType = 3
							SET @MainContentFilter = @MainContentFilter + N' AND nerd.EndDateTime < @CurrentDate'
						ELSE IF @DateRangeType = 2
							SET @MainContentFilter = @MainContentFilter + N'
							AND ((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
								OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
						ELSE IF @DateRangeType = 1
							BEGIN
								IF @ListArchive = 0
									SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate '
								ELSE
									SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @CurrentDate AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate AND nerd.EndDateTime < @CurrentDate '
							END
						ELSE IF @DateRangeType = 0
							SET @MainContentFilter = @MainContentFilter + N' AND (nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
				
					SET @MainContentFilter = @MainContentFilter + N'
					)
			) '

		IF @QueryPermissionsPerArticles = 1
			SET @MainContentFilter = @MainContentFilter + N' AND na.HasPermissions = 0 '

	IF @QueryPermissionsPerArticles = 1
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
		UNION ALL
		SELECT na.[ArticleID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na ' -- normal and recurring events user/role permissions
			SET @MainContentFilter = @MainContentFilter + @TopInnerFilter + N'
			AND EXISTS (
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
				WHERE c.ArticleID = na.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #FilterCategories)
			)
			AND EXISTS (
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
				WHERE aup.ArticleID = na.ArticleID '
				IF @CanEditAllContent = 0
				BEGIN
					SET @MainContentFilter = @MainContentFilter + N' AND aup.Show = 1 '
					IF @UserID = -1 SET @MainContentFilter = @MainContentFilter + N' AND aup.UserID IS NULL '
					ELSE SET @MainContentFilter = @MainContentFilter + N' AND aup.UserID = @UserID '
				END
				IF @UserID <> -1
				BEGIN
					SET @MainContentFilter = @MainContentFilter + N'
					UNION
					SELECT ArticleID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
					WHERE arp.ArticleID = na.ArticleID '
					IF @CanEditAllContent = 0
					BEGIN
						SET @MainContentFilter = @MainContentFilter + N' AND arp.Show = 1 AND arp.RoleID IN (SELECT [RoleID] FROM #UserInRoles) '
					END
				END
			
			SET @MainContentFilter = @MainContentFilter + N'
			)
			AND EXISTS (
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
				WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 0 '
				IF @DateRangeType = 3
					SET @MainContentFilter = @MainContentFilter + N' AND ne.EndDate < @CurrentDate'
				ELSE IF @DateRangeType = 1
				BEGIN
					IF @ListArchive = 0
						SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate '
					ELSE
						SET @MainContentFilter = @MainContentFilter + N' AND ne.StartDate <= @ToDate AND ne.EndDate >= @FromDate AND ne.EndDate < @CurrentDate '
				END
				ELSE IF @DateRangeType = 2
					SET @MainContentFilter = @MainContentFilter + N' AND (ne.StartDate >= @StartDate OR (ne.StartDate < @StartDate AND ne.EndDate >= @StartDate)) '

			SET @MainContentFilter = @MainContentFilter + N'
				UNION ALL
				SELECT ArticleID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ne
				WHERE ne.ArticleID = na.ArticleID AND ne.Recurring = 1
					AND EXISTS (
						SELECT ArticleID
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd
						WHERE nerd.ArticleID = ne.ArticleID '
						IF @DateRangeType = 3
							SET @MainContentFilter = @MainContentFilter + N' AND nerd.EndDateTime < @CurrentDate'
						ELSE IF @DateRangeType = 2
						SET @MainContentFilter = @MainContentFilter + N'
						AND ((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
								OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ne.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime))) '
						ELSE IF @DateRangeType = 1
							BEGIN
								IF @ListArchive = 0
									SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate '
								ELSE
									SET @MainContentFilter = @MainContentFilter + N' AND nerd.StartDateTime <= @CurrentDate AND nerd.StartDateTime <= @ToDate AND nerd.EndDateTime >= @FromDate AND nerd.EndDateTime < @CurrentDate '
							END
						ELSE IF @DateRangeType = 0
							SET @MainContentFilter = @MainContentFilter + N' AND (nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ne.UpcomingOccurrences IS NULL THEN 1 ELSE ne.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ne.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime)) '
					
					SET @MainContentFilter = @MainContentFilter + N'
					)
			) '
		END

	IF @FilterByCustomFields = 1
		SET @MainContentFilter = @MainContentFilter + N') AllBeforeFilters INTERSECT ' + @CFFilterQuery
	
	IF @UseAndOperator IS NOT NULL AND @NewsFilterCategories IS NOT NULL
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N'
			)
		) AS OnlyWithGoogleMaps
		WHERE Recency >= (SELECT COUNT(*) FROM #FilterCategories) ';
	END
	
	SET @MainContentFilter = @MainContentFilter + N'
	) '
	
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @MainContentFilter = @MainContentFilter + N') AS inner_all ON nc.ArticleID = inner_all.ArticleID AND nc.Approved = ''True'' AND nc.' + @sqlSharingPortalAll + '
		) AS OnlyFirstRows
	WHERE OnlyFirstOccurance = 1'
	END
	
SET @MainContentFilter = @MainContentFilter + N' 
) '

SET @sqlcommand = @sqlcommand + @MainContentFilter + N' SELECT @AllContentCount = COUNT(ArticleID) FROM AllContent '

SET @sqlcommand = @sqlcommand + @MainContentFilter

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
SELECT n.[ArticleID],n.[PortalID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
	,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
	,n.[TitleLink],n.[DetailType],n.[DetailTypeData],n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
	,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
	,n.[ArticleImageSet],n.[MetaDecription],n.[MetaKeywords],n.[DisplayStyle],n.[DetailTarget]
	,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID],n.[MainImageTitle],n.[MainImageDescription],n.[CFGroupeID]
	,e_fsd.StartDate,e_fsd.RecurringID,n.[ContactEmail], '
ELSE
SET @sqlcommand = @sqlcommand + N'
SELECT n.[ArticleID],n.[PortalID],n.[UserID]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Title] ELSE cl.[Title] END AS Title
	,CASE WHEN cl.ArticleID IS NULL THEN n.[SubTitle] ELSE cl.[SubTitle] END AS SubTitle
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Summary] ELSE cl.[Summary] END AS Summary
	,CASE WHEN cl.ArticleID IS NULL THEN n.[Article] ELSE cl.[Article] END AS Article
	,n.[ArticleImage],n.[DateAdded],n.[LastModified],n.[PublishDate]
	,n.[ExpireDate],n.[Approved],n.[Featured],n.[NumberOfViews],n.[RatingValue],n.[RatingCount],n.[AllowComments],n.[Active]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[TitleLink] ELSE cl.[clTitleLink] END AS TitleLink
	,n.[DetailType]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[DetailTypeData] ELSE cl.[DetailTypeData] END AS DetailTypeData
	,n.[DetailsTemplate],n.[DetailsTheme],n.[GalleryPosition],n.[GalleryDisplayType]
	,n.[ShowMainImage],n.[ShowMainImageFront],n.[CommentsTheme],n.[ArticleImageFolder],n.[NumberOfComments]
	,n.[ArticleImageSet]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaDecription] ELSE cl.[MetaDecription] END AS MetaDecription
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MetaKeywords] ELSE cl.[MetaKeywords] END AS MetaKeywords
	,n.[DisplayStyle],n.[DetailTarget]
	,n.[ArticleFromRSS],n.[HasPermissions],n.[EventArticle],n.[DetailMediaType],n.[DetailMediaData],n.[AuthorAliasName],n.[ShowGallery],n.[ArticleGalleryID]
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageTitle] ELSE cl.[MainImageTitle] END AS MainImageTitle
	,CASE WHEN cl.ArticleID IS NULL THEN n.[MainImageDescription] ELSE cl.[MainImageDescription] END AS MainImageDescription
	,n.[CFGroupeID],e_fsd.StartDate,e_fsd.RecurringID,n.[ContactEmail], ';

IF @QueryModulePermissions = 0
	SET @sqlcommand = @sqlcommand + N'0 AS CanEdit, '
ELSE IF @CanEditAllContent = 1
	SET @sqlcommand = @sqlcommand + N'1 AS CanEdit, '
ELSE
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CASE WHEN @HasEditCategories = 0
	THEN 
		CASE WHEN EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
			WHERE arp.ArticleID = n.ArticleID AND arp.Edit = 1 AND arp.RoleID IN (SELECT RoleID FROM #UserInRoles)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
			WHERE aup.ArticleID = n.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID
		)
		THEN 1 ELSE 0
		END
	ELSE
		CASE WHEN EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS c
			WHERE '
			IF @EditOnlyAsOwner = 1
				SET @sqlcommand = @sqlcommand + N' n.UserID = @UserID AND '

			SET @sqlcommand = @sqlcommand + N' c.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #UserEditCategories)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp
			WHERE arp.ArticleID = n.ArticleID AND arp.Edit = 1 AND arp.RoleID IN (SELECT RoleID FROM #UserInRoles)
		)
		OR EXISTS(
			SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup
			WHERE aup.ArticleID = n.ArticleID AND aup.Edit = 1 AND aup.UserID = @UserID
		)
		THEN 1 ELSE 0
		END
	END
	AS CanEdit, '
END

IF @LocaleCode IS NULL
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", c.CategoryName AS "@name", c.CategoryURL AS "@url", c.Color AS "@color", c.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON c.CategoryID = ci.CategoryID
	WHERE ci.ArticleID = n.ArticleID AND c.CategoryID IN (SELECT CategoryID FROM #ViewCategories)
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '
ELSE
SET @sqlcommand = @sqlcommand + N'
	(SELECT c.CategoryID AS "@id", c.PortalID AS "@portalid", lc.Name AS "@name", lc.CategoryURL AS "@url", c.Color AS "@color", lc.CategoryText AS "@description", c.CategoryImage AS "@image"
	FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
	INNER JOIN #LocalizedCategories AS lc ON c.CategoryID = lc.Id
	INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS ci ON ci.CategoryID = c.CategoryID
	WHERE ci.ArticleID = n.ArticleID
	ORDER BY c.Position
	FOR XML PATH(''category''), ROOT(''categories'')) AS CatToShow, '

IF @QueryModulePermissions = 0
	SET @sqlcommand = @sqlcommand + N' 0 AS Published, 0 AS Approve, '
ELSE
BEGIN
	SET @sqlcommand = @sqlcommand + N'
	CASE n.Active
		WHEN 1 THEN 0
		WHEN 0 THEN 1
	END AS Published, '
	IF @UserCanApprove = 0
		SET @sqlcommand = @sqlcommand + N'0 AS Approve, '
	ELSE
		SET @sqlcommand = @sqlcommand + N'
			CASE n.Approved
				WHEN 1 THEN 0
				WHEN 0 THEN n.Active
			END AS Approve, '
END

SET @sqlcommand = @sqlcommand + N' @AllContentCount AS ContentCount '

IF @LocaleCode IS NULL
BEGIN
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.CommentedDate
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,inner_ac.CommentedDate
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC'
					SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
					
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID ';
	END
	ELSE IF @OrderByCustomFieldID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N',e_fsd.' + @OrderByColumnName + ',(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END)
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.' + @OrderByColumnName + '
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,fv.' + @OrderByColumnName + '
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '

				IF @OrderByDirection = 'ASC' SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'

				SET @sqlcommand = @sqlcommand + N'fv.'+ @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON fv.ArticleID = inner_n.ArticleID AND fv.CustomFieldID = @OrderByCustomFieldID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID ';
	END
	ELSE
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '

				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID '
	END
END
ELSE
BEGIN
	IF @OrderByColumnName = N'CommentedDate'
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.CommentedDate
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,inner_ac.CommentedDate
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
				
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
	END
	ELSE IF @OrderByCustomFieldID IS NOT NULL
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID,finalSelection.' + @OrderByColumnName + '
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID,fv.' + @OrderByColumnName + '
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '

				IF @OrderByDirection = 'ASC' SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),'
				
				SET @sqlcommand = @sqlcommand + N'fv.'+ @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNfieldsValues] AS fv ON fv.ArticleID = inner_n.ArticleID AND fv.CustomFieldID = @OrderByCustomFieldID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
	END
	ELSE
	BEGIN
		SET @sqlcommand = @sqlcommand + N'
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		INNER JOIN (
			SELECT finalSelection.[ArticleID],finalSelection.StartDate,finalSelection.RecurringID
			FROM (
				SELECT inner_n.[ArticleID],inner_ac.StartDate,inner_ac.RecurringID
					,ROW_NUMBER() OVER (ORDER BY '
				IF @FirstOrderBy = 'Featured DESC' SET @sqlcommand = @sqlcommand + N'inner_n.Featured DESC, '
					
				SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + @SecondOrderBy + N') AS Kulike
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS inner_n
				INNER JOIN AllContent AS inner_ac ON inner_n.ArticleID = inner_ac.ArticleID
			) AS finalSelection
			WHERE finalSelection.Kulike BETWEEN @ItemsFrom AND @ItemsTo
		) AS e_fsd ON n.ArticleID = e_fsd.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON n.ArticleID = cl.ArticleID AND cl.LocaleCode = @LocaleCode ';
	END
END

SET @sqlcommand = @sqlcommand + N' ORDER BY ';
IF @FirstOrderBy = 'Featured DESC'
	SET @sqlcommand = @sqlcommand + N'Featured DESC, ';
IF @OrderByCustomFieldID IS NOT NULL AND @OrderByDirection = 'ASC'
	SET @sqlcommand = @sqlcommand + N'(CASE WHEN ' + @OrderByColumnName + ' IS NULL THEN 1 ELSE 0 END),';

SET @sqlcommand = @sqlcommand + @CleanOrderColumnWithDirection + N',n.ArticleID';

SET @sqlcommand = @sqlcommand + N'
IF OBJECT_ID(''tempdb..#UserInRoles'') IS NOT NULL
	DROP TABLE #UserInRoles;
IF OBJECT_ID(''tempdb..#ViewCategories'') IS NOT NULL
	DROP TABLE #ViewCategories;
IF OBJECT_ID(''tempdb..#ViewCategoriesWithFilter'') IS NOT NULL
	DROP TABLE #ViewCategoriesWithFilter;
IF OBJECT_ID(''tempdb..#FilterCategories'') IS NOT NULL
	DROP TABLE #FilterCategories; '

IF @IsPortalSharing = 1
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#SharingPortals'') IS NOT NULL
		DROP TABLE #SharingPortals; '

IF @CanEditAllContent = 0 AND @QueryModulePermissions = 1
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#UserEditCategories'') IS NOT NULL
		DROP TABLE #UserEditCategories; '

IF @LocaleCode IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#LocalizedCategories'') IS NOT NULL
		DROP TABLE #LocalizedCategories; '

IF @sqlAuthors IS NOT NULL
	SET @sqlcommand = @sqlcommand + N'
	IF OBJECT_ID(''tempdb..#FilterAuthors'') IS NOT NULL
		DROP TABLE #FilterAuthors; '

EXEC SP_EXECUTESQL @statement = @sqlcommand
	,@paramList = @paramList
	,@PortalID = @PortalID
	,@ModuleID = @ModuleID
	,@UserID = @UserID
	,@OrderByCustomFieldID = @OrderByCustomFieldID
	,@ItemsFrom = @ItemsFrom
	,@ItemsTo = @ItemsTo
	,@DateRangeType = @DateRangeType
	,@FromDate = @FromDate
	,@ToDate = @ToDate
	,@OnlyOneCategory = @OnlyOneCategory
	,@Featured = @Featured
	,@ShowAllAuthors = @ShowAllAuthors
	,@FilterByAuthor = @FilterByAuthor
	,@FilterByGroupID = @FilterByGroupID
	,@FilterByArticles = @FilterByArticles
	,@FilterByDNNUserID = @FilterByDNNUserID
	,@FilterByDNNGroupID = @FilterByDNNGroupID
	,@EditOnlyAsOwner = @EditOnlyAsOwner
	,@UserCanApprove = @UserCanApprove
	,@LocaleCode = @LocaleCode
	,@IsSocialInstance = @IsSocialInstance
	,@FirstOrderBy = @FirstOrderBy
	,@Perm_ViewAllCategores = @Perm_ViewAllCategores
	,@Perm_EditAllCategores = @Perm_EditAllCategores
	,@AdminOrSuperUser = @AdminOrSuperUser
	,@CategoryFilterType = @CategoryFilterType
	,@PermissionSettingsSource = @PermissionSettingsSource
	,@FillterSettingsSource = @FillterSettingsSource
	,@StartDate = @StartDate
	,@OuterModuleID = @OuterModuleID
	,@HideUnlocalizedItems = @HideUnlocalizedItems
	,@NewsFilterCategories = @NewsFilterCategories
	,@NewsFilterAuthors = @NewsFilterAuthors
	,@NewsFilterGroups = @NewsFilterGroups
	,@ListArchive = @ListArchive
	,@FilterByTagID = @FilterByTagID
	,@RestrictionByDateRange = @RestrictionByDateRange
	,@IsPortalSharing = @IsPortalSharing
	,@CanEditAllContent = @CanEditAllContent
	,@QueryPermissionsPerArticles = @QueryPermissionsPerArticles
	,@QueryModulePermissions = @QueryModulePermissions
GO
