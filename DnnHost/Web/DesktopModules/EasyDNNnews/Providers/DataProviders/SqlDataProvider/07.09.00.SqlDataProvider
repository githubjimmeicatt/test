IF NOT EXISTS (SELECT UpdateVersion FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUpdate] WHERE UpdateVersion = '07.09.00')
BEGIN
	INSERT {databaseOwner}[{objectQualifier}EasyDNNNewsUpdate]([UpdateVersion],[Finished],[InstallType]) VALUES(N'07.09.00',0, N'DNN')
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'ListCommentsTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD ListCommentsTemplate  NVARCHAR(250) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'ListCommentsTemplate')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD ListCommentsTemplate NVARCHAR(250) NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'OpenArticleLinkInListMode')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD OpenArticleLinkInListMode  BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsPortalSettings_OpenArticleLinkInListMode DEFAULT (0) NOT NULL
END
GO
IF NOT EXISTS (select * from INFORMATION_SCHEMA.columns where table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'OpenArticleLinkInListMode')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD OpenArticleLinkInListMode  BIT CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_OpenArticleLinkInListMode DEFAULT (0) NOT NULL
END
GO
BEGIN TRY
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyDNNNewsPortalSettings' and column_name = 'FilterRelatedArticlesBy')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] ADD FilterRelatedArticlesBy TINYINT CONSTRAINT DF_{objectQualifier}EasyDNNNewsPortalSettings_FilterRelatedArticlesBy DEFAULT (1) NOT NULL
	EXEC ('UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] SET [FilterRelatedArticlesBy] = 2 WHERE FilterRelatedArticlesByCategory = 1');
	EXEC('ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsPortalSettings] DROP COLUMN [FilterRelatedArticlesByCategory]');
END
END TRY
BEGIN CATCH
END CATCH
GO

BEGIN TRY
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.columns WHERE table_name = '{objectQualifier}EasyDNNNewsModuleSettings' and column_name = 'FilterRelatedArticlesBy')
BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] ADD FilterRelatedArticlesBy TINYINT CONSTRAINT DF_{objectQualifier}EasyDNNNewsModuleSettings_FilterRelatedArticlesBy DEFAULT (1) NOT NULL
	EXEC ('UPDATE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] SET [FilterRelatedArticlesBy] = 2 WHERE FilterRelatedArticlesByCategory = 1');
	EXEC('ALTER TABLE {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] DROP COLUMN [FilterRelatedArticlesByCategory]');
END
END TRY
BEGIN CATCH
END CATCH
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetRelatedArticlesByArticleTags]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetRelatedArticlesByArticleTags]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNNewsGetRelatedArticlesByArticleTags]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetRelatedArticlesByArticleTags] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNNewsGetRelatedArticlesByArticleTags]
	@PortalID INT,
	@ModuleID INT,
	@UserID INT,
	@ArticleID INT,
	@NumberOfItems INT = 5,
	@OrderBy NVARCHAR(30) = 'PublishDate DESC',
	@UserCanApprove BIT = 0,
	@LocaleCode NVARCHAR(20) = NULL,
	@Perm_ViewAllCategores BIT = 0,
	@AdminOrSuperUser BIT = 0,
	@PermissionSettingsSource BIT = 1,
	@FillterSettingsSource BIT = 1,
	@CategoryFilterType TINYINT = 1,
	@HideUnlocalizedItems BIT = 0,
	@FilterRelatedArticlesBy TINYINT = 0
AS
SET NOCOUNT ON;
IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems]
WHERE ArticleID <> @ArticleID AND TagID IN (SELECT [TagID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] WHERE ArticleID = @ArticleID))
BEGIN
	DECLARE @CurrentDate DATETIME;
	SET @CurrentDate = GETUTCDATE();

	DECLARE @UserInRoles TABLE (RoleID INT NOT NULL PRIMARY KEY);
	IF @UserID <> -1
	INSERT INTO @UserInRoles
	SELECT DISTINCT r.[RoleID]
	FROM {databaseOwner}[{objectQualifier}Roles] AS r
	INNER JOIN {databaseOwner}[{objectQualifier}UserRoles] AS ur ON ur.RoleID = r.RoleID
	WHERE ur.UserID = @UserID AND r.PortalID = @PortalID AND (ur.ExpiryDate IS NULL OR ur.ExpiryDate > @CurrentDate) AND (ur.EffectiveDate IS NULL OR ur.EffectiveDate < @CurrentDate);

	DECLARE @UserViewCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY);
	DECLARE @UserViewCategoriesWithFilter TABLE (CategoryID INT NOT NULL PRIMARY KEY);
	DECLARE @FiltredByCategories TABLE (CategoryID INT NOT NULL PRIMARY KEY);

	IF @AdminOrSuperUser = 1 OR @Perm_ViewAllCategores = 1
	BEGIN
		INSERT INTO @UserViewCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	END
	ELSE IF @UserID = -1
	BEGIN	
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 
			WHERE rpsc.PremissionSettingsID IN (SELECT PremissionSettingsID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] WHERE PortalID = @PortalID AND ModuleID IS NULL AND RoleID IS NULL);
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.[PremissionSettingsID] IN (SELECT [PremissionSettingsID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] WHERE [PortalID] = @PortalID AND [ModuleID] = @ModuleID AND [RoleID] IS NULL);
		END
	END
	ELSE -- registrirani korisnik
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.[PremissionSettingsID] IN (SELECT [PremissionSettingsID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] WHERE [PortalID] = @PortalID AND [ModuleID] IS NULL AND RoleID IN (SELECT [RoleID] FROM @UserInRoles))
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			WHERE upsc.[PremissionSettingsID] IN (SELECT [PremissionSettingsID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] WHERE [PortalID] = @PortalID AND [UserID] = @UserID AND [ModuleID] IS NULL)
		END
		ELSE -- by module
		BEGIN
			INSERT INTO @UserViewCategories
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			WHERE rpsc.[PremissionSettingsID] IN (SELECT [PremissionSettingsID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] WHERE [ModuleID] = @ModuleID AND RoleID IN (SELECT [RoleID] FROM @UserInRoles))
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			WHERE upsc.[PremissionSettingsID] IN (SELECT [PremissionSettingsID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] WHERE [PortalID] = @PortalID AND [UserID] = @UserID AND [ModuleID] = @ModuleID)
		END
	END

	IF @FilterRelatedArticlesBy = 1
	BEGIN
		IF @CategoryFilterType = 0 -- 0 All categories
		BEGIN
			INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
			INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
		END
		ELSE IF @CategoryFilterType = 1 -- 1 - SELECTion
		BEGIN
			IF @FillterSettingsSource = 1 -- portal
			BEGIN
				INSERT INTO @UserViewCategoriesWithFilter 
				SELECT c.[CategoryID] FROM @UserViewCategories AS c
				WHERE c.[CategoryID] IN (SELECT pci.CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] AS pci WHERE pci.PortalID = @PortalID);		
				INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID;
			END
			ELSE -- module
			BEGIN
				INSERT INTO @UserViewCategoriesWithFilter 
				SELECT c.[CategoryID] FROM @UserViewCategories AS c
				WHERE c.[CategoryID] IN (SELECT mci.CategoryID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] AS mci WHERE mci.ModuleID = @ModuleID);		
				INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID;
			END
		END
		ELSE IF @CategoryFilterType = 2 -- 2 - AutoAdd
		BEGIN
			IF @FillterSettingsSource = 1 -- portal
			BEGIN
				;WITH hierarchy AS(
					SELECT [CategoryID], [ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryItems] WHERE PortalID = @PortalID)) AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
					)
				INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;	
				INSERT INTO @UserViewCategoriesWithFilter SELECT CategoryID FROM @UserViewCategories WHERE CategoryID IN (SELECT CategoryID FROM @FiltredByCategories);		
			END
			ELSE -- module
			BEGIN
				;WITH hierarchy AS(
					SELECT [CategoryID], [ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS cl
					WHERE (cl.ParentCategory IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID) OR cl.CategoryID IN (SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleCategoryItems] WHERE ModuleID = @ModuleID)) AND PortalID = @PortalID
					UNION ALL
					SELECT c.[CategoryID], c.[ParentCategory]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c INNER JOIN hierarchy AS p ON c.ParentCategory = p.CategoryID WHERE c.PortalID = @PortalID
					)
				INSERT INTO @FiltredByCategories SELECT DISTINCT CategoryID FROM hierarchy;
				INSERT INTO @UserViewCategoriesWithFilter SELECT CategoryID FROM @UserViewCategories WHERE CategoryID IN (SELECT CategoryID FROM @FiltredByCategories);
			END
		END
	END
	ELSE IF @FilterRelatedArticlesBy = 2
	BEGIN
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] WHERE ArticleID = @ArticleID;
		
		INSERT INTO @UserViewCategoriesWithFilter
		SELECT c.[CategoryID] FROM @UserViewCategories AS c
		WHERE c.[CategoryID] IN (SELECT CategoryID FROM @FiltredByCategories);
		
	END
	ELSE
	BEGIN
		INSERT INTO @UserViewCategoriesWithFilter SELECT [CategoryID] FROM @UserViewCategories;
		INSERT INTO @FiltredByCategories SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
	END

DECLARE @DateRangeType TINYINT;
DECLARE @StartDate DATETIME;

	IF @LocaleCode IS NULL
	BEGIN
		SELECT TOP (@NumberOfItems) n.[ArticleID],n.[PortalID],n.[UserID],n.[Title],n.[SubTitle],n.[Summary],n.[Article],n.[ArticleImage],n.[PublishDate],n.[TitleLink],n.[AuthorAliasName],n.[DetailType],n.[DetailTypeData],n.[CFGroupeID],
		n.[EventArticle],
		CASE WHEN n.EventArticle = 0 THEN n.PublishDate ELSE CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END END AS StartDate,
		CASE WHEN n.EventArticle = 1 AND ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS RecurringID,
		CASE WHEN @CategoryFilterType = 0 THEN NULL
		ELSE
			CASE WHEN @FillterSettingsSource = 1 THEN
			 (SELECT TOP 1 CONVERT(varchar(10), clink.NewsModuleID) + ':' + CONVERT(varchar(10), tm.[TabID])
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as c
				INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cl ON c.CategoryID = cl.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryLink] as clink ON clink.CategoryID = cl.CategoryID AND clink.SourcePortalID = @PortalID
				INNER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON clink.NewsModuleID = tm.ModuleID
				WHERE c.ArticleID = n.[ArticleID] AND cl.PortalID = @PortalID ORDER BY cl.Position)
			ELSE
			(SELECT TOP 1 CONVERT(varchar(10), clink.NewsModuleID) + ':' + CONVERT(varchar(10), tm.[TabID]) AS WhereToOpen
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as c
				INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cl ON c.CategoryID = cl.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] as clink ON clink.CategoryID = cl.CategoryID AND clink.SourceModuleID = @ModuleID
				INNER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON clink.NewsModuleID = tm.ModuleID
				WHERE c.ArticleID = n.[ArticleID] AND cl.PortalID = @PortalID ORDER BY cl.Position)
			END		
		END AS WhereToOpenLink
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ned.ArticleID = nerd.ArticleID AND ned.ArticleID IS NOT NULL AND ned.Recurring = 1 AND 1 = ( 
		CASE WHEN @DateRangeType = 2
		THEN
			CASE WHEN 
				((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
				OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime)))
			THEN 1 ELSE 0 END
		ELSE
			CASE WHEN
				(nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime))
			THEN 1 ELSE 0 END
		END )
	WHERE n.ArticleID IN(
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM @UserViewCategoriesWithFilter)
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID AND (ti.TagID IN (SELECT [TagID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] WHERE ArticleID = @ArticleID))		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
				AND na.ArticleID <> @ArticleID
				AND (@UserCanApprove = 1 OR na.Approved = 1)
				AND (na.Active = 1 OR na.UserID = @UserID)	
			UNION ALL
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM @FiltredByCategories)
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID AND (ti.TagID IN (SELECT [TagID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] WHERE ArticleID = @ArticleID))		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
				AND na.ArticleID <> @ArticleID
				AND aup.Show = 1
				AND (@UserCanApprove = 1 OR na.Approved = 1)
				AND (na.Active = 1 OR na.UserID = @UserID)
				AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM @FiltredByCategories)
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID AND (ti.TagID IN (SELECT [TagID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] WHERE ArticleID = @ArticleID))		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
				AND na.ArticleID <> @ArticleID
				AND arp.Show = 1
				AND (@UserCanApprove = 1 OR na.Approved = 1)
				AND (na.Active = 1 OR na.UserID = @UserID)
				AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
			)
		ORDER BY
			CASE WHEN @OrderBy ='PublishDate DESC' THEN PublishDate END DESC,
			CASE WHEN @OrderBy ='NumberOfViews DESC' THEN NumberOfViews END DESC;
	END
	ELSE
	BEGIN
		;WITH FinalArticleIDsSet (ArticleID, StartDate, RecurringID) AS(
		SELECT TOP (@NumberOfItems) n.[ArticleID],
		CASE WHEN n.EventArticle = 0 THEN n.PublishDate ELSE CASE WHEN ned.Recurring = 1 THEN nerd.StartDateTime ELSE ned.StartDate END END AS StartDate,
		CASE WHEN n.EventArticle = 1 AND ned.Recurring = 1 THEN nerd.RecurringID ELSE NULL END AS RecurringID
		FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsData] AS ned ON n.ArticleID = ned.ArticleID
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerd ON ned.ArticleID = nerd.ArticleID AND ned.ArticleID IS NOT NULL AND ned.Recurring = 1 AND 1 = ( 
		CASE WHEN @DateRangeType = 2
		THEN
			CASE WHEN 
				((nerd.StartDateTime <= @CurrentDate AND ((nerd.StartDateTime >= @StartDate) OR (nerd.StartDateTime < @StartDate AND nerd.EndDateTime >= @StartDate)))
				OR (nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) erd.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS erd WHERE erd.ArticleID = ned.ArticleID AND erd.StartDateTime > @CurrentDate ORDER BY erd.StartDateTime)))
			THEN 1 ELSE 0 END
		ELSE
			CASE WHEN
				(nerd.StartDateTime <= @CurrentDate OR nerd.RecurringID IN (SELECT TOP(CASE WHEN ned.UpcomingOccurrences IS NULL THEN 1 ELSE ned.UpcomingOccurrences END) nerdInner.RecurringID FROM {databaseOwner}[{objectQualifier}EasyDNNNewsEventsRecurringData] AS nerdInner WHERE nerdInner.ArticleID = ned.ArticleID AND nerdInner.StartDateTime > @CurrentDate ORDER BY nerdInner.StartDateTime))
			THEN 1 ELSE 0 END
		END )
		WHERE n.ArticleID IN(
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM @UserViewCategoriesWithFilter)
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID AND (ti.TagID IN (SELECT [TagID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] WHERE ArticleID = @ArticleID))		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 0
				AND na.HideDefaultLocale = 0
				AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
				AND na.ArticleID <> @ArticleID
				AND (@UserCanApprove = 1 OR na.Approved = 1)
				AND (na.Active = 1 OR na.UserID = @UserID)
			UNION ALL
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleUserPermissions] AS aup ON na.ArticleID = aup.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM @FiltredByCategories)
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID AND (ti.TagID IN (SELECT [TagID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] WHERE ArticleID = @ArticleID))		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
				AND na.ArticleID <> @ArticleID
				AND aup.Show = 1
				AND (@UserCanApprove = 1 OR na.Approved = 1)
				AND (na.Active = 1 OR na.UserID=@UserID)
				AND ((@UserID = -1 AND aup.UserID IS NULL) OR (aup.UserID = @UserID))
			UNION
			SELECT na.[ArticleID] FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS na
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsArticleRolePermissions] AS arp ON na.ArticleID = arp.ArticleID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] AS cat ON na.ArticleID = cat.ArticleID AND cat.CategoryID IN (SELECT CategoryID FROM @FiltredByCategories)
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] AS ti ON na.ArticleID = ti.ArticleID AND (ti.TagID IN (SELECT [TagID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsTagsItems] WHERE ArticleID = @ArticleID))		
			WHERE na.PortalID=@PortalID
				AND na.HasPermissions = 1
				AND na.HideDefaultLocale = 0
				AND @CurrentDate BETWEEN na.PublishDate AND na.[ExpireDate]
				AND na.ArticleID <> @ArticleID
				AND arp.Show = 1
				AND (@UserCanApprove = 1 OR na.Approved = 1)
				AND (na.Active = 1 OR na.UserID=@UserID)
				AND arp.RoleID IN (SELECT [RoleID] FROM @UserInRoles)
			)
		ORDER BY
			CASE WHEN @OrderBy ='PublishDate DESC' THEN PublishDate END DESC,
			CASE WHEN @OrderBy ='NumberOfViews DESC' THEN NumberOfViews END DESC
	)
	SELECT *,
		CASE WHEN @CategoryFilterType = 0 THEN NULL
		ELSE
			CASE WHEN @FillterSettingsSource = 1 THEN
			 (SELECT TOP 1 CONVERT(varchar(10), clink.NewsModuleID) + ':' + CONVERT(varchar(10), tm.[TabID])
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as c
				INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cl ON c.CategoryID = cl.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalCategoryLink] as clink ON clink.CategoryID = cl.CategoryID AND clink.SourcePortalID = @PortalID
				INNER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON clink.NewsModuleID = tm.ModuleID
				WHERE c.ArticleID = Result.[ArticleID] AND cl.PortalID = @PortalID ORDER BY cl.Position)
			ELSE
			(SELECT TOP 1 CONVERT(varchar(10), clink.NewsModuleID) + ':' + CONVERT(varchar(10), tm.[TabID]) AS WhereToOpen
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategories] as c
				INNER JOIN @UserViewCategories AS uvc ON c.CategoryID = uvc.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] as cl ON c.CategoryID = cl.CategoryID
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryLink] as clink ON clink.CategoryID = cl.CategoryID AND clink.SourceModuleID = @ModuleID
				INNER JOIN {databaseOwner}[{objectQualifier}TabModules] AS tm ON clink.NewsModuleID = tm.ModuleID
				WHERE c.ArticleID = Result.[ArticleID] AND cl.PortalID = @PortalID ORDER BY cl.Position)
			END		
		END AS WhereToOpenLink
		FROM (
			SELECT n.[ArticleID],n.[PortalID],n.[UserID],	
				CASE WHEN cl.ArticleID IS NULL THEN n.[Title] ELSE cl.[Title] END AS Title,
				CASE WHEN cl.ArticleID IS NULL THEN n.[SubTitle] ELSE cl.[SubTitle] END AS SubTitle,
				CASE WHEN cl.ArticleID IS NULL THEN n.[Summary] ELSE cl.[Summary] END AS Summary,
				CASE WHEN cl.ArticleID IS NULL THEN n.[Article] ELSE cl.[Article] END AS Article,
				n.[ArticleImage],n.[PublishDate],		
				CASE WHEN cl.ArticleID IS NULL THEN n.[TitleLink] ELSE cl.[clTitleLink] END AS TitleLink,
				n.[NumberOfViews],n.[AuthorAliasName],n.[DetailType],n.[DetailTypeData],n.[CFGroupeID],
				n.[EventArticle],fas.[RecurringID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNews] AS n
				INNER JOIN FinalArticleIDsSet AS fas ON n.ArticleID = fas.ArticleID
				LEFT OUTER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsContentLocalization] AS cl ON cl.ArticleID = n.ArticleID AND LocaleCode = @LocaleCode 
			) As Result
		ORDER BY
			CASE WHEN @OrderBy ='PublishDate DESC' THEN PublishDate END DESC,
			CASE WHEN @OrderBy ='NumberOfViews DESC' THEN NumberOfViews END DESC
	END
END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsViewCategories]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsViewCategories]
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsViewCategories]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsViewCategories] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsViewCategories]
	@PortalID INT,
	@PermissionsModuleID INT,
	@UserID INT,
	@AdminOrSuperUser BIT,
	@PermissionSettingsSource BIT,
	@IsPortalSharing BIT,
	@ViewAllCategores BIT = NULL 
AS
SET NOCOUNT ON;

DECLARE @CurrentDate DATETIME;
SET @CurrentDate = GETUTCDATE();

IF @IsPortalSharing = 1
BEGIN
	IF @AdminOrSuperUser = 1 OR @ViewAllCategores = 1 OR @ViewAllCategores IS NULL
		SELECT [CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
		WHERE PortalID IN (SELECT PortalID FROM #SharingPortals);
	ELSE IF @UserID = -1
	BEGIN	
		IF @ViewAllCategores IS NULL AND EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
			WHERE PortalID IN (SELECT PortalID FROM #SharingPortals);
		ELSE
			SELECT rpsc.[CategoryID]
			FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 			
			WHERE rpsc.PremissionSettingsID IN (
				SELECT PremissionSettingsID
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				WHERE rps.ModuleID = @PermissionsModuleID
					AND rps.RoleID IS NULL);
	END
	ELSE -- registrirani korisnik
	BEGIN
		IF @ViewAllCategores IS NULL AND (
			EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
				INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.ModuleID = @PermissionsModuleID AND rps.ShowAllCategories = 1
			) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
			WHERE ups.UserID = @UserID AND ups.ModuleID = @PermissionsModuleID AND ups.ShowAllCategories = 1
			)
		)
			SELECT [CategoryID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList]
			WHERE PortalID IN (SELECT PortalID FROM #SharingPortals);
		ELSE
		BEGIN
			SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
			INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
			WHERE rps.ModuleID = @PermissionsModuleID
			UNION
			SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
			WHERE ups.UserID = @UserID AND ups.ModuleID = @PermissionsModuleID;
		END
	END
END
ELSE
	BEGIN
	IF @AdminOrSuperUser = 1 OR @ViewAllCategores = 1 OR @ViewAllCategores IS NULL
		SELECT c.[CategoryID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] AS c
		WHERE c.PortalID = @PortalID;
	ELSE IF @UserID = -1
	BEGIN	
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			IF @ViewAllCategores IS NULL AND EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
				SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			ELSE
				SELECT rpsc.[CategoryID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				WHERE rpsc.PremissionSettingsID IN (
					SELECT PremissionSettingsID
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					WHERE rps.PortalID = @PortalID
						AND rps.ModuleID IS NULL
						AND rps.RoleID IS NULL);
		END
		ELSE -- by module
		BEGIN
			IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID AND PermissionsPMSource = 1)
			BEGIN
				IF @ViewAllCategores IS NULL AND EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.PortalID = @PortalID  AND rps.ModuleID IS NULL AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
					SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
				ELSE
					SELECT rpsc.[CategoryID]
					FROM  {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc 			
					WHERE rpsc.PremissionSettingsID IN (
						SELECT PremissionSettingsID
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
						WHERE rps.PortalID = @PortalID
							AND rps.ModuleID IS NULL
							AND rps.RoleID IS NULL);
			END
			ELSE
			BEGIN
				IF @ViewAllCategores IS NULL AND EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps WHERE rps.ModuleID = @PermissionsModuleID AND rps.RoleID IS NULL AND rps.ShowAllCategories = 1)
					SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
				ELSE
					SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
					WHERE rpsc.PremissionSettingsID IN (
						SELECT PremissionSettingsID
						FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
						WHERE rps.PortalID = @PortalID
							AND rps.ModuleID = @PermissionsModuleID
							AND rps.RoleID IS NULL);
			END
		END
	END
	ELSE -- registrirani korisnik
	BEGIN
		IF @PermissionSettingsSource = 1 -- by portal
		BEGIN
			IF @ViewAllCategores IS NULL AND (
				EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
					INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
				) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
					WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
				)
			)
				SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
			ELSE
			BEGIN
				SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
				INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
				WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
				UNION
				SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
				WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL;
			END
		END
		ELSE -- by module
		BEGIN
			IF EXISTS(SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleSettings] WHERE ModuleID = @PermissionsModuleID AND PermissionsPMSource = 1)
			BEGIN
				IF @ViewAllCategores IS NULL AND (
					EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
							INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
							WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL AND rps.ShowAllCategories = 1
					) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
						WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL AND ups.ShowAllCategories = 1
					)
				)
					SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
				ELSE
				BEGIN
					SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
					INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
					WHERE rps.PortalID = @PortalID AND rps.ModuleID IS NULL
					UNION
					SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
					WHERE ups.UserID = @UserID AND ups.PortalID = @PortalID AND ups.ModuleID IS NULL;
				END
			END
			ELSE
			BEGIN
				IF @ViewAllCategores IS NULL AND (
					EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps
							INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID
							WHERE rps.ModuleID = @PermissionsModuleID AND rps.ShowAllCategories = 1 -- MAKNUTO PORTALID
					) OR EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups
						WHERE ups.UserID = @UserID AND ups.ModuleID = @PermissionsModuleID AND ups.ShowAllCategories = 1  -- MAKNUTO PORTALID
					)
				)
					SELECT [CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsCategoryList] WHERE PortalID = @PortalID;
				ELSE
				BEGIN
					SELECT rpsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionsShowCategories] AS rpsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsRolePremissionSettings] AS rps ON rps.PremissionSettingsID = rpsc.PremissionSettingsID
					INNER JOIN #UserInRoles AS uir ON rps.RoleID = uir.RoleID 
					WHERE rps.ModuleID = @PermissionsModuleID  -- MAKNUTO PORTALID
					UNION
					SELECT upsc.[CategoryID] FROM {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionsShowCategories] AS upsc
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsUserPremissionSettings] AS ups ON ups.PremissionSettingsID = upsc.PremissionSettingsID
					WHERE ups.UserID = @UserID AND ups.ModuleID = @PermissionsModuleID;  -- MAKNUTO PORTALID
				END
			END
		END
	END
END
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EasyDNNnewsFilterAuthors]') AND type in (N'P', N'PC'))
BEGIN
EXEC dbo.sp_executesql @statement = N'CREATE PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterAuthors] AS' 
END
GO
ALTER PROCEDURE {databaseOwner}[{objectQualifier}EasyDNNnewsFilterAuthors]
	@PortalID INT,
	@ModuleID INT,
	@FillterSettingsSource BIT,
	@FilterByAuthor INT,
	@OuterModuleID INT,
	@NewsFilterAuthors NVARCHAR(1000),
	@NewsFilterGroups NVARCHAR(1000),
	@IsSocialInstance BIT,
	@FilterByDNNGroupID INT,
	@FilterByGroupID INT,
	@ShowAllAuthors BIT
AS
SET NOCOUNT ON;
IF @NewsFilterAuthors IS NULL AND @NewsFilterGroups IS NULL
BEGIN
	IF @IsSocialInstance = 1
	BEGIN
		IF @FilterByDNNGroupID <> 0 AND @FilterByAuthor <> 0
			SELECT ap.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
			WHERE ap.[AuthorProfileID] = @FilterByAuthor;
	END
	ELSE
	BEGIN
		IF @OuterModuleID IS NOT NULL AND @ShowAllAuthors = 0	
			SELECT mai.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai
			WHERE mai.ModuleID = @OuterModuleID
			UNION 
			SELECT ap.[UserID]
			FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
			INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
			WHERE mgi.ModuleID = @OuterModuleID;
		ELSE
		BEGIN
			IF @FilterByAuthor = 0 AND @FilterByGroupID = 0 AND @ShowAllAuthors = 0			
			BEGIN
				IF @FillterSettingsSource = 1
					SELECT pai.[UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsPortalAuthorsItems] AS pai
					WHERE pai.PortalID = @PortalID
					UNION 
					SELECT ap.[UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsPortalGroupItems] AS pgi ON pgi.GroupID = agi.GroupID
					WHERE pgi.PortalID = @PortalID;
				ELSE
					SELECT mai.[UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsModuleAuthorsItems] AS mai
					WHERE mai.ModuleID = @ModuleID
					UNION 
					SELECT ap.[UserID]
					FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
					INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsModuleGroupItems] AS mgi ON mgi.GroupID = agi.GroupID
					WHERE mgi.ModuleID = @ModuleID;
			END
			ELSE IF @FilterByAuthor <> 0
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
				WHERE ap.[AuthorProfileID] = @FilterByAuthor;
			ELSE IF @FilterByGroupID <> 0
				SELECT ap.[UserID]
				FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
				INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID	
				WHERE agi.GroupID = @FilterByGroupID;
		END
	END
END
ELSE
BEGIN
	IF @NewsFilterAuthors IS NOT NULL AND @NewsFilterGroups IS NOT NULL
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID
		WHERE ap.PortalID IN (SELECT PortalID FROM #SharingPortals)
		UNION
		SELECT ap.[UserID] 
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.PortalID IN (SELECT PortalID FROM #SharingPortals);
	ELSE IF @NewsFilterAuthors IS NOT NULL
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterAuthors) AS af ON ap.AuthorProfileID = af.KeyID
		WHERE ap.PortalID IN (SELECT PortalID FROM #SharingPortals);
	ELSE IF @NewsFilterGroups IS NOT NULL
		SELECT ap.[UserID]
		FROM {databaseOwner}[{objectQualifier}EasyDNNNewsAuthorProfile] AS ap 
		INNER JOIN {databaseOwner}[{objectQualifier}EasyDNNNewsAutorGroupItems] AS agi ON ap.AuthorProfileID = agi.AuthorProfileID
		INNER JOIN {databaseOwner}[{objectQualifier}EDS_StringListToTable](@NewsFilterGroups) AS a ON a.KeyID = agi.GroupID	
		WHERE ap.PortalID IN (SELECT PortalID FROM #SharingPortals);
END
GO