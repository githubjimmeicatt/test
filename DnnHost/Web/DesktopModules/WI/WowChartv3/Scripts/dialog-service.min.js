angular.module("dialogService", []).service("dialogService", ["$rootScope", "$q", "$compile", "$templateCache", "$http", function (e, r, n, o, i) { var a = this; function t(e) { var r = a.dialogs[e]; if (!angular.isDefined(r)) throw "DialogService does not have a reference to dialog id " + e; return r } function l(e) { return e ? e.replace(/^\s+|\s+$/g, "") : e } a.dialogs = {}, this.open = function (c, d, f, s) { if (!angular.isDefined(c)) throw "dialogService requires id in call to open"; if (!angular.isDefined(d)) throw "dialogService requires template in call to open"; angular.isDefined(f) || (f = null); var u = {}; angular.isDefined(s) && angular.extend(u, s); var g = { scope: null, ref: null, deferred: r.defer() }; return function (e) { var n = r.defer(), a = o.get(e); { if (!angular.isDefined(a)) return i.get(e, { cache: o }).then(function (n) { var i = n.data; return i && i.length ? (i = l(i), o.put(e, i), i) : r.reject("Template " + e + " was not found") }, function () { return r.reject("Template " + e + " was not found") }); a = l(a), n.resolve(a) } return n.promise }(d).then(function (r) { g.scope = e.$new(), g.scope.model = f; var o = n(r); g.ref = $(o(g.scope)); var i = u.close; u.close = function (e, r) { var n, o; i && i(e, r), (o = t(n = c)).deferred.reject(), o.scope.$destroy(), o.ref.remove(), delete a.dialogs[n] }, g.ref.dialog(u), g.ref.dialog("open"), a.dialogs[c] = g }, function (e) { throw e }), g.deferred.promise }, this.close = function (e, r) { var n = t(e); n.deferred.resolve(r), n.ref.dialog("close") }, this.cancel = function (e) { var r = t(e); r.deferred.reject(), r.ref.dialog("close") } }]);