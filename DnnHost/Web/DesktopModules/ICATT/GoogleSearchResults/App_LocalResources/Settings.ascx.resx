<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblDefaultCollection.Text" xml:space="preserve">
    <value>Default collection</value>
  </data>
  <data name="lblDefaultCollection.Help" xml:space="preserve">
    <value>Provides the default collection that will be seached by the Google Mini applience. The default collection name provided here will be overridden by any querysting or form parameter named 'site' in the request. This is a required setting.&lt;br /&gt;&lt;br /&gt;
This may also be a commaseparated list of collections.</value>
  </data>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>GoogleSearchResults Settings</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>For the complet list of parameter accepted by the Google Mini applicence see the declaration for the GoogleMiniParameterNames class in the source code. The settings below are all required.</value>
  </data>
  <data name="lblDefaultFrontEndName.Help" xml:space="preserve">
    <value>Provides the name of the Google Mini Front End defenition to use. The Front End defines Keymatch, Synonyms, Filters and Removed URLs settings. The Format defined in the Front End is not used by this module.</value>
  </data>
  <data name="lblDefaultFrontEndName.Text" xml:space="preserve">
    <value>Default frontend</value>
  </data>
  <data name="lblDefaultPageSize.Help" xml:space="preserve">
    <value>Number of results on a page. Can be overridden by adding a 'num' parameter to the querystring of a request.
The maximum page site is 999 (this is also the maximum number of results in Google Mini)</value>
  </data>
  <data name="lblDefaultPageSize.Text" xml:space="preserve">
    <value>Default Page Size</value>
  </data>
  <data name="lblReloadXsl.Help" xml:space="preserve">
    <value>This button forces the reload of the XSL stylesheet used to format the searchresults. The stylesheet is cached and normally only reloaded when the application is restarted.</value>
  </data>
  <data name="lblReloadXsl.Text" xml:space="preserve">
    <value>Reload XSL stylesheet</value>
  </data>
  <data name="AttentionCaseSensitive.Text" xml:space="preserve">
    <value>Attention! Case sensitive!</value>
  </data>
  <data name="CollectionFixed.Text" xml:space="preserve">
    <value>Fixed</value>
  </data>
  <data name="CollectionRoleBased.Text" xml:space="preserve">
    <value>Role based</value>
  </data>
  <data name="lblCollectionMode.Help" xml:space="preserve">
    <value>Indicates whether the collections searched by Google are dictated by the roles the user is linked to.</value>
  </data>
  <data name="lblCollectionMode.Text" xml:space="preserve">
    <value>Searchcollection selection</value>
  </data>
  <data name="lblRolesHeader.Help" xml:space="preserve">
    <value>De rollen die binnen de portal beschikbaar zijn.</value>
  </data>
  <data name="lblRolesHeader.Text" xml:space="preserve">
    <value>Roles</value>
  </data>
  <data name="lblSearchCollectionsHeader.Help" xml:space="preserve">
    <value>Vul hier een commaseparated list in van de collections die doorzocht mogen worden door gebruikers met de desbetreffende rol</value>
  </data>
  <data name="lblSearchCollectionsHeader.Text" xml:space="preserve">
    <value>Search Collections</value>
  </data>
  <data name="lblRoleBasedCollection.Help" xml:space="preserve">
    <value>Use RoleA,coll1,coll2,...;RoleB,coll1,coll3;RoleC,coll1 etcetera. 

The Default Collection will be used by 'All Users'. Collections specified here for a role will be searched in addition to the collections in Default Collections for users that have that role.

If you want to exclude a collection from de Default Searchcollection prefix the collection name with a - (minus) sign. Use rolename 'Authenticated' for users that are logged in. Use rolename 'UnAuthenticed' for users that are nog logged in.</value>
  </data>
  <data name="lblRoleBasedCollection.Text" xml:space="preserve">
    <value>Role bases search collections</value>
  </data>
  <data name="valRoleBasedCollections.InvalidFormat" xml:space="preserve">
    <value>Invalid format. See the help link displayed with this field.</value>
  </data>
  <data name="valRoleBasedCollections.InvalidRole" xml:space="preserve">
    <value>Unknown role '{0}'.</value>
  </data>
  <data name="valRoleBasedCollections.Text" xml:space="preserve">
    <value>Incorrect format. Use role,collection1,collection2,...;role2,collection,...;role3.. etc.</value>
  </data>
</root>