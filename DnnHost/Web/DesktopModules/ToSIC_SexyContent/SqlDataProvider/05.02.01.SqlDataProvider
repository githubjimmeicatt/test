
-- Script Block for 2SexyContent 05.05.00 Update
-- ---------------------------------------------
-- This SQL Script Block must be included in every .SqlDataProvider file
-- for 2SexyContent <= 05.05.00 because of the rename of the internal
-- module name. It does not have to be included for newer SQL scripts.
-- This script changes the module name and the breaks the installation
-- so the DNN cache is refreshed. After the upgrade is triggered again,
-- the installation works.

DECLARE @IsUpgradeFromPreviousVersion int
SELECT @IsUpgradeFromPreviousVersion = CASE WHEN EXISTS(SELECT * FROM DesktopModules WHERE ModuleName = N'2SexyContent') THEN CAST (1 AS BIT) ELSE CAST (0 AS BIT) END

If @IsUpgradeFromPreviousVersion = 1
BEGIN
	UPDATE       DesktopModules
	SET                ModuleName = N'2sxc'
	WHERE        (ModuleName = N'2SexyContent')

	RAISERROR(N'Please run this upgrade again to finish the process. This is a necessary step because of the internal rename of the 2SexyContent module. ************************************************************************************************************************************************************************** PLEASE RUN THIS UPGRADE AGAIN TO FINISH THE PROCESS. This is a necessary step because of the internal rename of the 2SexyContent module. **************************************************************************************************************************************************************************', 16, 1)
	RETURN
END

-- End of the Script Block for 2SexyContent 05.05.00 Update

-- make sure sql rolls back automatically in case of error.
SET XACT_ABORT ON

BEGIN TRANSACTION SexyContentUpdate

/****** Object:  Table [dbo].[ToSIC_EAV_EntityRelationships]    Script Date: 18.07.2013 14:12:38 ******/
EXEC('SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON')

EXEC('CREATE TABLE [dbo].[ToSIC_EAV_EntityRelationships](
	[AttributeID] [int] NOT NULL,
	[ParentEntityID] [int] NOT NULL,
	[ChildEntityID] [int] NOT NULL,
	[SortOrder] [int] NOT NULL,
 CONSTRAINT [PK_ToSIC_EAV_EntityRelationships] PRIMARY KEY CLUSTERED 
(
	[AttributeID] ASC,
	[ParentEntityID] ASC,
	[ChildEntityID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
)


ALTER TABLE [dbo].[ToSIC_EAV_EntityRelationships]  WITH CHECK ADD  CONSTRAINT [FK_ToSIC_EAV_EntityRelationships_ToSIC_EAV_Attributes] FOREIGN KEY([AttributeID])
REFERENCES [dbo].[ToSIC_EAV_Attributes] ([AttributeID])

ALTER TABLE [dbo].[ToSIC_EAV_EntityRelationships] CHECK CONSTRAINT [FK_ToSIC_EAV_EntityRelationships_ToSIC_EAV_Attributes]

ALTER TABLE [dbo].[ToSIC_EAV_EntityRelationships]  WITH CHECK ADD  CONSTRAINT [FK_ToSIC_EAV_EntityRelationships_ToSIC_EAV_ChildEntities] FOREIGN KEY([ChildEntityID])
REFERENCES [dbo].[ToSIC_EAV_Entities] ([EntityID])

ALTER TABLE [dbo].[ToSIC_EAV_EntityRelationships] CHECK CONSTRAINT [FK_ToSIC_EAV_EntityRelationships_ToSIC_EAV_ChildEntities]

ALTER TABLE [dbo].[ToSIC_EAV_EntityRelationships]  WITH CHECK ADD  CONSTRAINT [FK_ToSIC_EAV_EntityRelationships_ToSIC_EAV_ParentEntities] FOREIGN KEY([ParentEntityID])
REFERENCES [dbo].[ToSIC_EAV_Entities] ([EntityID])

ALTER TABLE [dbo].[ToSIC_EAV_EntityRelationships] CHECK CONSTRAINT [FK_ToSIC_EAV_EntityRelationships_ToSIC_EAV_ParentEntities]


INSERT INTO [dbo].[ToSIC_EAV_AttributeTypes] ([Type]) VALUES (''Entity'')
')

/****** Object:  Trigger [dbo].[AutoLogAllChangesToTimeline_EntityRelationships]    Script Date: 29.07.2013 16:09:21 ******/
EXEC('SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON')
-- =============================================
-- Author:		Daniel Mettler
-- Create date: 2013-01-28
-- Description:	Automatically log all changes to the DataTimeline
-- =============================================
EXEC('CREATE TRIGGER [dbo].[AutoLogAllChangesToTimeline_EntityRelationships]
   ON  [dbo].[ToSIC_EAV_EntityRelationships]
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for trigger here
	Declare @table nvarchar(250)
		,@rowID int
		,@rowGuid uniqueidentifier
		,@rowTextKey nvarchar(250)
		,@operation nchar(1)
		,@sysCreated datetime
		,@sysLogID int
		,@newData xml
	
	-- Mod 2016-04-18 2dm change sql-azr detection to only apply exception on V12 as V14 supports the ContextInfo
	IF SERVERPROPERTY(''edition'') <> ''SQL Azure'' OR CAST(SERVERPROPERTY(''ProductVersion'') AS CHAR(2)) >= ''12''
	BEGIN
		IF CONTEXT_INFO() IS NULL
			BEGIN
				RAISERROR (''CONTEXT_INFO must contain ChangeLogID'', 0, 1)
				RETURN
			END
		ELSE
			SET @sysLogId = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
	END
	ELSE
		SET @sysLogId = 1

	-- Automatically get the table name where this trigger is attached
	Select @table = OBJECT_NAME(parent_id) FROM sys.triggers WHERE object_id=@@PROCID
	Select @sysCreated = GetDate()

	-- Find out if insert, update or delete
	-- Note: here you would adapt things to our table if you re-use this trigger
	-- 1. Ensure you use a valid field in both IF EXISTS queries (the SysCreated might not exist everywhere)
	-- 2. Ensure you get the right keys (this example uses @rowID, but you could also use @rowGuid, @rowTextKey)
	-- 3. if you have a logid, also set the @sysLogId
	-- Note: don''t know how to get the LogID in there when deleting...
	IF EXISTS (SELECT * FROM Inserted)
		BEGIN
			Select @rowID = ParentEntityID From inserted
			Select @newData = (Select * From Inserted For XML Auto)
			Set @operation = ''I''
			IF EXISTS (SELECT * FROM deleted)
				Begin
					SET @operation = ''U''
				End
		END
	ELSE
		BEGIN
			Select @rowID = ParentEntityID From deleted
			SET @operation = ''D''
		END

	-- Add the stuff...
	Exec dbo.ToSIC_EAV_LogToTimeline @table, @rowID, @rowGuid, @rowTextKey, @operation, @sysCreated, @sysLogId, @newData


END');



-- Must create @Entity Content-Type (AttributeSet must have Scope = ''System'' and StaticName = ''@Entity'')

EXEC ToSIC_EAV_ChangeLogAdd 'System'
DECLARE @ChangeLogID int
-- Mod 2016-04-18 2dm change sql-azr detection to only apply exception on V12 as V14 supports the ContextInfo
IF SERVERPROPERTY('edition') <> 'SQL Azure' OR CAST(SERVERPROPERTY('ProductVersion') AS CHAR(2)) >= '12'
	Set @ChangeLogID = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
ELSE
	SET @ChangeLogID = 1
SELECT @ChangeLogID

-- Insert AttributeSet @Entity
INSERT INTO ToSIC_EAV_AttributeSets (StaticName, Name, [Scope], Description, ChangeLogCreated, ChangeLogDeleted, AppID)
VALUES ('@Entity', '@Entity', 'System', 'Entity UI Definitions', @ChangeLogID, NULL, 1)

DECLARE @EntityAttributeSetID int
SELECT @EntityAttributeSetID = AttributeSetID 
FROM ToSIC_EAV_AttributeSets
WHERE StaticName = '@Entity'

-- Insert AllowMultiValue + EntityType field
IF @EntityAttributeSetID IS NOT NULL
BEGIN
	INSERT INTO ToSIC_EAV_Attributes (StaticName, [Type], ChangeLogCreated)
	VALUES ('AllowMultiValue', 'Boolean', @ChangeLogID)
	
	DECLARE @AllowMultiValueAttributeID int
	SET @AllowMultiValueAttributeID = SCOPE_IDENTITY()
	
	INSERT INTO ToSIC_EAV_AttributesInSets (AttributeSetID, AttributeID, IsTitle, SortOrder, AttributeGroupID)
	VALUES (@EntityAttributeSetID, @AllowMultiValueAttributeID, 1, 1, 1)
	
	
	INSERT INTO ToSIC_EAV_Attributes (StaticName, [Type], ChangeLogCreated)
	VALUES ('EntityType', 'String', @ChangeLogID)
	
	DECLARE @EntityTypeAttributeID int
	SET @EntityTypeAttributeID = SCOPE_IDENTITY()
	
	INSERT INTO ToSIC_EAV_AttributesInSets (AttributeSetID, AttributeID, IsTitle, SortOrder, AttributeGroupID)
	VALUES (@EntityAttributeSetID, @EntityTypeAttributeID, 0, 2, 1)
END


COMMIT TRANSACTION SexyContentUpdate