
-- Script Block for 2SexyContent 05.05.00 Update
-- ---------------------------------------------
-- This SQL Script Block must be included in every .SqlDataProvider file
-- for 2SexyContent <= 05.05.00 because of the rename of the internal
-- module name. It does not have to be included for newer SQL scripts.
-- This script changes the module name and the breaks the installation
-- so the DNN cache is refreshed. After the upgrade is triggered again,
-- the installation works.

DECLARE @IsUpgradeFromPreviousVersion int
SELECT @IsUpgradeFromPreviousVersion = CASE WHEN EXISTS(SELECT * FROM DesktopModules WHERE ModuleName = N'2SexyContent') THEN CAST (1 AS BIT) ELSE CAST (0 AS BIT) END

If @IsUpgradeFromPreviousVersion = 1
BEGIN
	UPDATE       DesktopModules
	SET                ModuleName = N'2sxc'
	WHERE        (ModuleName = N'2SexyContent')

	RAISERROR(N'Please run this upgrade again to finish the process. This is a necessary step because of the internal rename of the 2SexyContent module. ************************************************************************************************************************************************************************** PLEASE RUN THIS UPGRADE AGAIN TO FINISH THE PROCESS. This is a necessary step because of the internal rename of the 2SexyContent module. **************************************************************************************************************************************************************************', 16, 1)
	RETURN
END

-- End of the Script Block for 2SexyContent 05.05.00 Update


-- make sure sql rolls back automatically in case of error.
SET XACT_ABORT ON

BEGIN TRANSACTION SexyContentUpdate;

-- Correct Attribute descriptions for FileFilter and Paths (@File AttributeSet)
EXEC ToSIC_EAV_ChangeLogAdd 'System'
DECLARE @ChangeLogID int
-- Mod 2016-04-18 2dm change sql-azr detection to only apply exception on V12 as V14 supports the ContextInfo
IF SERVERPROPERTY('edition') <> 'SQL Azure' OR CAST(SERVERPROPERTY('ProductVersion') AS CHAR(2)) >= '12'
	Set @ChangeLogID = CONVERT(int,CONVERT(varbinary(4),CONTEXT_INFO()))
ELSE
	Set @ChangeLogID = 1
SELECT @ChangeLogID

DECLARE @FileAttributeSetID int

SELECT @FileAttributeSetID = AttributeSetID 
FROM ToSIC_EAV_AttributeSets
WHERE StaticName = '@File'

IF @FileAttributeSetID IS NOT NULL
BEGIN
	DECLARE @MetaAttributeSetID int
	SELECT @MetaAttributeSetID = AttributeSetID 
	FROM ToSIC_EAV_AttributeSets
	WHERE StaticName = '@All'

	-- Find Notes Attribute
	DECLARE @NotesAttributeID int
	Select @NotesAttributeID = ToSIC_EAV_Attributes.AttributeID
	From ToSIC_EAV_Attributes INNER JOIN
	ToSIC_EAV_AttributesInSets ON ToSIC_EAV_Attributes.AttributeID = ToSIC_EAV_AttributesInSets.AttributeID
	Where ToSIC_EAV_Attributes.StaticName = 'Notes' And ToSIC_EAV_AttributesInSets.AttributeSetID = @MetaAttributeSetID

	DECLARE @FileFilterAttributeID int
	Select @FileFilterAttributeID = ToSIC_EAV_Attributes.AttributeID
	From ToSIC_EAV_Attributes INNER JOIN
	ToSIC_EAV_AttributesInSets ON ToSIC_EAV_Attributes.AttributeID = ToSIC_EAV_AttributesInSets.AttributeID
	Where ToSIC_EAV_Attributes.StaticName = 'FileFilter' And ToSIC_EAV_AttributesInSets.AttributeSetID = @FileAttributeSetID

	IF @FileFilterAttributeID IS NOT NULL AND @NotesAttributeID IS NOT NULL
	BEGIN
		DECLARE @TargetEntityID int
		SELECT @TargetEntityID = EntityID FROM [dbo].[ToSIC_EAV_Entities] WHERE [KeyNumber] = @FileFilterAttributeID AND [AssignmentObjectTypeID] = 2 AND [AttributeSetID] = @MetaAttributeSetID

		IF @TargetEntityID IS NOT NULL
		BEGIN
			-- Find target value
			DECLARE @TargetValueID int
			SELECT @TargetValueID = ValueID FROM [dbo].[ToSIC_EAV_Values] WHERE [EntityID] = @TargetEntityID AND [AttributeID] = @NotesAttributeID

			IF @TargetValueID IS NOT NULL
			BEGIN
				UPDATE [dbo].[ToSIC_EAV_Values] SET [Value] = 'Enter the allowed file extensions, comma-separated. Example: *.jpg,*.bmp,*.png,*.gif' WHERE [ValueID] = @TargetValueID
			END
		END
	END
END

-- Add indexes (performance optimizations while rebuilding cache)
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'ToSIC_EAV_Values') AND name = N'IX_EAV_Values1')
CREATE NONCLUSTERED INDEX [IX_EAV_Values1] ON [dbo].[ToSIC_EAV_Values]
(
[AttributeID] ASC,
[EntityID] ASC,
[ChangeLogDeleted] ASC
)

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(N'ToSIC_EAV_Values') AND name = N'IX_EAV_Values2')
CREATE NONCLUSTERED INDEX [IX_EAV_Values2] ON [dbo].[ToSIC_EAV_Values]
(
	[EntityID] ASC,
	[ChangeLogDeleted] ASC,
	[AttributeID] ASC,
	[ValueID] ASC
)
INCLUDE ( 	[Value],
	[ChangeLogCreated])


-- Add Google Maps Picker Configuration
DECLARE @NumberAttributeSetID int
SELECT @NumberAttributeSetID = AttributeSetID 
FROM ToSIC_EAV_AttributeSets
WHERE StaticName = '@Number'

-- Insert InputType + AddressMask field for @Number
IF @NumberAttributeSetID IS NOT NULL
BEGIN

	-- Get @String Meta AttributeSetID
	DECLARE @StringAttributeSetID int
	SELECT @StringAttributeSetID = AttributeSetID FROM ToSIC_EAV_AttributeSets WHERE StaticName = '@String'

	DECLARE @AllAttributeSetID int
	SELECT @AllAttributeSetID = AttributeSetID FROM ToSIC_EAV_AttributeSets WHERE StaticName = '@All'
	
	DECLARE @InputTypeAttributeID int
	Select @InputTypeAttributeID = ToSIC_EAV_Attributes.AttributeID
	From ToSIC_EAV_Attributes INNER JOIN ToSIC_EAV_AttributesInSets ON ToSIC_EAV_Attributes.AttributeID = ToSIC_EAV_AttributesInSets.AttributeID
	Where ToSIC_EAV_Attributes.StaticName = 'InputType' And ToSIC_EAV_AttributesInSets.AttributeSetID = @NumberAttributeSetID
	
	IF @InputTypeAttributeID IS NULL
	BEGIN
	
		INSERT INTO ToSIC_EAV_Attributes (StaticName, [Type], ChangeLogCreated)
		VALUES ('InputType', 'String', @ChangeLogID)
		SET @InputTypeAttributeID = SCOPE_IDENTITY()
		
		INSERT INTO ToSIC_EAV_AttributesInSets (AttributeSetID, AttributeID, IsTitle, SortOrder, AttributeGroupID)
		VALUES (@NumberAttributeSetID, @InputTypeAttributeID, 0, 5, 1)
		
		INSERT INTO [dbo].[ToSIC_EAV_Entities] ([EntityGUID], [AttributeSetID], [AssignmentObjectTypeID], [KeyNumber], SortOrder, [ChangeLogCreated])
		VALUES (NEWID(), @StringAttributeSetID, 2, @InputTypeAttributeID, 0, @ChangeLogID)
		
		-- Add InputType and DropdownValues
		INSERT INTO [dbo].[ToSIC_EAV_Values]([EntityID], [AttributeID], [Value], [ChangeLogCreated])
		SELECT    SCOPE_IDENTITY(), ToSIC_EAV_Attributes.AttributeID, CASE StaticName WHEN 'InputType' THEN 'DropDown' WHEN 'DropdownValues' THEN 'Simple Text:default
GPS:gps' ELSE NULL END AS Value, @ChangeLogID
		FROM ToSIC_EAV_Attributes INNER JOIN ToSIC_EAV_AttributesInSets ON ToSIC_EAV_Attributes.AttributeID = ToSIC_EAV_AttributesInSets.AttributeID
		WHERE StaticName IN ('InputType', 'DropdownValues') AND AttributeSetID = @StringAttributeSetID
		
		
		INSERT INTO [dbo].[ToSIC_EAV_Entities] ([EntityGUID], [AttributeSetID], [AssignmentObjectTypeID], [KeyNumber], SortOrder, [ChangeLogCreated])
		VALUES (NEWID(), @AllAttributeSetID, 2, @InputTypeAttributeID, 0, @ChangeLogID)
		
		-- Add Notes
		INSERT INTO [dbo].[ToSIC_EAV_Values]([EntityID], [AttributeID], [Value], [ChangeLogCreated])
		SELECT    SCOPE_IDENTITY(), ToSIC_EAV_Attributes.AttributeID, CASE StaticName WHEN 'Notes' THEN 'Simple Text or GPS. GPS creates a Google Maps Picker. The Field below must also be a Number field but have InputType: Simple Text.'
		WHEN 'Name' THEN 'InputType' ELSE NULL END AS Value, @ChangeLogID
		FROM ToSIC_EAV_Attributes INNER JOIN ToSIC_EAV_AttributesInSets ON ToSIC_EAV_Attributes.AttributeID = ToSIC_EAV_AttributesInSets.AttributeID
		WHERE StaticName IN ('Name', 'Notes') AND AttributeSetID = @AllAttributeSetID
		
	END
	


	DECLARE @AddressMaskAttributeID int
	Select @AddressMaskAttributeID = ToSIC_EAV_Attributes.AttributeID
	From ToSIC_EAV_Attributes INNER JOIN ToSIC_EAV_AttributesInSets ON ToSIC_EAV_Attributes.AttributeID = ToSIC_EAV_AttributesInSets.AttributeID
	Where ToSIC_EAV_Attributes.StaticName = 'AddressMask' And ToSIC_EAV_AttributesInSets.AttributeSetID = @NumberAttributeSetID
	
	IF @AddressMaskAttributeID IS NULL
	BEGIN
	
		INSERT INTO ToSIC_EAV_Attributes (StaticName, [Type], ChangeLogCreated)
		VALUES ('AddressMask', 'String', @ChangeLogID)
		SET @AddressMaskAttributeID = SCOPE_IDENTITY()
		
		INSERT INTO ToSIC_EAV_AttributesInSets (AttributeSetID, AttributeID, IsTitle, SortOrder, AttributeGroupID)
		VALUES (@NumberAttributeSetID, @AddressMaskAttributeID, 0, 6, 1)
		
		INSERT INTO [dbo].[ToSIC_EAV_Entities] ([EntityGUID], [AttributeSetID], [AssignmentObjectTypeID], [KeyNumber], SortOrder, [ChangeLogCreated])
		VALUES (NEWID(), @AllAttributeSetID, 2, @AddressMaskAttributeID, 0, @ChangeLogID)
		
		-- Add Notes
		INSERT INTO [dbo].[ToSIC_EAV_Values]([EntityID], [AttributeID], [Value], [ChangeLogCreated])
		SELECT    SCOPE_IDENTITY(), ToSIC_EAV_Attributes.AttributeID, CASE StaticName WHEN 'Notes' THEN 'Tokens to search address in Map. E.g. "[Address] [Zip] [City]"'
		WHEN 'Name' THEN 'AddressMask' ELSE NULL END AS Value, @ChangeLogID
		FROM ToSIC_EAV_Attributes INNER JOIN ToSIC_EAV_AttributesInSets ON ToSIC_EAV_Attributes.AttributeID = ToSIC_EAV_AttributesInSets.AttributeID
		WHERE StaticName IN ('Name', 'Notes') AND AttributeSetID = @AllAttributeSetID
		
	END
END

-- Commit the transaction
COMMIT TRANSACTION SexyContentUpdate;
--ROLLBACK TRANSACTION SexyContentUpdate;