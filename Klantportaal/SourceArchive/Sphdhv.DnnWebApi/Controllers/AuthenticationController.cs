using System;
using System.Linq;
using System.Threading.Tasks;
using DotNetNuke.Web.Api;
using System.Web.Http;
using System.Web.Security;
using System.Web;
using DotNetNuke.Entities.Users;
using DotNetNuke.Entities.Portals;
using DotNetNuke.Services.Localization;
using DotNetNuke.UI.WebControls;
using System.Web.Caching;
using System.IO;
using DotNetNuke.Common.Utilities;
using DotNetNuke.Services.Exceptions;
using DotNetNuke.Security.Roles;

namespace Sphdhv.DnnWebApi.Controllers
{
    public class AuthenticationController : DnnApiController
    {
        public static class KnownRoleName
        {
            public const string MijnDhvRoleName = "Mijn DHV";
        }

        private static class KnownCookieName
        {
            public const string KlantPortaalCsrf = "KP_CSRF_CLIENT";
        }

        [AllowAnonymous]
        [HttpGet]
        public async Task VerifyToken([FromUri] string authtoken, [FromUri] string relaystate, [FromUri(Name ="statuscode")] string statusCode = "")
        {
            var httpContext = HttpContext.Current;
            var response = httpContext.Response;

           

            if ("CANCELLEDBYUSER".Equals(statusCode, StringComparison.OrdinalIgnoreCase) || "SERVICEFAILURE".Equals(statusCode, StringComparison.OrdinalIgnoreCase) || "UNKNOWNDOSSIER".Equals(statusCode, StringComparison.OrdinalIgnoreCase))
            {
                //Goto login page
                response.Redirect($"/?tabid={PortalSettings.LoginTabId}&returnurl={HttpUtility.UrlEncode(relaystate)}&statuscode={HttpUtility.UrlEncode(statusCode)}");
                return;
            }



            Icatt.OAuth.Contract.Claim userIdClaim = null;
            Icatt.OAuth.Contract.Claim csrfClaim = null;
            try
            {
                var proxy = new SecureTokenService();

                var claims = await proxy.VerifyTokenAsync(authtoken, relaystate);

                userIdClaim = claims.FirstOrDefault(c => "pensioenfondshakoningdhv.nl/DnnUserId" == c.Type);
                csrfClaim = claims.FirstOrDefault(c => "CSRF" == c.Type);
                proxy.Close();

            }
            catch (Exception )
            {
            }

            var destination = relaystate ?? "/";

            //Clear auth cookie
                var request = httpContext.Request;
            var httpCookie = response.Cookies[FormsAuthentication.FormsCookieName];
            if (httpCookie != null)
                httpCookie.Value = string.Empty;

            if (string.IsNullOrEmpty(userIdClaim?.Value))
            {
                //Redirect user naar protected resource zonder auth cookie - gebruiker wordt dan automatisch weer naar de geconfigureerde login pagin gestuurd
                response.Redirect(destination);
                return;
            }

            var portalId = PortalSettings.PortalId;
            var userName = userIdClaim.Value;
            var userIp = httpContext.Request.UserHostAddress;

            var roleController = new RoleController();
            var role = roleController.GetRoleByName(portalId, KnownRoleName.MijnDhvRoleName);
            if (null == role)
            {
                role = new RoleInfo
                {
                    AutoAssignment = false,
                    PortalID = portalId,
                    Description =
                        "Alle gebruikers die inloggen via de Authentication Service van SPHDHV krijgen deze rol",
                    IsPublic = false,
                    Status = RoleStatus.Approved,
                    SecurityMode = DotNetNuke.Security.Roles.SecurityMode.SecurityRole,
                    RoleName = KnownRoleName.MijnDhvRoleName,
                    RoleGroupID = Null.NullInteger
                };
                roleController.AddRole(role);
            }

            var user = UserController.GetUserByName(portalId, userName);

            if (null == user)
            {
                user = InitializeUser(userName, false, PortalSettings, new HttpContextWrapper(httpContext));
                user.Membership.Password = UserController.GeneratePassword();
                user.FirstName = "AutoGeneratedMember";
                user.LastName = "AutoGeneratedMember";
                user.DisplayName = "AutoGeneratedMember";
                user.Email = user.Username + "+AutoGeneratedMember@icatt-services.nl";
                var status = UserController.CreateUser(ref user);

                var isMemberOf = user.IsInRole(KnownRoleName.MijnDhvRoleName);
                if (!isMemberOf)
                {
                    roleController.AddUserRole(portalId, user.UserID, role.RoleID, DateTime.Today, Null.NullDate);
                }
            }

            UserController.UserLogin(portalId, user, PortalSettings.PortalName, userIp, false);

            var csrfCookie = new HttpCookie(KnownCookieName.KlantPortaalCsrf)
            {
                HttpOnly = false,
                Path = "/",
                Secure = true,
                Value = csrfClaim.Value
            };

            response.SetCookie(csrfCookie);

            response.Redirect(destination);
        }

        private UserInfo InitializeUser(string userName, bool isSuperUser, PortalSettings portalSettings,
            HttpContextBase httpContext)
        {
            var newUser = new UserInfo
            {
                IsSuperUser = isSuperUser,
                Username = userName
            };

            if (!isSuperUser) newUser.PortalID = portalSettings.PortalId;

            //Initialise the ProfileProperties Collection
            var lc = new Localization().CurrentUICulture;

            newUser.Profile.InitialiseProfile(portalSettings.PortalId);
            newUser.Profile.PreferredTimeZone = portalSettings.TimeZone;

            newUser.Profile.PreferredLocale = lc;

            //Set default countr
            var country = LookupCountry(httpContext);

            if (!String.IsNullOrEmpty(country))
            {
                newUser.Profile.Country = country;
            }
            //Set AffiliateId
            var affiliateId = Null.NullInteger;

            var reqCookies = httpContext.Request.Cookies;

            if (reqCookies["AffiliateId"] != null)
            {
                affiliateId = int.Parse(reqCookies["AffiliateId"].Value);
            }
            newUser.AffiliateID = affiliateId;

            return newUser;
        }

        private string LookupCountry(HttpContextBase httpContext)
        {
            var request = httpContext.Request;

            string ip;
            var isLocal = false;
            const string geoIpFile = "/controls/CountryListBox/Data/GeoIP.dat";
            if (request.UserHostAddress == "127.0.0.1")
            {
                //'The country cannot be detected because the user is local.
                isLocal = true;
                //Set the IP address in case they didn't specify LocalhostCountryCode
                ip = request.UserHostAddress;
            }
            else
            {
                //Set the IP address so we can find the country
                ip = request.UserHostAddress;
            }
            //Check to see if we need to generate the Cache for the GeoIPData file
            if (httpContext.Cache.Get("GeoIPData") == null)
            {
                //Store it as	well as	setting	a dependency on	the	file
                httpContext.Cache.Insert("GeoIPData", CountryLookup.FileToMemory(httpContext.Server.MapPath(geoIpFile)),
                    new CacheDependency(httpContext.Server.MapPath(geoIpFile)));
            }

            //Check to see if the request is a localhost request
            //and see if the LocalhostCountryCode is specified
            if (isLocal)
            {
                return Null.NullString;
            }

            //Either this is a remote request or it is a local
            //request with no LocalhostCountryCode specified

            //Check to see if we are using the Cached
            //version of the GeoIPData file
            //Yes, get it from cache
            var countryLookup = new CountryLookup((MemoryStream) httpContext.Cache.Get("GeoIPData"));

            //Get the country code based on the IP address
            var country = Null.NullString;
            try
            {
                country = countryLookup.LookupCountryName(ip);
            }
            catch (Exception ex)
            {
                Exceptions.LogException(ex);
            }
            return country;
        }
    }
}